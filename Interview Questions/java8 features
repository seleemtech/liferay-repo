java8 new features
----------------------
  2014 march 8th 

consine code 
Enabling functional programing

1. Lambda Expressions
2. Functional Interface
3. Default methods and static methods
4. Predefined Functional Interfaces
   Predicate
   Function
   Consumer
   Supplier
   etc
5. Double Colon Operator ( ::)
   method reference
   Constructor reference
6. Streams
7. Date and Time API
8. Optional class
9. Nashron JavaScript Engine
etc

------------------------------------------------------------------------------------------------------------------------------------------------------
1.Lambda Expression
--------------------
the main objective of lambda expression is:
 to bring the benifits of functional program into java

what is lambda expression
It is an anonymous function
Nameless
without return type
without modifiers

---------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Functional Interface
--------------------------
it contains only one abstract method and we can write any number of defult and static mrthod it is called 

note: if you want to invoke lambda expression you must write functional interface


Anonymous Inner classes vs Lambda Expressions:
-----------------------------------------------
Thread t = new Thread();
Thread t = new Thread()
{
------ this sysntax is called as Anonymous Inner classes
}

We are writing a class that extends Thread class

Anonymous Inner class can extend a normal class
Anonymous Inner class can extend an abstract class
Anonymous Inner class implement an interface which contains any number of abstract methods

Lambda Expression can implement an interface which contains a single abstract methods

Anonymous Inner class != Lambda Expression
Anonymous Inner class > Lambda Expression


If anonymous Inner class implements an interface that contains single abstract method
then only we can replace that anonymous inner class with lambda expressions

-------------------------------------------------------------------------------------------------------------------------------------------------------
3. Default methods and static methods
-----------------------------------

until 1.7V:
------------
Every method present inside interface is always:
     void ml();
     public void ml();
     abstract void ml();
     public abstract void ml();
Related methods:
1.8 V: default methods+static methods
1.9 V: private methods

Default method | virtual extentional method | defender method
--------------
use : without effecting implementations class we can method to the interface using default keywords 

static method:
--------------
use : main purpose if the everyting is static .if the general utility method what is the need of class better to take interface only. 
use:  to define a utility method inside the interface with static.
interface methods should call using interface name eg:  Interf.m1();
from 1.8 version onwanrds inside the interface we can write default and static method.
--------------------------------------------------------------------------------------------------------------------------------------------------------------

4. Predefined Functional Interface
----------------------------------
Predicate
Function
Consumer
Supplier
--------
Two argument Predefined functional interfaces:
BiPredicate
BiFunction
BiConsumer
-------------
primitive Functional interfaces
IntPredicate
IntFunction
IntConsumer

Predicate:
----------
Predicate<T>
this is use for check the condintion..
it retuns always boolean value.
it takes only one argument and it contains test()

predicate joining :
two join the both predicate we are using some methods like
pl.and(p2).test(30)
p1.or(p2).test(30)
p1.negate().test(30)

Function:
----------
Function<T,R>
using this we can perform some operation and it will produce result...
here the return type can any type.............
it takes two arguments and it contains apply()

Function chaining:
-----------------
if you have more complex function we can use function chaining....
for eg:
f1.andThen(f2).apply(i) :   first f1 function will be apply for the result f2 function will be apply..
f1.compose(f2).apply(i) :  here reverse order like first f2 and f1.....

Consumer:
-----------
Consumer<T>
using this we can store a data into db or print in console because it won't return a value it only consume the value.
it takes a one arguments and it contains accept()

consumer chaining:
------------
if you want to combine all the consumer
Consumer<Movies> cc =c1.andThen(c2).andThen(3);
cc.accept("sdsf");

Supplier:
----------
Supplier<R>
its just supply a required object but it won't take  any input..
its only return the value and it contain get()


Two argument Predefined functional interfaces:
--------------------------
BiPredicate
-----------
BiPredicate<T,T>
if you want add two argument we can use bipredicate....
rest of functinality is same

BiFunction
------------
BiFunction<T,T,R>
BiPredicate<Integer,Integer>
if you want add two argument we can use bifunction....
rest of functinality is same

BiConsumer
-----------
BiConsumer<T,T>
it takes two arguments and perform some operation but it won't return.....


Primitive version of functional interface
---------------------------------------
if use primitive internally autoboxing and autounboxing is won't happen.but problem is we have pass exact valve based on the type...
Primitive predicate types:
------------------
DoublePredicate:
LongPredicate:
IntPredicate:

Primitive  types of function:
--------------------------
DoubleFunction :  can take input type as double
                   return type can be anytype
-------
IntFunction :    can take int type as input
--------
LongFunction: can take long type as input
----------
DoubleToIntFunction-->   input type: double
                         return type: int
                         method: applyAsInt(doubIe value)
--------------
DoubleToLongFunction--->  input type: double
                          return type: long
                          method applyAsLong(doub1e)
--------------
IntToDoub1eFunction--> app1yAsDoub1e( )
-------------
IntToLongFunction-->app1yAsLong( )
------------
TolntFunction--- >return type is int
                  input can be anything
                  applyAsInt(T value)
----------
ToLongFunction
---------
TODoubIeFunction
---------

TolntBiFunction -->return type must be int type but inputs can be anytype
                    applyAsInt(T t, U u)
---------------
ToLorsgBiFunction
---------
ToDoubIeBiFunction
---------

Primitive types of  Consumer :
------------------------
IntConsumer-->  void accept (Bnt value)
                Performs this operation on the given argument.
LongConsumer
DoubleConsumer
-----------
ObjDoub1eConsumer<T> --->void accept(T t,double value)
ObjIntConsumer<T>
ObjLongConsumer<T>
------------------------------------

Primitive types of Supplier :
-----------------------
BooleanSupp1ier ----> getAsB001ean()
IntSuppIier------> getAsInt()
LongSupp1ier--------> getAsLong()
DoubleSupp1ier-----> getAsDoub1e()

=====================================
UnaryOperator<T>
----------------
If input and output are same type then we should go for
It is child of Function<T,T>

Primitive types of UnaryOperator :
-----------------------
IntUnaryOperator:-----> applyAsInt(int)
LongUnaryOperator :-----> applyAsLong(10ng)
Dub1eUnaryOperator:------> double applyAsDoub1e(doub1e)

----------------------------------

BinaryOperator :
---------------
It is the child of BiFunction<T,T,T>
BinaryOperator<T>  ----->apply(T,T)


Primitive types of BinaryOperator:
----------------------------------------
IntBinaryOperator
LongBinaryOperator
DoubleBinaryOperator


----------------------------------------------------------------------------------------------------------------------------------------------

methods and constructor reference
--------------------------------

to use resuable code we are using :: operator for refernce a method or condtuctor...

if the method is staic then the syntanx---------> classname::methodname
if the method is non static ------------------>objectname::methodname

rule: argument must be matched..

constructor reference syntax:  
constructor::new

-------------------------------------------------------------------------------------------------------------------------------------------------
Streams:
--------
collection and stream:
collection is group of object into a sigle entity...
stream to process object from the  collection

stream is not only applicable for collection.. where ever group of object is there we can go for stream for that we are usinf Stream.of() method.......

if we want use stream we need to use stream().
filter() ---> it is used for sort the list based on the condintion similiar to predicate
map()------->to do some operation and return some value similiar to Function
collect()------->to collect the list
count()--------> To collect a count 
sorted()-------->To sort a object based on asc order
sorted(comparator)=====>customised sorting
min(comparator)---->in sorting refer first element is a min value and compulsary we must pass comparator object
max(comparator)---->in sorting refer last element is a min value and compulsary we must pass comparator object
forEach()-------->to iteratiing a value 
toArray()-------->To convert stream object into array

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Date and Time API
----------------
or joda time api





















Other important topics
-----------------------

Comparable and comparator
-------------------------
comparable : default nature sorting order 
             present in java.lang package
             it contains compareTo() method.
comparator: customized sorting order
             present in java.util package
             it contains compare() method.

static keywords
------------------
static is a keywords used in java with the member function and member variable of your class so that we can call those member without using obect or 
we need to instance class to call those members.

final keywords
--------------
final is a keywords in java once you assign a value to variable that variable declared as a final we cannot change the value later that is constant.
same like method is declared as final we cannot overrie the method. if class also declared as a final we cannot extends a final class.


multithread
-------------
how many ways we can define a thread :
1. by extending thread class
2. by implementing rannable interface
final and static keywords and queries ,multithread













class Test{
  
public static int squarelt(int){
return n*n;
}
public static void main(Stringt[] args)

System.out.pritln(" Square Of 4:"+squareIt(4) ) ;
System.out.pritln(" Square Of 5:"+squareIt(5) ) ;
}
}

after java 8 features there enabled functional programing


class Test{
  

public static void main(Stringt[] args)
Function<lnteger,lnteger> f=i->i*i;


System.out.pritln(" Square Of 4:"+f. apply(4) ) ;
System.out.pritln(" Square Of 5:"+f. apply(5) ) ; 
}
}

  
  
