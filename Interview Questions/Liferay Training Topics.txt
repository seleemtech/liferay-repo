1)what is liferay;
             open source java based web application platform or framework used to create websites and also to enable intranet and extranet.
		     liferay portal ia a web platform through which we can create business solutions.
2)what is entity;
             represent the map between the model objects in Java and your database fields and tables.
			 
2.1)what is dependency injector: 
              Prior to Liferay DXP 7.2, Service Builder modules could only use Spring for dependency injection (DI).
			  Now OSGi Declarative Services (DS) is the default dependency injection mechanism for new Service Builder modules.

Declarative Services (DS) provides a service component model on top of OSGi Services. DS service components are marked with the @Component annotation and implement or extend a service class. Service components can refer to and use each other's services.
-----------------------------------------------------------------------------------------------------------------------
3)what is Service-Builder;
             a model-driven code generation tool built by Liferay that allows developers to define custom object models called entities.

Create a module of type “Service Builder” and two sub modules are created.
api     –  This module holds all service builder interfaces such as sevice, modal
service –  This module holds all implementation logic

---------------------------------------------------------------------------------------------------------------------------------------
			 
why it is a code generator;Service Builder generates a system of classes that includes a Guestbook interface, a GuestbookBaseImpl abstract class that 
Service Builder manages, and a GuestbookImpl class that you can customize. With this design, you can customize your model and let Service Builder generate 
the tedious-to-write code. That’s why Service Builder is a code generator for code generator haters.

4)what is namespace;
             a unique identifier generated by the portal for each portlet.
			 
5)UUID;
             It is a Universal unique Identifier, UUID (or GUID) is a unique identifier that can be created without a central authority.It can be
         used if a sequence number is not good enough.

6)what is build-gradle;
             It is a build automation system.		 

7)what is import;
             gives the power to backup and restore your site and web data.
			 
8)what is @;
             declarative service components are marked with @components to implement or extend a service class.
			 
9)what is local service util;
             This class is your entity's local service extension point.	
			 
10)what is list:
             more than one record is list.
			 
 what is portal:is nothing but whole webpage and portlet is nothing but a web component we can create many portlets in a portal.
			 
11)what is crud:			 
			 create,read,update,delete.
			 
12)Servlet vs Portlet
         Both are web based components use java for their implementation.servlet-uses servlet containers to render complete web page whereas portlet uses portlet
         containers to render html fragments and then aggregated by a portal into a complete webpage.
         portlet;web apps in liferay DXP r called potlets.runs only in portalserver.like liferay dxp.
         Portlets are not allowed to generate HTML code that contains tags such as body, frame, frameset, head, html, or title.
		 
13)servlets; 
             components of JEE(JAVA ENTERPRISE EDITION) framework used for web development;responsible for accepting a request and processing and also giving a
         response back to web; endpoint to a browser client.
		 
14)MVC-Model View Controller. 
             simple extension of genericportlet no special configuration files needed to be kept in sync with your code. 
                   models
				   business/service layer          persistance/data access layer.
				   for finder we have to make       for custom sql we have to make changes in persistance as well as service layer.
				   changes in impl.
				   
15)Containers;
             used to run the server like jsp and servlet container.
			 
16)Servlet Container;The servlet container is the part of web server which can be run in a separate process.
         either jee or spring based can pick them at startup. the container can initiate the servlets by the command init()method.	

17)JSP Container;JAVA SERVER PAGES
             A JSP container is an entity that translates, executes, and processes JSP pages and delivers requests to them.
		 only accepts http pages.slower than servlets.
     
18)Portlet Container;
             The portlet container is the runtime environment for portlets using the JSR 286 Portlet specification, in which portlets are instantiated, ...

19)OSGI Container;
             is a modularity framework for developing and deploying modular software programs and libraries.
         OSGi facilitates creating and managing modular Java components (called bundles) that can be deployed in a container.

OSGi facilitates creating and managing modular Java components (called bundles) that can be deployed in a container.
 As a developer, you use the OSGi specification and tools to create one or more bundles.
 OSGi defines the lifecycle for these bundles. It also hosts them and supports their interactions in a container.


------------------------------------------------------
20)JSR;Java Specification Requests (JSRs)
             are the actual descriptions of proposed and final specifications for the Java platform.
         diference between JSR 168 performs 4 lifecycle init,render,process action and destroy.Jsr 286 performs 6 lifecycle init,render,process action,
		 process event,serve resource and destroy.

JSR 168
Render Phase
Action Phase

JSR 286
Render Phase
Action Phase
Event Phase for IPC
Resource Serving phase for Ajax calls.



21)OSGI lifecycle;
             The OSGi Life-Cycle layer adds bundles that can be dynamically installed,Resolved, started, Active,stopped and uninstalled.
	     Life cycle operations are fully protected with the security architecture.
		
22)Portlet Lifecycle;
             there r 3 process init(),service()and destroy() in initiate 
         init();used to deploy after that, render() after deploying we have to add that page for that render comment
         process action() to do some action like submit;process event() aimed to execute when an event is from another portlet by INTER PORTLET COMMUNICATION(IPC)
         mechanism.serresource();we can call this by creating liferay resource URL.destroy() when the portlet is undeployed in the container we have to call this 
         method.
23)serresource;updates the page without refreshing or rendering.

24)servlet lifecycle;
             servlet class is loaded,servlet instance is created,intitialzation,initiate ,service and destroy method is invoked.
 
---------------------------------

portlet URL (its having portlet id ,instance id,lifecycle[0=render,1=action,2=serve],state[normal,minimize,maximize,undefined],mode[view,edit,help])
http://localhost:8080/web/guest/home?
p_p_id=mail_web_MailWebPortlet_INSTANCE_Kf2X1uI9cSbY&p_p_lifecycle=0&p_p_state=normal&p_p_mode=view&_mail_web_MailWebPortlet_INSTANCE_Kf2X1uI9cSbY_javax.portlet.action=addMAil

-----------------------------------------------			 
25)what is finder method;
             Finder method in Liferay provides facility to add customization in service layer. 
			 Finder method allows to define custom methods which is used to fetch data from DB for different table column. ...	
			 we will not use finder method for liferay given tables because no entities will be available in service.xml.
			 we can use only for custom tables.

26)what is persistance class;
             Persistent classes are classes in an application that implements the entities.	

27)what is dynamic query;
             We already know liferay service builder tool will create all required database services in the portlet but some time
			 we need some specific requirement where we need some custom services there we will use dynamic query API to meet those requirements. 
			 Dynamic Query API can only perform read operations against database. These we will use specially to provide search operations against database.
             Dynamic Query API is independent feature and we can implement anywhere in the development like we can implement in JSP pages, Portlet Action Classes 
			 and service implementation classes.for custom tables portlet class loader and for liferay portal class loader.
			 
DynamicQuery query = DynamicQueryFactoryUtil.forClass(Entity_Name.class, "Alias", PortletClassLoaderUtil.getClassLoader());

Ex:-
DynamicQuery countryQuery = DynamicQueryFactoryUtil.forClass(Country.class, "ct", PortletClassLoaderUtil.getClassLoader());
propertyFactoryutil
reisctrictionFactoryUtil
Projection
projectionList
orderfactoryutil


The basic difference between two statements is Class loader. For Liferay tables we use PortalClassLoaderUtil and for custom tables we use PortletClassLoaderUtil.

28)what is projection: to get one specific column only.

29)what is custom sql;
			 We already have Custom SQL to meet the same requirements but Custom SQL is Service Builder Dependent feature and we need to follow many steps to
			 implement custom SQL.If we want change or modify service each time we need to rerun service builder.
			 
inside META-INF create custom-sql and inside it create default.xml
create a new class in persistence impl like entityFinderImpl extends basePErsistenceImpl inplements EntityFinder

after build service the baseperistenceimple become basefinderImpl &  we need write some code inside that method 
after inside LSU class we need to call that method.

all these 3 can be used to fetch data from database first preferences will be given to finder and dynamic and last will be to custom sql.
      there r 2 types of tables custom and liferay tables. custom-created by us and liferay-already created in liferay.		

30)what is order by; sorting all types of data like asscending and descending.	
 controller/portlet calls service and service calls persistance.
 
31)what is modelhints:
in liferay the size of the field is fixed, suppose if we have to add the more no of characters use modelhints method. 
			 

32)what is a log/loggers;
             we r using sysout in JAVA but the only thing is sysout will print the output in the console,now the loggers will print 
			 1.from which class it is generated 
			 2.at what time it is generated
			 3.what is the severity of the message.
			 
33)What are the Log Levels Supported By Liferay?
             There are 6 log Levels supported by Liferay, you can decide the level based on the log severity.
             FATAL : To Log the messages which can be a severe or vital issue that harms the complete system.
             ERROR : To Log the error message which blocks a behavior (functionality) being
             WARN : To Log the warning messages, which are not critical
             INFO : To Log the useful  information.
             DEBUG : To Log Debug information, use it to debug the code.
             TRACE : To Log the exception call traces of the code
			 
34)any of the classes can be used to achieve folder creation but DLSERVICES AND DLAPPSERVICES can only be used to achieve folder creation in liferay 
document and media folder.  

fileEntry = _dlAppService.addFileEntry(
				null, repository.getRepositoryId(),
				DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, fileName,
				_mimeTypes.getContentType(file), fileName, null, null, null,
				file, null, null, serviceContext);

Folder = _dlAppLocalService.addFolder(
					folder.getExternalReferenceCode(), userId, repositoryId,
					parentFolderId, name, folder.getDescription(),
					serviceContext);

35)persistance layer and service layer makeup the bottom layers of the backend.

36)what is loose coupling;Service Builder is based on a design philosophy called loose coupling. It generates three layers of your application: 
the model, the service, and the persistence layers. Loose coupling means you can swap out the persistence layer with little to no change in the model and service
 layers. The model is in the -api module, and the service and persistence layers are in the -service module.


oauth2
Its give authorization for third party application.
step 1: we need create oauth application
step 2:its generats clint id and client secreate
step 3:after getting that  clint id and client secreate we posting in postman
step 4:It checks the request if its correct liferay generats bearear token 
step 5:Based on that barier token we can get that data.


how to make our service as public
using sap we can do
step  while creating sap we need to add our service and method .

SMTP Simple mail transfer protocal
step1:controlpanel>configure>service administation
step2:service administation > mail
step3:inside we need add our username password etc...
MailServiceUtil using this we can send the mail.


how to embeded portlet into theme 
<@liferay_portlet["runtime"]
    instanceId="INSTANCE_ID"
 	   portletName="PORTLET_NAME"
/>


types of role 
1)Regular role
Administrator
Analytics Administrator
Guest
Owner
Power User
User
Portal Content Reviewer

2)site role
Site Administrator
Site Content Reviewer
Site Member
Site Owner


3)organization role
Organization Administrator
Organization Content Reviewer
Organization Owner
Organization User
			 

Categories and Tags are two essential tools for helping users find content through search or navigation.

Using Categories, you can group similar assets and organize your content. For example, you can create a Success Stories Category and group all customer success articles website under this Category.

Tags are keywords you can use to organize your assets and describe specific information about its content. 

   check what is joins and inner query			 
		 
			 Control Panel

Structure
Template
Web Content
Role
Organization
Virtual Instance
Sites
Tags 
AssetTag
Categories -- AssetCategory
Vocabularay
diff bet Tag Category

Server Administration(log levels db cache)
User
Organization
User group
Creating Page (Private and Public) System Settings > Release Feature Flags

Table

Company
Group
User_ 
Role_ ==roles
Layout ---- Page
AssetTag and assetentry_assettag== tags
AssetEntry==asset publisher 
AssetVacabular =(vocabular)
AssetCategory and assetentry_assetcategoryrel =catogories
JournalArticle==web content
DDMStructure ==structre
DDMTemplate  ==template
DLFileEntry = files
DLFolder=    Folder
Kelodefinition ==workflow title and content
Kelonode== its store all the node
Kelotask==its store task name
kaleotransition
kaleotaskassignment
kaleotaskassignmentinstance
kaleonotification
kaleoaction=its strong script and excution type
kaleoinstance  ==our entity className and workflowContext(its having our custom maped datas)
VirtualHost

User_ - User data.
 Organization_ - Stores Liferay Organization Entries.
 Users_Orgs - Maps UserId with Organization id.
 Role_ - Stores Liferay Role Entries.
 Users_Roles - Maps UserId with RoleId.
 UserGroup - Stores Liferay User Group Entries.
 Users_UserGroups - Maps UserId with UserGroupId.


BlogsEntry - Blogs entry data.
 BlogsStatsUser - Stores the view count/stats for blog entries.
 BlogsCategory - Stores blogs categories.

JournalArticle - Stores the Journal Article(WCM Article) and ddmfieldattributes and asset entry
 JournalArticleImage - Stores image attached with an article.
 JournalFeed - Stores the data for external feeds.
 JournalStructure - Stores the data for Journal Structures.
 JournalTemplate - Stores the data for Journal Templates.

vocabulary-its used to grouping assets
Expandtable-its stores custom fields/attributes
ExpandoColumn-It manages the columns information related to respective Expando table.
ExpandoRow-It will used to manage table rows related to respective Expando table
ExpandoValue- Originally data will be stored in this table and it will mapped with Expando table and Expando row.

ddmcontent-its stores forms data

group- its stores created sites.

release_ =it store packeges
servicecomponent = its stores table namespace and data

Development
Modules
	Portlet
		ActionURL and ActionCommand
		RenderURL and RenderCommand
		ResourceURL and ResourceCommand
	Servicebuilder
		Finder
		
Hooks
	JSP Hook
	Service Wrapper
	Struts Action
	Action Command
	Modal Listener
	Filter Hook
	


DynamicQuery
CustomSql
model-hints	



User_
Role_
USer	
tel


Workflow
---------
first we need status feild and asset and workflow refernce in service.xml file
then we need to invoke the workflow hander service
after enable our entity as asset 
for that we need invoke two class one assetRendererFactory(Register) and assetRenderer
in impl we need to start workflow instance 
WorkflowHandlerRegistryUtil.startWorkflowInstance(newsEntry.getCompanyId(), newsEntry.getGroupId(),
					newsEntry.getUserId(), NewsEntry.class.getName(), newsEntry.getPrimaryKey(), newsEntry,
					serviceContext);

after control panel>application>wokflow>proccessbuilder>configuration>assigned wokflow
--------------------------------------------------------------------------------------------------------------------------------------------------------

sysConfig:
---------
first we need to write interface using meta ocd @
@Meta.OCD(
    id = "com.sys.config.file.UsersKeyContactEmailConfiguration",
    localization = "content/Language",
    name = "key-contact-Email-configuration"
)

then using config id we can interface 
@Component(configurationPid = "com.sys.config.file.UsersKeyContactEmailConfiguration",
service = UserEmailConfig.class)

then using configuration util we can activate the class 

private volatile UsersKeyContactEmailConfiguration _configuration;

	@Activate
	@Modified
	protected void activate(Map<String, Object> properties) {
		_configuration = ConfigurableUtil.createConfigurable(UsersKeyContactEmailConfiguration.class,
				properties);
	}

	public Map<String, List<String>> getKeyContactRolesMap() {
		Map<String, List<String>> keyContactCountryMap = new LinkedHashMap<>();
		keyContactCountryMap.put("upp-emea", _configuration.getUppEmeaKeyContactEmails());
		keyContactCountryMap.put("upp-apj", _configuration.getUppApjKeyContactEmails());
		keyContactCountryMap.put("upp-na", _configuration.getUppNaKeyContactEmails());
		keyContactCountryMap.put("upp-lar", _configuration.getUppLarKeyContactEmails());

		return keyContactCountryMap;
	}


----------------------------------------------------------------------------------------------------------------------------------------------------------
 Implementing Google SSO using OpenID connect
how to implement sso single singn on
1.Go to Control panel>Configuration>System settings>SSO>OpenID connect and Enable the OpenID connect and Save.
2.Then go to Google console, Search as Google console, as shown below
3.Then create new project
4.Then go to credentials options and select OAuth ClientID.
NOTE: To create an OAuth client ID, you must first configure your consent screen,
5.In the OAuth consent screen, Give External and Give Create.
6.Then provide any app name, User E-mail and links as shown 
Now in credentials, Give create credentials>OAuth ClientID>Select Application type as web application and add the redirect url as shown below and Click Create

Authorised redirect URL: http://localhost:8080/c/portal/login/openidconnect

9.In next page it will show CLIENTID AND SECRET KEY, Copy this in notepad.
10.Go to OpenId connect provider and Give any provider name like Google Sign in(Your wish), Then copy the ClientId and secret key

11.Provide the Discovery EndPoint like this https://accounts.google.com/.well-known/openid-configuration as shown below and Click Save.

-------------------------------------------------------------------------------------------------------------------------------------------------------

Headless-api
-------
using rest builder we can create headless api template
after we need to configure in cors for our url

controlPanel > sys > securityTool > Portal Cross-Origin Resource Sharing > 
Add new one 
url pattern /o/appointments/*
then we need to write yaml file for methods
after buildRest
then impl > java > resource.v1_0 > entityResourceImpl this method we need to implement
After that we can check in postman using url it is available in baseresourceimpl


Example Link
https://github.com/dnebing/vitamins/blob/master/modules/headless-vitamins/headless-vitamins-impl/rest-openapi.yaml
----------------------------------------------------------------------------------------------------------------------------------------------------------
site initializer
---------------
widget site : 
three class needed
dependencyResolver class
layout intializer class
customsiteInitiazer class its invoke siteinitializer service

content site :

in dnd file we need to give providerCapability there we call liferay.site.initializer   it invokes siteinitializerextender class
if you want add page we need to write in page.json 
--------
----------------------------------------------------------------------------------------------------------------------------------------------
How to call services in ftl or theme

<#macro displayCategories
	categories
>
	<#if categories?has_content>
		<ul class="categories">
			<#list categories as category>
				<li>
					<#assign categoryURL = renderResponse.createRenderURL() />

					${categoryURL.setParameter("resetCur", "true")}
					${categoryURL.setParameter("categoryId", category.getCategoryId()?string)}

					<a href="${categoryURL}">${category.getName()}</a>

					<#if serviceLocator??>
						<#assign
							assetCategoryService = serviceLocator.findService("com.liferay.asset.kernel.service.AssetCategoryService")

							childCategories = assetCategoryService.getChildCategories(category.getCategoryId())
						/>

						<@displayCategories categories=childCategories />
					</#if>
				</li>
			</#list>
		</ul>
	</#if>
</#macro>


in fragments or template in html
[#if serviceLocator??]
<div class="commerce-invoices-web-901">
	[#if configuration.showHeader == true]
	<div class="header-wapper">
		<div><${configuration.headingLevel}
			class="header">${configuration.headerText}</${configuration.headingLevel}>
		</div>
		[#if configuration.showButton == true && configuration.buttonPosition
		== 'header']
		<div>
			<a href="${configuration.buttonLink}">
				<button class="btn btn-${configuration.buttonType} link">${configuration.buttonText}</button>
			</a>
		</div>
		[/#if]
	</div>
	[/#if] [#attempt] [#assign startIndex = configuration.startIndex?number
	! /] [#recover] [#assign startIndex = -1 ! /] [/#attempt] [#attempt]
	[#assign endIndex = configuration.endIndex?number ! /] [#recover]
	[#assign endIndex = -1 ! /] [/#attempt] [#assign commercePayment =
	serviceLocator.findService("com.liferay.commerce.service.CommerceOrderPaymentLocalService")!
	/] [#assign payments =
	commercePayment.getCommerceOrderPayments(startIndex,endIndex)! /]
	[#assign commerceOrder =
	serviceLocator.findService("com.liferay.commerce.service.CommerceOrderLocalService")!
	/]
	<table class="table table-striped">
		<thead>
			<tr>
				<th scope="col">Invoice ID</th>
				<th scope="col">Date</th>
				<th scope="col">Order ID</th>
				<th scope="col">Status</th>
				<th scope="col">Amount</th>
				<th scope="col">Action</th>
			</tr>
		</thead>

		<tbody>
			[#if payments?has_content] [#list payments as payment] [#assign order
			= commerceOrder.fetchCommerceOrder(payment.getCommerceOrderId())! /]
			[#assign amount = order.getTotalWithTaxAmountMoney()! /] [#assign
			is_paid = false! /]
			<tr>
				<th scope="row">${payment.getCommerceOrderPaymentId()}</th>
				<td>${payment.getCreateDate()?date}</td>
				<td>${payment.getCommerceOrderId()}</td> [#if
				payment.getStatus()==1]
				<td><span class="label label-warning"> <span
						class="label-item label-item-expand">Pending</span>
				</span></td> [#elseif payment.getStatus()==0] [#assign is_paid = true!/]
				<td><span class="label label-success"> <span
						class="label-item label-item-expand">Paid</span>
				</span></td> [#elseif payment.getStatus()==2]
				<td><span class="label label-warning"> <span
						class="label-item label-item-expand">Not Paid</span>
				</span></td> [#elseif payment.getStatus()==4]
				<td><span class="label label-warning"> <span
						class="label-item label-item-expand">Failed</span>
				</span></td> [#elseif payment.getStatus()==8]
				<td><span class="label label-error"> <span
						class="label-item label-item-expand">Cancelled</span>
				</span></td> [/#if]

				<td>${amount.format(localeUtil.getDefault())}</td>
				<td>
					<div class="btn-group">
						<div class="btn-group-item">
							<button class="btn btn-secondary" type="submit">
								${is_paid?then('View','Pay')}</button>
						</div>
					</div>
				</td>
			</tr>
			[/#list] [/#if]
		</tbody>
	</table>

	[#if configuration.showButton == true && configuration.buttonPosition
	== 'footer']
	<div class="footer">
		<a href="${configuration.buttonLink}">
			<button class="btn btn-${configuration.buttonType} link">${configuration.buttonText}</button>
		</a>
	</div>
	[/#if]
</div>
[#else]
<span class="danger">Enable the serviceLocator</span>
[/#if]



close a window : ctrl+w
switch tab : ctrl+tab
close application: alt+f4
incognet window : ctrl+shift+n
new tab same browser: ctrl+ t
new tab in difference browser : ctrl+ n














