/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.job.opening.service.model.impl;

import com.job.opening.service.model.Jobinfo;
import com.job.opening.service.model.JobinfoModel;
import com.job.opening.service.model.JobinfoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Jobinfo service. Represents a row in the &quot;rms_Jobinfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>JobinfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JobinfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JobinfoImpl
 * @generated
 */
@JSON(strict = true)
public class JobinfoModelImpl
	extends BaseModelImpl<Jobinfo> implements JobinfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a jobinfo model instance should use the <code>Jobinfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "rms_Jobinfo";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"jobId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"modifiedDate", Types.TIMESTAMP}, {"postingTitle", Types.VARCHAR},
		{"title", Types.VARCHAR}, {"assignedRecruiter", Types.VARCHAR},
		{"targetDate", Types.TIMESTAMP}, {"jobopeningStatus", Types.VARCHAR},
		{"industry", Types.VARCHAR}, {"jobResource", Types.VARCHAR},
		{"hiringManager", Types.VARCHAR}, {"clientName", Types.VARCHAR},
		{"positions", Types.VARCHAR}, {"dateOpened", Types.TIMESTAMP},
		{"jobType", Types.VARCHAR}, {"workExperience", Types.VARCHAR},
		{"skillSet", Types.VARCHAR}, {"projectStatus", Types.VARCHAR},
		{"summaryId", Types.BIGINT}, {"otherId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jobId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("postingTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assignedRecruiter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jobopeningStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("industry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jobResource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hiringManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("positions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOpened", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jobType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workExperience", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("skillSet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summaryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("otherId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rms_Jobinfo (uuid_ VARCHAR(75) null,jobId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,modifiedDate DATE null,postingTitle VARCHAR(75) null,title VARCHAR(75) null,assignedRecruiter VARCHAR(75) null,targetDate DATE null,jobopeningStatus VARCHAR(75) null,industry VARCHAR(75) null,jobResource VARCHAR(75) null,hiringManager VARCHAR(75) null,clientName VARCHAR(75) null,positions VARCHAR(75) null,dateOpened DATE null,jobType VARCHAR(75) null,workExperience VARCHAR(75) null,skillSet VARCHAR(75) null,projectStatus VARCHAR(75) null,summaryId LONG,otherId LONG)";

	public static final String TABLE_SQL_DROP = "drop table rms_Jobinfo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY jobinfo.dateOpened ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rms_Jobinfo.dateOpened ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DATEOPENED_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Jobinfo toModel(JobinfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Jobinfo model = new JobinfoImpl();

		model.setUuid(soapModel.getUuid());
		model.setJobId(soapModel.getJobId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPostingTitle(soapModel.getPostingTitle());
		model.setTitle(soapModel.getTitle());
		model.setAssignedRecruiter(soapModel.getAssignedRecruiter());
		model.setTargetDate(soapModel.getTargetDate());
		model.setJobopeningStatus(soapModel.getJobopeningStatus());
		model.setIndustry(soapModel.getIndustry());
		model.setJobResource(soapModel.getJobResource());
		model.setHiringManager(soapModel.getHiringManager());
		model.setClientName(soapModel.getClientName());
		model.setPositions(soapModel.getPositions());
		model.setDateOpened(soapModel.getDateOpened());
		model.setJobType(soapModel.getJobType());
		model.setWorkExperience(soapModel.getWorkExperience());
		model.setSkillSet(soapModel.getSkillSet());
		model.setProjectStatus(soapModel.getProjectStatus());
		model.setSummaryId(soapModel.getSummaryId());
		model.setOtherId(soapModel.getOtherId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Jobinfo> toModels(JobinfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Jobinfo> models = new ArrayList<Jobinfo>(soapModels.length);

		for (JobinfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public JobinfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jobId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJobId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jobId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Jobinfo.class;
	}

	@Override
	public String getModelClassName() {
		return Jobinfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Jobinfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Jobinfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Jobinfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Jobinfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Jobinfo, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Jobinfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Jobinfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Jobinfo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Jobinfo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Jobinfo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Jobinfo.class.getClassLoader(), Jobinfo.class, ModelWrapper.class);

		try {
			Constructor<Jobinfo> constructor =
				(Constructor<Jobinfo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Jobinfo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Jobinfo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Jobinfo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Jobinfo, Object>>();
		Map<String, BiConsumer<Jobinfo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Jobinfo, ?>>();

		attributeGetterFunctions.put("uuid", Jobinfo::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Jobinfo, String>)Jobinfo::setUuid);
		attributeGetterFunctions.put("jobId", Jobinfo::getJobId);
		attributeSetterBiConsumers.put(
			"jobId", (BiConsumer<Jobinfo, Long>)Jobinfo::setJobId);
		attributeGetterFunctions.put("groupId", Jobinfo::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Jobinfo, Long>)Jobinfo::setGroupId);
		attributeGetterFunctions.put("companyId", Jobinfo::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Jobinfo, Long>)Jobinfo::setCompanyId);
		attributeGetterFunctions.put("userId", Jobinfo::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Jobinfo, Long>)Jobinfo::setUserId);
		attributeGetterFunctions.put("userName", Jobinfo::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Jobinfo, String>)Jobinfo::setUserName);
		attributeGetterFunctions.put("modifiedDate", Jobinfo::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Jobinfo, Date>)Jobinfo::setModifiedDate);
		attributeGetterFunctions.put("postingTitle", Jobinfo::getPostingTitle);
		attributeSetterBiConsumers.put(
			"postingTitle",
			(BiConsumer<Jobinfo, String>)Jobinfo::setPostingTitle);
		attributeGetterFunctions.put("title", Jobinfo::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Jobinfo, String>)Jobinfo::setTitle);
		attributeGetterFunctions.put(
			"assignedRecruiter", Jobinfo::getAssignedRecruiter);
		attributeSetterBiConsumers.put(
			"assignedRecruiter",
			(BiConsumer<Jobinfo, String>)Jobinfo::setAssignedRecruiter);
		attributeGetterFunctions.put("targetDate", Jobinfo::getTargetDate);
		attributeSetterBiConsumers.put(
			"targetDate", (BiConsumer<Jobinfo, Date>)Jobinfo::setTargetDate);
		attributeGetterFunctions.put(
			"jobopeningStatus", Jobinfo::getJobopeningStatus);
		attributeSetterBiConsumers.put(
			"jobopeningStatus",
			(BiConsumer<Jobinfo, String>)Jobinfo::setJobopeningStatus);
		attributeGetterFunctions.put("industry", Jobinfo::getIndustry);
		attributeSetterBiConsumers.put(
			"industry", (BiConsumer<Jobinfo, String>)Jobinfo::setIndustry);
		attributeGetterFunctions.put("jobResource", Jobinfo::getJobResource);
		attributeSetterBiConsumers.put(
			"jobResource",
			(BiConsumer<Jobinfo, String>)Jobinfo::setJobResource);
		attributeGetterFunctions.put(
			"hiringManager", Jobinfo::getHiringManager);
		attributeSetterBiConsumers.put(
			"hiringManager",
			(BiConsumer<Jobinfo, String>)Jobinfo::setHiringManager);
		attributeGetterFunctions.put("clientName", Jobinfo::getClientName);
		attributeSetterBiConsumers.put(
			"clientName", (BiConsumer<Jobinfo, String>)Jobinfo::setClientName);
		attributeGetterFunctions.put("positions", Jobinfo::getPositions);
		attributeSetterBiConsumers.put(
			"positions", (BiConsumer<Jobinfo, String>)Jobinfo::setPositions);
		attributeGetterFunctions.put("dateOpened", Jobinfo::getDateOpened);
		attributeSetterBiConsumers.put(
			"dateOpened", (BiConsumer<Jobinfo, Date>)Jobinfo::setDateOpened);
		attributeGetterFunctions.put("jobType", Jobinfo::getJobType);
		attributeSetterBiConsumers.put(
			"jobType", (BiConsumer<Jobinfo, String>)Jobinfo::setJobType);
		attributeGetterFunctions.put(
			"workExperience", Jobinfo::getWorkExperience);
		attributeSetterBiConsumers.put(
			"workExperience",
			(BiConsumer<Jobinfo, String>)Jobinfo::setWorkExperience);
		attributeGetterFunctions.put("skillSet", Jobinfo::getSkillSet);
		attributeSetterBiConsumers.put(
			"skillSet", (BiConsumer<Jobinfo, String>)Jobinfo::setSkillSet);
		attributeGetterFunctions.put(
			"projectStatus", Jobinfo::getProjectStatus);
		attributeSetterBiConsumers.put(
			"projectStatus",
			(BiConsumer<Jobinfo, String>)Jobinfo::setProjectStatus);
		attributeGetterFunctions.put("summaryId", Jobinfo::getSummaryId);
		attributeSetterBiConsumers.put(
			"summaryId", (BiConsumer<Jobinfo, Long>)Jobinfo::setSummaryId);
		attributeGetterFunctions.put("otherId", Jobinfo::getOtherId);
		attributeSetterBiConsumers.put(
			"otherId", (BiConsumer<Jobinfo, Long>)Jobinfo::setOtherId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getJobId() {
		return _jobId;
	}

	@Override
	public void setJobId(long jobId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobId = jobId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPostingTitle() {
		if (_postingTitle == null) {
			return "";
		}
		else {
			return _postingTitle;
		}
	}

	@Override
	public void setPostingTitle(String postingTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postingTitle = postingTitle;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getAssignedRecruiter() {
		if (_assignedRecruiter == null) {
			return "";
		}
		else {
			return _assignedRecruiter;
		}
	}

	@Override
	public void setAssignedRecruiter(String assignedRecruiter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assignedRecruiter = assignedRecruiter;
	}

	@JSON
	@Override
	public Date getTargetDate() {
		return _targetDate;
	}

	@Override
	public void setTargetDate(Date targetDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetDate = targetDate;
	}

	@JSON
	@Override
	public String getJobopeningStatus() {
		if (_jobopeningStatus == null) {
			return "";
		}
		else {
			return _jobopeningStatus;
		}
	}

	@Override
	public void setJobopeningStatus(String jobopeningStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobopeningStatus = jobopeningStatus;
	}

	@JSON
	@Override
	public String getIndustry() {
		if (_industry == null) {
			return "";
		}
		else {
			return _industry;
		}
	}

	@Override
	public void setIndustry(String industry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_industry = industry;
	}

	@JSON
	@Override
	public String getJobResource() {
		if (_jobResource == null) {
			return "";
		}
		else {
			return _jobResource;
		}
	}

	@Override
	public void setJobResource(String jobResource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobResource = jobResource;
	}

	@JSON
	@Override
	public String getHiringManager() {
		if (_hiringManager == null) {
			return "";
		}
		else {
			return _hiringManager;
		}
	}

	@Override
	public void setHiringManager(String hiringManager) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hiringManager = hiringManager;
	}

	@JSON
	@Override
	public String getClientName() {
		if (_clientName == null) {
			return "";
		}
		else {
			return _clientName;
		}
	}

	@Override
	public void setClientName(String clientName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_clientName = clientName;
	}

	@JSON
	@Override
	public String getPositions() {
		if (_positions == null) {
			return "";
		}
		else {
			return _positions;
		}
	}

	@Override
	public void setPositions(String positions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_positions = positions;
	}

	@JSON
	@Override
	public Date getDateOpened() {
		return _dateOpened;
	}

	@Override
	public void setDateOpened(Date dateOpened) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOpened = dateOpened;
	}

	@JSON
	@Override
	public String getJobType() {
		if (_jobType == null) {
			return "";
		}
		else {
			return _jobType;
		}
	}

	@Override
	public void setJobType(String jobType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobType = jobType;
	}

	@JSON
	@Override
	public String getWorkExperience() {
		if (_workExperience == null) {
			return "";
		}
		else {
			return _workExperience;
		}
	}

	@Override
	public void setWorkExperience(String workExperience) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workExperience = workExperience;
	}

	@JSON
	@Override
	public String getSkillSet() {
		if (_skillSet == null) {
			return "";
		}
		else {
			return _skillSet;
		}
	}

	@Override
	public void setSkillSet(String skillSet) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skillSet = skillSet;
	}

	@JSON
	@Override
	public String getProjectStatus() {
		if (_projectStatus == null) {
			return "";
		}
		else {
			return _projectStatus;
		}
	}

	@Override
	public void setProjectStatus(String projectStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectStatus = projectStatus;
	}

	@JSON
	@Override
	public long getSummaryId() {
		return _summaryId;
	}

	@Override
	public void setSummaryId(long summaryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_summaryId = summaryId;
	}

	@JSON
	@Override
	public long getOtherId() {
		return _otherId;
	}

	@Override
	public void setOtherId(long otherId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherId = otherId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Jobinfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Jobinfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Jobinfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JobinfoImpl jobinfoImpl = new JobinfoImpl();

		jobinfoImpl.setUuid(getUuid());
		jobinfoImpl.setJobId(getJobId());
		jobinfoImpl.setGroupId(getGroupId());
		jobinfoImpl.setCompanyId(getCompanyId());
		jobinfoImpl.setUserId(getUserId());
		jobinfoImpl.setUserName(getUserName());
		jobinfoImpl.setModifiedDate(getModifiedDate());
		jobinfoImpl.setPostingTitle(getPostingTitle());
		jobinfoImpl.setTitle(getTitle());
		jobinfoImpl.setAssignedRecruiter(getAssignedRecruiter());
		jobinfoImpl.setTargetDate(getTargetDate());
		jobinfoImpl.setJobopeningStatus(getJobopeningStatus());
		jobinfoImpl.setIndustry(getIndustry());
		jobinfoImpl.setJobResource(getJobResource());
		jobinfoImpl.setHiringManager(getHiringManager());
		jobinfoImpl.setClientName(getClientName());
		jobinfoImpl.setPositions(getPositions());
		jobinfoImpl.setDateOpened(getDateOpened());
		jobinfoImpl.setJobType(getJobType());
		jobinfoImpl.setWorkExperience(getWorkExperience());
		jobinfoImpl.setSkillSet(getSkillSet());
		jobinfoImpl.setProjectStatus(getProjectStatus());
		jobinfoImpl.setSummaryId(getSummaryId());
		jobinfoImpl.setOtherId(getOtherId());

		jobinfoImpl.resetOriginalValues();

		return jobinfoImpl;
	}

	@Override
	public Jobinfo cloneWithOriginalValues() {
		JobinfoImpl jobinfoImpl = new JobinfoImpl();

		jobinfoImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		jobinfoImpl.setJobId(this.<Long>getColumnOriginalValue("jobId"));
		jobinfoImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		jobinfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		jobinfoImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		jobinfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		jobinfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		jobinfoImpl.setPostingTitle(
			this.<String>getColumnOriginalValue("postingTitle"));
		jobinfoImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		jobinfoImpl.setAssignedRecruiter(
			this.<String>getColumnOriginalValue("assignedRecruiter"));
		jobinfoImpl.setTargetDate(
			this.<Date>getColumnOriginalValue("targetDate"));
		jobinfoImpl.setJobopeningStatus(
			this.<String>getColumnOriginalValue("jobopeningStatus"));
		jobinfoImpl.setIndustry(
			this.<String>getColumnOriginalValue("industry"));
		jobinfoImpl.setJobResource(
			this.<String>getColumnOriginalValue("jobResource"));
		jobinfoImpl.setHiringManager(
			this.<String>getColumnOriginalValue("hiringManager"));
		jobinfoImpl.setClientName(
			this.<String>getColumnOriginalValue("clientName"));
		jobinfoImpl.setPositions(
			this.<String>getColumnOriginalValue("positions"));
		jobinfoImpl.setDateOpened(
			this.<Date>getColumnOriginalValue("dateOpened"));
		jobinfoImpl.setJobType(this.<String>getColumnOriginalValue("jobType"));
		jobinfoImpl.setWorkExperience(
			this.<String>getColumnOriginalValue("workExperience"));
		jobinfoImpl.setSkillSet(
			this.<String>getColumnOriginalValue("skillSet"));
		jobinfoImpl.setProjectStatus(
			this.<String>getColumnOriginalValue("projectStatus"));
		jobinfoImpl.setSummaryId(
			this.<Long>getColumnOriginalValue("summaryId"));
		jobinfoImpl.setOtherId(this.<Long>getColumnOriginalValue("otherId"));

		return jobinfoImpl;
	}

	@Override
	public int compareTo(Jobinfo jobinfo) {
		int value = 0;

		value = DateUtil.compareTo(getDateOpened(), jobinfo.getDateOpened());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Jobinfo)) {
			return false;
		}

		Jobinfo jobinfo = (Jobinfo)object;

		long primaryKey = jobinfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Jobinfo> toCacheModel() {
		JobinfoCacheModel jobinfoCacheModel = new JobinfoCacheModel();

		jobinfoCacheModel.uuid = getUuid();

		String uuid = jobinfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			jobinfoCacheModel.uuid = null;
		}

		jobinfoCacheModel.jobId = getJobId();

		jobinfoCacheModel.groupId = getGroupId();

		jobinfoCacheModel.companyId = getCompanyId();

		jobinfoCacheModel.userId = getUserId();

		jobinfoCacheModel.userName = getUserName();

		String userName = jobinfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			jobinfoCacheModel.userName = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jobinfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			jobinfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		jobinfoCacheModel.postingTitle = getPostingTitle();

		String postingTitle = jobinfoCacheModel.postingTitle;

		if ((postingTitle != null) && (postingTitle.length() == 0)) {
			jobinfoCacheModel.postingTitle = null;
		}

		jobinfoCacheModel.title = getTitle();

		String title = jobinfoCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			jobinfoCacheModel.title = null;
		}

		jobinfoCacheModel.assignedRecruiter = getAssignedRecruiter();

		String assignedRecruiter = jobinfoCacheModel.assignedRecruiter;

		if ((assignedRecruiter != null) && (assignedRecruiter.length() == 0)) {
			jobinfoCacheModel.assignedRecruiter = null;
		}

		Date targetDate = getTargetDate();

		if (targetDate != null) {
			jobinfoCacheModel.targetDate = targetDate.getTime();
		}
		else {
			jobinfoCacheModel.targetDate = Long.MIN_VALUE;
		}

		jobinfoCacheModel.jobopeningStatus = getJobopeningStatus();

		String jobopeningStatus = jobinfoCacheModel.jobopeningStatus;

		if ((jobopeningStatus != null) && (jobopeningStatus.length() == 0)) {
			jobinfoCacheModel.jobopeningStatus = null;
		}

		jobinfoCacheModel.industry = getIndustry();

		String industry = jobinfoCacheModel.industry;

		if ((industry != null) && (industry.length() == 0)) {
			jobinfoCacheModel.industry = null;
		}

		jobinfoCacheModel.jobResource = getJobResource();

		String jobResource = jobinfoCacheModel.jobResource;

		if ((jobResource != null) && (jobResource.length() == 0)) {
			jobinfoCacheModel.jobResource = null;
		}

		jobinfoCacheModel.hiringManager = getHiringManager();

		String hiringManager = jobinfoCacheModel.hiringManager;

		if ((hiringManager != null) && (hiringManager.length() == 0)) {
			jobinfoCacheModel.hiringManager = null;
		}

		jobinfoCacheModel.clientName = getClientName();

		String clientName = jobinfoCacheModel.clientName;

		if ((clientName != null) && (clientName.length() == 0)) {
			jobinfoCacheModel.clientName = null;
		}

		jobinfoCacheModel.positions = getPositions();

		String positions = jobinfoCacheModel.positions;

		if ((positions != null) && (positions.length() == 0)) {
			jobinfoCacheModel.positions = null;
		}

		Date dateOpened = getDateOpened();

		if (dateOpened != null) {
			jobinfoCacheModel.dateOpened = dateOpened.getTime();
		}
		else {
			jobinfoCacheModel.dateOpened = Long.MIN_VALUE;
		}

		jobinfoCacheModel.jobType = getJobType();

		String jobType = jobinfoCacheModel.jobType;

		if ((jobType != null) && (jobType.length() == 0)) {
			jobinfoCacheModel.jobType = null;
		}

		jobinfoCacheModel.workExperience = getWorkExperience();

		String workExperience = jobinfoCacheModel.workExperience;

		if ((workExperience != null) && (workExperience.length() == 0)) {
			jobinfoCacheModel.workExperience = null;
		}

		jobinfoCacheModel.skillSet = getSkillSet();

		String skillSet = jobinfoCacheModel.skillSet;

		if ((skillSet != null) && (skillSet.length() == 0)) {
			jobinfoCacheModel.skillSet = null;
		}

		jobinfoCacheModel.projectStatus = getProjectStatus();

		String projectStatus = jobinfoCacheModel.projectStatus;

		if ((projectStatus != null) && (projectStatus.length() == 0)) {
			jobinfoCacheModel.projectStatus = null;
		}

		jobinfoCacheModel.summaryId = getSummaryId();

		jobinfoCacheModel.otherId = getOtherId();

		return jobinfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Jobinfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Jobinfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Jobinfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Jobinfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Jobinfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Jobinfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Jobinfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Jobinfo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Jobinfo>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _jobId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _postingTitle;
	private String _title;
	private String _assignedRecruiter;
	private Date _targetDate;
	private String _jobopeningStatus;
	private String _industry;
	private String _jobResource;
	private String _hiringManager;
	private String _clientName;
	private String _positions;
	private Date _dateOpened;
	private String _jobType;
	private String _workExperience;
	private String _skillSet;
	private String _projectStatus;
	private long _summaryId;
	private long _otherId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Jobinfo, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Jobinfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("jobId", _jobId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("postingTitle", _postingTitle);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("assignedRecruiter", _assignedRecruiter);
		_columnOriginalValues.put("targetDate", _targetDate);
		_columnOriginalValues.put("jobopeningStatus", _jobopeningStatus);
		_columnOriginalValues.put("industry", _industry);
		_columnOriginalValues.put("jobResource", _jobResource);
		_columnOriginalValues.put("hiringManager", _hiringManager);
		_columnOriginalValues.put("clientName", _clientName);
		_columnOriginalValues.put("positions", _positions);
		_columnOriginalValues.put("dateOpened", _dateOpened);
		_columnOriginalValues.put("jobType", _jobType);
		_columnOriginalValues.put("workExperience", _workExperience);
		_columnOriginalValues.put("skillSet", _skillSet);
		_columnOriginalValues.put("projectStatus", _projectStatus);
		_columnOriginalValues.put("summaryId", _summaryId);
		_columnOriginalValues.put("otherId", _otherId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("jobId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("postingTitle", 128L);

		columnBitmasks.put("title", 256L);

		columnBitmasks.put("assignedRecruiter", 512L);

		columnBitmasks.put("targetDate", 1024L);

		columnBitmasks.put("jobopeningStatus", 2048L);

		columnBitmasks.put("industry", 4096L);

		columnBitmasks.put("jobResource", 8192L);

		columnBitmasks.put("hiringManager", 16384L);

		columnBitmasks.put("clientName", 32768L);

		columnBitmasks.put("positions", 65536L);

		columnBitmasks.put("dateOpened", 131072L);

		columnBitmasks.put("jobType", 262144L);

		columnBitmasks.put("workExperience", 524288L);

		columnBitmasks.put("skillSet", 1048576L);

		columnBitmasks.put("projectStatus", 2097152L);

		columnBitmasks.put("summaryId", 4194304L);

		columnBitmasks.put("otherId", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Jobinfo _escapedModel;

}