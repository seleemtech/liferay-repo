/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.job.opening.service.model.impl;

import com.job.opening.service.model.Addressinfo;
import com.job.opening.service.model.AddressinfoModel;
import com.job.opening.service.model.AddressinfoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Addressinfo service. Represents a row in the &quot;rms_Addressinfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AddressinfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressinfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AddressinfoImpl
 * @generated
 */
@JSON(strict = true)
public class AddressinfoModelImpl
	extends BaseModelImpl<Addressinfo> implements AddressinfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a addressinfo model instance should use the <code>Addressinfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "rms_Addressinfo";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"addressId", Types.BIGINT},
		{"jobId", Types.BIGINT}, {"remote", Types.BOOLEAN},
		{"city", Types.VARCHAR}, {"country", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"postalCode", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("remote", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postalCode", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rms_Addressinfo (uuid_ VARCHAR(75) null,addressId LONG not null primary key,jobId LONG,remote BOOLEAN,city VARCHAR(75) null,country VARCHAR(75) null,state_ VARCHAR(75) null,postalCode LONG)";

	public static final String TABLE_SQL_DROP = "drop table rms_Addressinfo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY addressinfo.addressId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rms_Addressinfo.addressId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JOBID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDRESSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Addressinfo toModel(AddressinfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Addressinfo model = new AddressinfoImpl();

		model.setUuid(soapModel.getUuid());
		model.setAddressId(soapModel.getAddressId());
		model.setJobId(soapModel.getJobId());
		model.setRemote(soapModel.isRemote());
		model.setCity(soapModel.getCity());
		model.setCountry(soapModel.getCountry());
		model.setState(soapModel.getState());
		model.setPostalCode(soapModel.getPostalCode());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Addressinfo> toModels(AddressinfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Addressinfo> models = new ArrayList<Addressinfo>(
			soapModels.length);

		for (AddressinfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AddressinfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Addressinfo.class;
	}

	@Override
	public String getModelClassName() {
		return Addressinfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Addressinfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Addressinfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Addressinfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Addressinfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Addressinfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Addressinfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Addressinfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Addressinfo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Addressinfo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Addressinfo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Addressinfo.class.getClassLoader(), Addressinfo.class,
			ModelWrapper.class);

		try {
			Constructor<Addressinfo> constructor =
				(Constructor<Addressinfo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Addressinfo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Addressinfo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Addressinfo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Addressinfo, Object>>();
		Map<String, BiConsumer<Addressinfo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Addressinfo, ?>>();

		attributeGetterFunctions.put("uuid", Addressinfo::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Addressinfo, String>)Addressinfo::setUuid);
		attributeGetterFunctions.put("addressId", Addressinfo::getAddressId);
		attributeSetterBiConsumers.put(
			"addressId",
			(BiConsumer<Addressinfo, Long>)Addressinfo::setAddressId);
		attributeGetterFunctions.put("jobId", Addressinfo::getJobId);
		attributeSetterBiConsumers.put(
			"jobId", (BiConsumer<Addressinfo, Long>)Addressinfo::setJobId);
		attributeGetterFunctions.put("remote", Addressinfo::getRemote);
		attributeSetterBiConsumers.put(
			"remote", (BiConsumer<Addressinfo, Boolean>)Addressinfo::setRemote);
		attributeGetterFunctions.put("city", Addressinfo::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Addressinfo, String>)Addressinfo::setCity);
		attributeGetterFunctions.put("country", Addressinfo::getCountry);
		attributeSetterBiConsumers.put(
			"country",
			(BiConsumer<Addressinfo, String>)Addressinfo::setCountry);
		attributeGetterFunctions.put("state", Addressinfo::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Addressinfo, String>)Addressinfo::setState);
		attributeGetterFunctions.put("postalCode", Addressinfo::getPostalCode);
		attributeSetterBiConsumers.put(
			"postalCode",
			(BiConsumer<Addressinfo, Long>)Addressinfo::setPostalCode);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAddressId() {
		return _addressId;
	}

	@Override
	public void setAddressId(long addressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressId = addressId;
	}

	@JSON
	@Override
	public long getJobId() {
		return _jobId;
	}

	@Override
	public void setJobId(long jobId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobId = jobId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJobId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("jobId"));
	}

	@JSON
	@Override
	public boolean getRemote() {
		return _remote;
	}

	@JSON
	@Override
	public boolean isRemote() {
		return _remote;
	}

	@Override
	public void setRemote(boolean remote) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remote = remote;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_country = country;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public long getPostalCode() {
		return _postalCode;
	}

	@Override
	public void setPostalCode(long postalCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postalCode = postalCode;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Addressinfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Addressinfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Addressinfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddressinfoImpl addressinfoImpl = new AddressinfoImpl();

		addressinfoImpl.setUuid(getUuid());
		addressinfoImpl.setAddressId(getAddressId());
		addressinfoImpl.setJobId(getJobId());
		addressinfoImpl.setRemote(isRemote());
		addressinfoImpl.setCity(getCity());
		addressinfoImpl.setCountry(getCountry());
		addressinfoImpl.setState(getState());
		addressinfoImpl.setPostalCode(getPostalCode());

		addressinfoImpl.resetOriginalValues();

		return addressinfoImpl;
	}

	@Override
	public Addressinfo cloneWithOriginalValues() {
		AddressinfoImpl addressinfoImpl = new AddressinfoImpl();

		addressinfoImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		addressinfoImpl.setAddressId(
			this.<Long>getColumnOriginalValue("addressId"));
		addressinfoImpl.setJobId(this.<Long>getColumnOriginalValue("jobId"));
		addressinfoImpl.setRemote(
			this.<Boolean>getColumnOriginalValue("remote"));
		addressinfoImpl.setCity(this.<String>getColumnOriginalValue("city"));
		addressinfoImpl.setCountry(
			this.<String>getColumnOriginalValue("country"));
		addressinfoImpl.setState(this.<String>getColumnOriginalValue("state_"));
		addressinfoImpl.setPostalCode(
			this.<Long>getColumnOriginalValue("postalCode"));

		return addressinfoImpl;
	}

	@Override
	public int compareTo(Addressinfo addressinfo) {
		long primaryKey = addressinfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Addressinfo)) {
			return false;
		}

		Addressinfo addressinfo = (Addressinfo)object;

		long primaryKey = addressinfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Addressinfo> toCacheModel() {
		AddressinfoCacheModel addressinfoCacheModel =
			new AddressinfoCacheModel();

		addressinfoCacheModel.uuid = getUuid();

		String uuid = addressinfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			addressinfoCacheModel.uuid = null;
		}

		addressinfoCacheModel.addressId = getAddressId();

		addressinfoCacheModel.jobId = getJobId();

		addressinfoCacheModel.remote = isRemote();

		addressinfoCacheModel.city = getCity();

		String city = addressinfoCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			addressinfoCacheModel.city = null;
		}

		addressinfoCacheModel.country = getCountry();

		String country = addressinfoCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			addressinfoCacheModel.country = null;
		}

		addressinfoCacheModel.state = getState();

		String state = addressinfoCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			addressinfoCacheModel.state = null;
		}

		addressinfoCacheModel.postalCode = getPostalCode();

		return addressinfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Addressinfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Addressinfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Addressinfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Addressinfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Addressinfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Addressinfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Addressinfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Addressinfo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Addressinfo>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _addressId;
	private long _jobId;
	private boolean _remote;
	private String _city;
	private String _country;
	private String _state;
	private long _postalCode;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Addressinfo, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Addressinfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("addressId", _addressId);
		_columnOriginalValues.put("jobId", _jobId);
		_columnOriginalValues.put("remote", _remote);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("country", _country);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("postalCode", _postalCode);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("addressId", 2L);

		columnBitmasks.put("jobId", 4L);

		columnBitmasks.put("remote", 8L);

		columnBitmasks.put("city", 16L);

		columnBitmasks.put("country", 32L);

		columnBitmasks.put("state_", 64L);

		columnBitmasks.put("postalCode", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Addressinfo _escapedModel;

}