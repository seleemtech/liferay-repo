/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.job.opening.service.model.impl;

import com.job.opening.service.model.Descriptiveinfo;
import com.job.opening.service.model.DescriptiveinfoModel;
import com.job.opening.service.model.DescriptiveinfoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Descriptiveinfo service. Represents a row in the &quot;rms_Descriptiveinfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DescriptiveinfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DescriptiveinfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DescriptiveinfoImpl
 * @generated
 */
@JSON(strict = true)
public class DescriptiveinfoModelImpl
	extends BaseModelImpl<Descriptiveinfo> implements DescriptiveinfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a descriptiveinfo model instance should use the <code>Descriptiveinfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "rms_Descriptiveinfo";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"descriptiveId", Types.BIGINT},
		{"jobId", Types.BIGINT}, {"jobDescription", Types.VARCHAR},
		{"requirements", Types.VARCHAR}, {"benefits", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descriptiveId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requirements", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("benefits", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rms_Descriptiveinfo (uuid_ VARCHAR(75) null,descriptiveId LONG not null primary key,jobId LONG,jobDescription VARCHAR(75) null,requirements VARCHAR(75) null,benefits VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table rms_Descriptiveinfo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY descriptiveinfo.descriptiveId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rms_Descriptiveinfo.descriptiveId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JOBID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DESCRIPTIVEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Descriptiveinfo toModel(DescriptiveinfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Descriptiveinfo model = new DescriptiveinfoImpl();

		model.setUuid(soapModel.getUuid());
		model.setDescriptiveId(soapModel.getDescriptiveId());
		model.setJobId(soapModel.getJobId());
		model.setJobDescription(soapModel.getJobDescription());
		model.setRequirements(soapModel.getRequirements());
		model.setBenefits(soapModel.getBenefits());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Descriptiveinfo> toModels(
		DescriptiveinfoSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<Descriptiveinfo> models = new ArrayList<Descriptiveinfo>(
			soapModels.length);

		for (DescriptiveinfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DescriptiveinfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _descriptiveId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDescriptiveId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _descriptiveId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Descriptiveinfo.class;
	}

	@Override
	public String getModelClassName() {
		return Descriptiveinfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Descriptiveinfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Descriptiveinfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Descriptiveinfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Descriptiveinfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Descriptiveinfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Descriptiveinfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Descriptiveinfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Descriptiveinfo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Descriptiveinfo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Descriptiveinfo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Descriptiveinfo.class.getClassLoader(), Descriptiveinfo.class,
			ModelWrapper.class);

		try {
			Constructor<Descriptiveinfo> constructor =
				(Constructor<Descriptiveinfo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Descriptiveinfo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Descriptiveinfo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Descriptiveinfo, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<Descriptiveinfo, Object>>();
		Map<String, BiConsumer<Descriptiveinfo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Descriptiveinfo, ?>>();

		attributeGetterFunctions.put("uuid", Descriptiveinfo::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<Descriptiveinfo, String>)Descriptiveinfo::setUuid);
		attributeGetterFunctions.put(
			"descriptiveId", Descriptiveinfo::getDescriptiveId);
		attributeSetterBiConsumers.put(
			"descriptiveId",
			(BiConsumer<Descriptiveinfo, Long>)
				Descriptiveinfo::setDescriptiveId);
		attributeGetterFunctions.put("jobId", Descriptiveinfo::getJobId);
		attributeSetterBiConsumers.put(
			"jobId",
			(BiConsumer<Descriptiveinfo, Long>)Descriptiveinfo::setJobId);
		attributeGetterFunctions.put(
			"jobDescription", Descriptiveinfo::getJobDescription);
		attributeSetterBiConsumers.put(
			"jobDescription",
			(BiConsumer<Descriptiveinfo, String>)
				Descriptiveinfo::setJobDescription);
		attributeGetterFunctions.put(
			"requirements", Descriptiveinfo::getRequirements);
		attributeSetterBiConsumers.put(
			"requirements",
			(BiConsumer<Descriptiveinfo, String>)
				Descriptiveinfo::setRequirements);
		attributeGetterFunctions.put("benefits", Descriptiveinfo::getBenefits);
		attributeSetterBiConsumers.put(
			"benefits",
			(BiConsumer<Descriptiveinfo, String>)Descriptiveinfo::setBenefits);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getDescriptiveId() {
		return _descriptiveId;
	}

	@Override
	public void setDescriptiveId(long descriptiveId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_descriptiveId = descriptiveId;
	}

	@JSON
	@Override
	public long getJobId() {
		return _jobId;
	}

	@Override
	public void setJobId(long jobId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobId = jobId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJobId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("jobId"));
	}

	@JSON
	@Override
	public String getJobDescription() {
		if (_jobDescription == null) {
			return "";
		}
		else {
			return _jobDescription;
		}
	}

	@Override
	public void setJobDescription(String jobDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobDescription = jobDescription;
	}

	@JSON
	@Override
	public String getRequirements() {
		if (_requirements == null) {
			return "";
		}
		else {
			return _requirements;
		}
	}

	@Override
	public void setRequirements(String requirements) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requirements = requirements;
	}

	@JSON
	@Override
	public String getBenefits() {
		if (_benefits == null) {
			return "";
		}
		else {
			return _benefits;
		}
	}

	@Override
	public void setBenefits(String benefits) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_benefits = benefits;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Descriptiveinfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Descriptiveinfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Descriptiveinfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DescriptiveinfoImpl descriptiveinfoImpl = new DescriptiveinfoImpl();

		descriptiveinfoImpl.setUuid(getUuid());
		descriptiveinfoImpl.setDescriptiveId(getDescriptiveId());
		descriptiveinfoImpl.setJobId(getJobId());
		descriptiveinfoImpl.setJobDescription(getJobDescription());
		descriptiveinfoImpl.setRequirements(getRequirements());
		descriptiveinfoImpl.setBenefits(getBenefits());

		descriptiveinfoImpl.resetOriginalValues();

		return descriptiveinfoImpl;
	}

	@Override
	public Descriptiveinfo cloneWithOriginalValues() {
		DescriptiveinfoImpl descriptiveinfoImpl = new DescriptiveinfoImpl();

		descriptiveinfoImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		descriptiveinfoImpl.setDescriptiveId(
			this.<Long>getColumnOriginalValue("descriptiveId"));
		descriptiveinfoImpl.setJobId(
			this.<Long>getColumnOriginalValue("jobId"));
		descriptiveinfoImpl.setJobDescription(
			this.<String>getColumnOriginalValue("jobDescription"));
		descriptiveinfoImpl.setRequirements(
			this.<String>getColumnOriginalValue("requirements"));
		descriptiveinfoImpl.setBenefits(
			this.<String>getColumnOriginalValue("benefits"));

		return descriptiveinfoImpl;
	}

	@Override
	public int compareTo(Descriptiveinfo descriptiveinfo) {
		long primaryKey = descriptiveinfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Descriptiveinfo)) {
			return false;
		}

		Descriptiveinfo descriptiveinfo = (Descriptiveinfo)object;

		long primaryKey = descriptiveinfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Descriptiveinfo> toCacheModel() {
		DescriptiveinfoCacheModel descriptiveinfoCacheModel =
			new DescriptiveinfoCacheModel();

		descriptiveinfoCacheModel.uuid = getUuid();

		String uuid = descriptiveinfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			descriptiveinfoCacheModel.uuid = null;
		}

		descriptiveinfoCacheModel.descriptiveId = getDescriptiveId();

		descriptiveinfoCacheModel.jobId = getJobId();

		descriptiveinfoCacheModel.jobDescription = getJobDescription();

		String jobDescription = descriptiveinfoCacheModel.jobDescription;

		if ((jobDescription != null) && (jobDescription.length() == 0)) {
			descriptiveinfoCacheModel.jobDescription = null;
		}

		descriptiveinfoCacheModel.requirements = getRequirements();

		String requirements = descriptiveinfoCacheModel.requirements;

		if ((requirements != null) && (requirements.length() == 0)) {
			descriptiveinfoCacheModel.requirements = null;
		}

		descriptiveinfoCacheModel.benefits = getBenefits();

		String benefits = descriptiveinfoCacheModel.benefits;

		if ((benefits != null) && (benefits.length() == 0)) {
			descriptiveinfoCacheModel.benefits = null;
		}

		return descriptiveinfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Descriptiveinfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Descriptiveinfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Descriptiveinfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Descriptiveinfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Descriptiveinfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Descriptiveinfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Descriptiveinfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Descriptiveinfo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Descriptiveinfo>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _descriptiveId;
	private long _jobId;
	private String _jobDescription;
	private String _requirements;
	private String _benefits;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Descriptiveinfo, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Descriptiveinfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("descriptiveId", _descriptiveId);
		_columnOriginalValues.put("jobId", _jobId);
		_columnOriginalValues.put("jobDescription", _jobDescription);
		_columnOriginalValues.put("requirements", _requirements);
		_columnOriginalValues.put("benefits", _benefits);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("descriptiveId", 2L);

		columnBitmasks.put("jobId", 4L);

		columnBitmasks.put("jobDescription", 8L);

		columnBitmasks.put("requirements", 16L);

		columnBitmasks.put("benefits", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Descriptiveinfo _escapedModel;

}