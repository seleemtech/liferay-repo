/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rigistration.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.rigistration.service.model.Register;
import com.rigistration.service.model.RegisterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Register service. Represents a row in the &quot;RG_Register&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RegisterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegisterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RegisterImpl
 * @generated
 */
@JSON(strict = true)
public class RegisterModelImpl
	extends BaseModelImpl<Register> implements RegisterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a register model instance should use the <code>Register</code> interface instead.
	 */
	public static final String TABLE_NAME = "RG_Register";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"registerId", Types.BIGINT},
		{"firstName", Types.VARCHAR}, {"phone", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"password_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table RG_Register (uuid_ VARCHAR(75) null,registerId LONG not null primary key,firstName VARCHAR(75) null,phone LONG,userName VARCHAR(75) null,password_ VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table RG_Register";

	public static final String ORDER_BY_JPQL =
		" ORDER BY register.registerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY RG_Register.registerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REGISTERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RegisterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _registerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRegisterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _registerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Register.class;
	}

	@Override
	public String getModelClassName() {
		return Register.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Register, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Register, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Register, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Register)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Register, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Register, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Register)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Register, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Register, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Register, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Register, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Register, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Register, Object>>();
		Map<String, BiConsumer<Register, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Register, ?>>();

		attributeGetterFunctions.put("uuid", Register::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Register, String>)Register::setUuid);
		attributeGetterFunctions.put("registerId", Register::getRegisterId);
		attributeSetterBiConsumers.put(
			"registerId", (BiConsumer<Register, Long>)Register::setRegisterId);
		attributeGetterFunctions.put("firstName", Register::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName", (BiConsumer<Register, String>)Register::setFirstName);
		attributeGetterFunctions.put("phone", Register::getPhone);
		attributeSetterBiConsumers.put(
			"phone", (BiConsumer<Register, Long>)Register::setPhone);
		attributeGetterFunctions.put("userName", Register::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Register, String>)Register::setUserName);
		attributeGetterFunctions.put("password", Register::getPassword);
		attributeSetterBiConsumers.put(
			"password", (BiConsumer<Register, String>)Register::setPassword);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRegisterId() {
		return _registerId;
	}

	@Override
	public void setRegisterId(long registerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_registerId = registerId;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public long getPhone() {
		return _phone;
	}

	@Override
	public void setPhone(long phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phone = phone;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password = password;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Register.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Register toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Register>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegisterImpl registerImpl = new RegisterImpl();

		registerImpl.setUuid(getUuid());
		registerImpl.setRegisterId(getRegisterId());
		registerImpl.setFirstName(getFirstName());
		registerImpl.setPhone(getPhone());
		registerImpl.setUserName(getUserName());
		registerImpl.setPassword(getPassword());

		registerImpl.resetOriginalValues();

		return registerImpl;
	}

	@Override
	public Register cloneWithOriginalValues() {
		RegisterImpl registerImpl = new RegisterImpl();

		registerImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		registerImpl.setRegisterId(
			this.<Long>getColumnOriginalValue("registerId"));
		registerImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		registerImpl.setPhone(this.<Long>getColumnOriginalValue("phone"));
		registerImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		registerImpl.setPassword(
			this.<String>getColumnOriginalValue("password_"));

		return registerImpl;
	}

	@Override
	public int compareTo(Register register) {
		long primaryKey = register.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Register)) {
			return false;
		}

		Register register = (Register)object;

		long primaryKey = register.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Register> toCacheModel() {
		RegisterCacheModel registerCacheModel = new RegisterCacheModel();

		registerCacheModel.uuid = getUuid();

		String uuid = registerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			registerCacheModel.uuid = null;
		}

		registerCacheModel.registerId = getRegisterId();

		registerCacheModel.firstName = getFirstName();

		String firstName = registerCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			registerCacheModel.firstName = null;
		}

		registerCacheModel.phone = getPhone();

		registerCacheModel.userName = getUserName();

		String userName = registerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			registerCacheModel.userName = null;
		}

		registerCacheModel.password = getPassword();

		String password = registerCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			registerCacheModel.password = null;
		}

		return registerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Register, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Register, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Register, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Register)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Register, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Register, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Register, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Register)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Register>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Register.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _registerId;
	private String _firstName;
	private long _phone;
	private String _userName;
	private String _password;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Register, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Register)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("registerId", _registerId);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("phone", _phone);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("password_", _password);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("password_", "password");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("registerId", 2L);

		columnBitmasks.put("firstName", 4L);

		columnBitmasks.put("phone", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("password_", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Register _escapedModel;

}