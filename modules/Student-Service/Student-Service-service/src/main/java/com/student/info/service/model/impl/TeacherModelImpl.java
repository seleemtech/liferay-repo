/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.student.info.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.student.info.service.model.Teacher;
import com.student.info.service.model.TeacherModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Teacher service. Represents a row in the &quot;ST_Teacher&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TeacherModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeacherImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TeacherImpl
 * @generated
 */
@JSON(strict = true)
public class TeacherModelImpl
	extends BaseModelImpl<Teacher> implements TeacherModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a teacher model instance should use the <code>Teacher</code> interface instead.
	 */
	public static final String TABLE_NAME = "ST_Teacher";

	public static final Object[][] TABLE_COLUMNS = {
		{"teacherId", Types.BIGINT}, {"teacherName", Types.VARCHAR},
		{"teacherEmail", Types.VARCHAR}, {"subject", Types.VARCHAR},
		{"companyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("teacherId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("teacherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("teacherEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ST_Teacher (teacherId LONG not null primary key,teacherName VARCHAR(75) null,teacherEmail VARCHAR(75) null,subject VARCHAR(75) null,companyId LONG)";

	public static final String TABLE_SQL_DROP = "drop table ST_Teacher";

	public static final String ORDER_BY_JPQL =
		" ORDER BY teacher.teacherId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ST_Teacher.teacherId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TEACHERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public static final String MAPPING_TABLE_ST_STUDENTS_TEACHERS_NAME =
		"ST_Students_Teachers";

	public static final Object[][] MAPPING_TABLE_ST_STUDENTS_TEACHERS_COLUMNS =
		{
			{"companyId", Types.BIGINT}, {"studentId", Types.BIGINT},
			{"teacherId", Types.BIGINT}
		};

	public static final String MAPPING_TABLE_ST_STUDENTS_TEACHERS_SQL_CREATE =
		"create table ST_Students_Teachers (companyId LONG not null,studentId LONG not null,teacherId LONG not null,primary key (studentId, teacherId))";

	public static final String MAPPING_TABLE_ST_COURSES_TEACHERS_NAME =
		"ST_Courses_Teachers";

	public static final Object[][] MAPPING_TABLE_ST_COURSES_TEACHERS_COLUMNS = {
		{"companyId", Types.BIGINT}, {"courseId", Types.BIGINT},
		{"teacherId", Types.BIGINT}
	};

	public static final String MAPPING_TABLE_ST_COURSES_TEACHERS_SQL_CREATE =
		"create table ST_Courses_Teachers (companyId LONG not null,courseId LONG not null,teacherId LONG not null,primary key (courseId, teacherId))";

	public TeacherModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _teacherId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTeacherId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _teacherId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Teacher.class;
	}

	@Override
	public String getModelClassName() {
		return Teacher.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Teacher, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Teacher, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Teacher, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Teacher)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Teacher, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Teacher, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Teacher)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Teacher, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Teacher, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Teacher, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Teacher, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Teacher, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Teacher, Object>>();
		Map<String, BiConsumer<Teacher, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Teacher, ?>>();

		attributeGetterFunctions.put("teacherId", Teacher::getTeacherId);
		attributeSetterBiConsumers.put(
			"teacherId", (BiConsumer<Teacher, Long>)Teacher::setTeacherId);
		attributeGetterFunctions.put("teacherName", Teacher::getTeacherName);
		attributeSetterBiConsumers.put(
			"teacherName",
			(BiConsumer<Teacher, String>)Teacher::setTeacherName);
		attributeGetterFunctions.put("teacherEmail", Teacher::getTeacherEmail);
		attributeSetterBiConsumers.put(
			"teacherEmail",
			(BiConsumer<Teacher, String>)Teacher::setTeacherEmail);
		attributeGetterFunctions.put("subject", Teacher::getSubject);
		attributeSetterBiConsumers.put(
			"subject", (BiConsumer<Teacher, String>)Teacher::setSubject);
		attributeGetterFunctions.put("companyId", Teacher::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Teacher, Long>)Teacher::setCompanyId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getTeacherId() {
		return _teacherId;
	}

	@Override
	public void setTeacherId(long teacherId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_teacherId = teacherId;
	}

	@JSON
	@Override
	public String getTeacherName() {
		if (_teacherName == null) {
			return "";
		}
		else {
			return _teacherName;
		}
	}

	@Override
	public void setTeacherName(String teacherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_teacherName = teacherName;
	}

	@JSON
	@Override
	public String getTeacherEmail() {
		if (_teacherEmail == null) {
			return "";
		}
		else {
			return _teacherEmail;
		}
	}

	@Override
	public void setTeacherEmail(String teacherEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_teacherEmail = teacherEmail;
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return "";
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subject = subject;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Teacher.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Teacher toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Teacher>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TeacherImpl teacherImpl = new TeacherImpl();

		teacherImpl.setTeacherId(getTeacherId());
		teacherImpl.setTeacherName(getTeacherName());
		teacherImpl.setTeacherEmail(getTeacherEmail());
		teacherImpl.setSubject(getSubject());
		teacherImpl.setCompanyId(getCompanyId());

		teacherImpl.resetOriginalValues();

		return teacherImpl;
	}

	@Override
	public Teacher cloneWithOriginalValues() {
		TeacherImpl teacherImpl = new TeacherImpl();

		teacherImpl.setTeacherId(
			this.<Long>getColumnOriginalValue("teacherId"));
		teacherImpl.setTeacherName(
			this.<String>getColumnOriginalValue("teacherName"));
		teacherImpl.setTeacherEmail(
			this.<String>getColumnOriginalValue("teacherEmail"));
		teacherImpl.setSubject(this.<String>getColumnOriginalValue("subject"));
		teacherImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));

		return teacherImpl;
	}

	@Override
	public int compareTo(Teacher teacher) {
		long primaryKey = teacher.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Teacher)) {
			return false;
		}

		Teacher teacher = (Teacher)object;

		long primaryKey = teacher.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Teacher> toCacheModel() {
		TeacherCacheModel teacherCacheModel = new TeacherCacheModel();

		teacherCacheModel.teacherId = getTeacherId();

		teacherCacheModel.teacherName = getTeacherName();

		String teacherName = teacherCacheModel.teacherName;

		if ((teacherName != null) && (teacherName.length() == 0)) {
			teacherCacheModel.teacherName = null;
		}

		teacherCacheModel.teacherEmail = getTeacherEmail();

		String teacherEmail = teacherCacheModel.teacherEmail;

		if ((teacherEmail != null) && (teacherEmail.length() == 0)) {
			teacherCacheModel.teacherEmail = null;
		}

		teacherCacheModel.subject = getSubject();

		String subject = teacherCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			teacherCacheModel.subject = null;
		}

		teacherCacheModel.companyId = getCompanyId();

		return teacherCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Teacher, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Teacher, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Teacher, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Teacher)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Teacher>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Teacher.class, ModelWrapper.class);

	}

	private long _teacherId;
	private String _teacherName;
	private String _teacherEmail;
	private String _subject;
	private long _companyId;

	public <T> T getColumnValue(String columnName) {
		Function<Teacher, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Teacher)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("teacherId", _teacherId);
		_columnOriginalValues.put("teacherName", _teacherName);
		_columnOriginalValues.put("teacherEmail", _teacherEmail);
		_columnOriginalValues.put("subject", _subject);
		_columnOriginalValues.put("companyId", _companyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("teacherId", 1L);

		columnBitmasks.put("teacherName", 2L);

		columnBitmasks.put("teacherEmail", 4L);

		columnBitmasks.put("subject", 8L);

		columnBitmasks.put("companyId", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Teacher _escapedModel;

}