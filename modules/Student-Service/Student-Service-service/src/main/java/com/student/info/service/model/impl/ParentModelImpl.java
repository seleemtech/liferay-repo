/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.student.info.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.student.info.service.model.Parent;
import com.student.info.service.model.ParentModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Parent service. Represents a row in the &quot;ST_Parent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ParentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ParentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ParentImpl
 * @generated
 */
@JSON(strict = true)
public class ParentModelImpl
	extends BaseModelImpl<Parent> implements ParentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a parent model instance should use the <code>Parent</code> interface instead.
	 */
	public static final String TABLE_NAME = "ST_Parent";

	public static final Object[][] TABLE_COLUMNS = {
		{"parentId", Types.BIGINT}, {"parentName", Types.VARCHAR},
		{"parentContact", Types.BIGINT}, {"companyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("parentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parentContact", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ST_Parent (parentId LONG not null primary key,parentName VARCHAR(75) null,parentContact LONG,companyId LONG)";

	public static final String TABLE_SQL_DROP = "drop table ST_Parent";

	public static final String ORDER_BY_JPQL = " ORDER BY parent.parentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ST_Parent.parentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PARENTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public static final String MAPPING_TABLE_ST_STUDENTS_PARENTS_NAME =
		"ST_Students_Parents";

	public static final Object[][] MAPPING_TABLE_ST_STUDENTS_PARENTS_COLUMNS = {
		{"companyId", Types.BIGINT}, {"parentId", Types.BIGINT},
		{"studentId", Types.BIGINT}
	};

	public static final String MAPPING_TABLE_ST_STUDENTS_PARENTS_SQL_CREATE =
		"create table ST_Students_Parents (companyId LONG not null,parentId LONG not null,studentId LONG not null,primary key (parentId, studentId))";

	public ParentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _parentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setParentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _parentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Parent.class;
	}

	@Override
	public String getModelClassName() {
		return Parent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Parent, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Parent, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parent, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Parent)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Parent, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Parent, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Parent)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Parent, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Parent, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Parent, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Parent, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Parent, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Parent, Object>>();
		Map<String, BiConsumer<Parent, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Parent, ?>>();

		attributeGetterFunctions.put("parentId", Parent::getParentId);
		attributeSetterBiConsumers.put(
			"parentId", (BiConsumer<Parent, Long>)Parent::setParentId);
		attributeGetterFunctions.put("parentName", Parent::getParentName);
		attributeSetterBiConsumers.put(
			"parentName", (BiConsumer<Parent, String>)Parent::setParentName);
		attributeGetterFunctions.put("parentContact", Parent::getParentContact);
		attributeSetterBiConsumers.put(
			"parentContact",
			(BiConsumer<Parent, Long>)Parent::setParentContact);
		attributeGetterFunctions.put("companyId", Parent::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Parent, Long>)Parent::setCompanyId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentId = parentId;
	}

	@JSON
	@Override
	public String getParentName() {
		if (_parentName == null) {
			return "";
		}
		else {
			return _parentName;
		}
	}

	@Override
	public void setParentName(String parentName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentName = parentName;
	}

	@JSON
	@Override
	public long getParentContact() {
		return _parentContact;
	}

	@Override
	public void setParentContact(long parentContact) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentContact = parentContact;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Parent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Parent toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Parent>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ParentImpl parentImpl = new ParentImpl();

		parentImpl.setParentId(getParentId());
		parentImpl.setParentName(getParentName());
		parentImpl.setParentContact(getParentContact());
		parentImpl.setCompanyId(getCompanyId());

		parentImpl.resetOriginalValues();

		return parentImpl;
	}

	@Override
	public Parent cloneWithOriginalValues() {
		ParentImpl parentImpl = new ParentImpl();

		parentImpl.setParentId(this.<Long>getColumnOriginalValue("parentId"));
		parentImpl.setParentName(
			this.<String>getColumnOriginalValue("parentName"));
		parentImpl.setParentContact(
			this.<Long>getColumnOriginalValue("parentContact"));
		parentImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));

		return parentImpl;
	}

	@Override
	public int compareTo(Parent parent) {
		long primaryKey = parent.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Parent)) {
			return false;
		}

		Parent parent = (Parent)object;

		long primaryKey = parent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Parent> toCacheModel() {
		ParentCacheModel parentCacheModel = new ParentCacheModel();

		parentCacheModel.parentId = getParentId();

		parentCacheModel.parentName = getParentName();

		String parentName = parentCacheModel.parentName;

		if ((parentName != null) && (parentName.length() == 0)) {
			parentCacheModel.parentName = null;
		}

		parentCacheModel.parentContact = getParentContact();

		parentCacheModel.companyId = getCompanyId();

		return parentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Parent, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Parent, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parent, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Parent)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Parent>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Parent.class, ModelWrapper.class);

	}

	private long _parentId;
	private String _parentName;
	private long _parentContact;
	private long _companyId;

	public <T> T getColumnValue(String columnName) {
		Function<Parent, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Parent)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("parentId", _parentId);
		_columnOriginalValues.put("parentName", _parentName);
		_columnOriginalValues.put("parentContact", _parentContact);
		_columnOriginalValues.put("companyId", _companyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("parentId", 1L);

		columnBitmasks.put("parentName", 2L);

		columnBitmasks.put("parentContact", 4L);

		columnBitmasks.put("companyId", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Parent _escapedModel;

}