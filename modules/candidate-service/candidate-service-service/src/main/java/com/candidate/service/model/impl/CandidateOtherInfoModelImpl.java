/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.candidate.service.model.impl;

import com.candidate.service.model.CandidateOtherInfo;
import com.candidate.service.model.CandidateOtherInfoModel;
import com.candidate.service.model.CandidateOtherInfoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CandidateOtherInfo service. Represents a row in the &quot;RMS_CandidateOtherInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CandidateOtherInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateOtherInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CandidateOtherInfoImpl
 * @generated
 */
@JSON(strict = true)
public class CandidateOtherInfoModelImpl
	extends BaseModelImpl<CandidateOtherInfo>
	implements CandidateOtherInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidate other info model instance should use the <code>CandidateOtherInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "RMS_CandidateOtherInfo";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"candidateOtherInfoId", Types.BIGINT},
		{"candidateId", Types.BIGINT}, {"candidateStatus", Types.VARCHAR},
		{"candidateStage", Types.VARCHAR}, {"source", Types.VARCHAR},
		{"candidateOwner", Types.VARCHAR}, {"institute", Types.VARCHAR},
		{"department", Types.VARCHAR}, {"degree", Types.VARCHAR},
		{"fromDuration", Types.VARCHAR}, {"toDuration", Types.VARCHAR},
		{"occupation", Types.VARCHAR}, {"company", Types.VARCHAR},
		{"summary", Types.VARCHAR}, {"fromWorkDuration", Types.VARCHAR},
		{"toWorkDuration", Types.VARCHAR}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"folderId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("candidateOtherInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("candidateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("candidateStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("candidateStage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("candidateOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("institute", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("department", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("degree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromDuration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toDuration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occupation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("company", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromWorkDuration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toWorkDuration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table RMS_CandidateOtherInfo (uuid_ VARCHAR(75) null,candidateOtherInfoId LONG not null primary key,candidateId LONG,candidateStatus VARCHAR(75) null,candidateStage VARCHAR(75) null,source VARCHAR(75) null,candidateOwner VARCHAR(75) null,institute VARCHAR(75) null,department VARCHAR(75) null,degree VARCHAR(75) null,fromDuration VARCHAR(75) null,toDuration VARCHAR(75) null,occupation VARCHAR(75) null,company VARCHAR(75) null,summary VARCHAR(75) null,fromWorkDuration VARCHAR(75) null,toWorkDuration VARCHAR(75) null,companyId LONG,userId LONG,folderId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table RMS_CandidateOtherInfo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY candidateOtherInfo.candidateOtherInfoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY RMS_CandidateOtherInfo.candidateOtherInfoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANDIDATEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANDIDATESTAGE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANDIDATESTATUS_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANDIDATEOTHERINFOID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static CandidateOtherInfo toModel(CandidateOtherInfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CandidateOtherInfo model = new CandidateOtherInfoImpl();

		model.setUuid(soapModel.getUuid());
		model.setCandidateOtherInfoId(soapModel.getCandidateOtherInfoId());
		model.setCandidateId(soapModel.getCandidateId());
		model.setCandidateStatus(soapModel.getCandidateStatus());
		model.setCandidateStage(soapModel.getCandidateStage());
		model.setSource(soapModel.getSource());
		model.setCandidateOwner(soapModel.getCandidateOwner());
		model.setInstitute(soapModel.getInstitute());
		model.setDepartment(soapModel.getDepartment());
		model.setDegree(soapModel.getDegree());
		model.setFromDuration(soapModel.getFromDuration());
		model.setToDuration(soapModel.getToDuration());
		model.setOccupation(soapModel.getOccupation());
		model.setCompany(soapModel.getCompany());
		model.setSummary(soapModel.getSummary());
		model.setFromWorkDuration(soapModel.getFromWorkDuration());
		model.setToWorkDuration(soapModel.getToWorkDuration());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setFolderId(soapModel.getFolderId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<CandidateOtherInfo> toModels(
		CandidateOtherInfoSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<CandidateOtherInfo> models = new ArrayList<CandidateOtherInfo>(
			soapModels.length);

		for (CandidateOtherInfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CandidateOtherInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _candidateOtherInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCandidateOtherInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _candidateOtherInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CandidateOtherInfo.class;
	}

	@Override
	public String getModelClassName() {
		return CandidateOtherInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CandidateOtherInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CandidateOtherInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CandidateOtherInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CandidateOtherInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CandidateOtherInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CandidateOtherInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CandidateOtherInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CandidateOtherInfo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CandidateOtherInfo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CandidateOtherInfo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CandidateOtherInfo.class.getClassLoader(), CandidateOtherInfo.class,
			ModelWrapper.class);

		try {
			Constructor<CandidateOtherInfo> constructor =
				(Constructor<CandidateOtherInfo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CandidateOtherInfo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CandidateOtherInfo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CandidateOtherInfo, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CandidateOtherInfo, Object>>();
		Map<String, BiConsumer<CandidateOtherInfo, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<CandidateOtherInfo, ?>>();

		attributeGetterFunctions.put("uuid", CandidateOtherInfo::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setUuid);
		attributeGetterFunctions.put(
			"candidateOtherInfoId",
			CandidateOtherInfo::getCandidateOtherInfoId);
		attributeSetterBiConsumers.put(
			"candidateOtherInfoId",
			(BiConsumer<CandidateOtherInfo, Long>)
				CandidateOtherInfo::setCandidateOtherInfoId);
		attributeGetterFunctions.put(
			"candidateId", CandidateOtherInfo::getCandidateId);
		attributeSetterBiConsumers.put(
			"candidateId",
			(BiConsumer<CandidateOtherInfo, Long>)
				CandidateOtherInfo::setCandidateId);
		attributeGetterFunctions.put(
			"candidateStatus", CandidateOtherInfo::getCandidateStatus);
		attributeSetterBiConsumers.put(
			"candidateStatus",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setCandidateStatus);
		attributeGetterFunctions.put(
			"candidateStage", CandidateOtherInfo::getCandidateStage);
		attributeSetterBiConsumers.put(
			"candidateStage",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setCandidateStage);
		attributeGetterFunctions.put("source", CandidateOtherInfo::getSource);
		attributeSetterBiConsumers.put(
			"source",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setSource);
		attributeGetterFunctions.put(
			"candidateOwner", CandidateOtherInfo::getCandidateOwner);
		attributeSetterBiConsumers.put(
			"candidateOwner",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setCandidateOwner);
		attributeGetterFunctions.put(
			"institute", CandidateOtherInfo::getInstitute);
		attributeSetterBiConsumers.put(
			"institute",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setInstitute);
		attributeGetterFunctions.put(
			"department", CandidateOtherInfo::getDepartment);
		attributeSetterBiConsumers.put(
			"department",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setDepartment);
		attributeGetterFunctions.put("degree", CandidateOtherInfo::getDegree);
		attributeSetterBiConsumers.put(
			"degree",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setDegree);
		attributeGetterFunctions.put(
			"fromDuration", CandidateOtherInfo::getFromDuration);
		attributeSetterBiConsumers.put(
			"fromDuration",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setFromDuration);
		attributeGetterFunctions.put(
			"toDuration", CandidateOtherInfo::getToDuration);
		attributeSetterBiConsumers.put(
			"toDuration",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setToDuration);
		attributeGetterFunctions.put(
			"occupation", CandidateOtherInfo::getOccupation);
		attributeSetterBiConsumers.put(
			"occupation",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setOccupation);
		attributeGetterFunctions.put("company", CandidateOtherInfo::getCompany);
		attributeSetterBiConsumers.put(
			"company",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setCompany);
		attributeGetterFunctions.put("summary", CandidateOtherInfo::getSummary);
		attributeSetterBiConsumers.put(
			"summary",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setSummary);
		attributeGetterFunctions.put(
			"fromWorkDuration", CandidateOtherInfo::getFromWorkDuration);
		attributeSetterBiConsumers.put(
			"fromWorkDuration",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setFromWorkDuration);
		attributeGetterFunctions.put(
			"toWorkDuration", CandidateOtherInfo::getToWorkDuration);
		attributeSetterBiConsumers.put(
			"toWorkDuration",
			(BiConsumer<CandidateOtherInfo, String>)
				CandidateOtherInfo::setToWorkDuration);
		attributeGetterFunctions.put(
			"companyId", CandidateOtherInfo::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CandidateOtherInfo, Long>)
				CandidateOtherInfo::setCompanyId);
		attributeGetterFunctions.put("userId", CandidateOtherInfo::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CandidateOtherInfo, Long>)
				CandidateOtherInfo::setUserId);
		attributeGetterFunctions.put(
			"folderId", CandidateOtherInfo::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId",
			(BiConsumer<CandidateOtherInfo, Long>)
				CandidateOtherInfo::setFolderId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCandidateOtherInfoId() {
		return _candidateOtherInfoId;
	}

	@Override
	public void setCandidateOtherInfoId(long candidateOtherInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_candidateOtherInfoId = candidateOtherInfoId;
	}

	@JSON
	@Override
	public long getCandidateId() {
		return _candidateId;
	}

	@Override
	public void setCandidateId(long candidateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_candidateId = candidateId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCandidateId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("candidateId"));
	}

	@JSON
	@Override
	public String getCandidateStatus() {
		if (_candidateStatus == null) {
			return "";
		}
		else {
			return _candidateStatus;
		}
	}

	@Override
	public void setCandidateStatus(String candidateStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_candidateStatus = candidateStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCandidateStatus() {
		return getColumnOriginalValue("candidateStatus");
	}

	@JSON
	@Override
	public String getCandidateStage() {
		if (_candidateStage == null) {
			return "";
		}
		else {
			return _candidateStage;
		}
	}

	@Override
	public void setCandidateStage(String candidateStage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_candidateStage = candidateStage;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCandidateStage() {
		return getColumnOriginalValue("candidateStage");
	}

	@JSON
	@Override
	public String getSource() {
		if (_source == null) {
			return "";
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_source = source;
	}

	@JSON
	@Override
	public String getCandidateOwner() {
		if (_candidateOwner == null) {
			return "";
		}
		else {
			return _candidateOwner;
		}
	}

	@Override
	public void setCandidateOwner(String candidateOwner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_candidateOwner = candidateOwner;
	}

	@JSON
	@Override
	public String getInstitute() {
		if (_institute == null) {
			return "";
		}
		else {
			return _institute;
		}
	}

	@Override
	public void setInstitute(String institute) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_institute = institute;
	}

	@JSON
	@Override
	public String getDepartment() {
		if (_department == null) {
			return "";
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_department = department;
	}

	@JSON
	@Override
	public String getDegree() {
		if (_degree == null) {
			return "";
		}
		else {
			return _degree;
		}
	}

	@Override
	public void setDegree(String degree) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_degree = degree;
	}

	@JSON
	@Override
	public String getFromDuration() {
		if (_fromDuration == null) {
			return "";
		}
		else {
			return _fromDuration;
		}
	}

	@Override
	public void setFromDuration(String fromDuration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromDuration = fromDuration;
	}

	@JSON
	@Override
	public String getToDuration() {
		if (_toDuration == null) {
			return "";
		}
		else {
			return _toDuration;
		}
	}

	@Override
	public void setToDuration(String toDuration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toDuration = toDuration;
	}

	@JSON
	@Override
	public String getOccupation() {
		if (_occupation == null) {
			return "";
		}
		else {
			return _occupation;
		}
	}

	@Override
	public void setOccupation(String occupation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occupation = occupation;
	}

	@JSON
	@Override
	public String getCompany() {
		if (_company == null) {
			return "";
		}
		else {
			return _company;
		}
	}

	@Override
	public void setCompany(String company) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_company = company;
	}

	@JSON
	@Override
	public String getSummary() {
		if (_summary == null) {
			return "";
		}
		else {
			return _summary;
		}
	}

	@Override
	public void setSummary(String summary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_summary = summary;
	}

	@JSON
	@Override
	public String getFromWorkDuration() {
		if (_fromWorkDuration == null) {
			return "";
		}
		else {
			return _fromWorkDuration;
		}
	}

	@Override
	public void setFromWorkDuration(String fromWorkDuration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromWorkDuration = fromWorkDuration;
	}

	@JSON
	@Override
	public String getToWorkDuration() {
		if (_toWorkDuration == null) {
			return "";
		}
		else {
			return _toWorkDuration;
		}
	}

	@Override
	public void setToWorkDuration(String toWorkDuration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toWorkDuration = toWorkDuration;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_folderId = folderId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CandidateOtherInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CandidateOtherInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CandidateOtherInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidateOtherInfoImpl candidateOtherInfoImpl =
			new CandidateOtherInfoImpl();

		candidateOtherInfoImpl.setUuid(getUuid());
		candidateOtherInfoImpl.setCandidateOtherInfoId(
			getCandidateOtherInfoId());
		candidateOtherInfoImpl.setCandidateId(getCandidateId());
		candidateOtherInfoImpl.setCandidateStatus(getCandidateStatus());
		candidateOtherInfoImpl.setCandidateStage(getCandidateStage());
		candidateOtherInfoImpl.setSource(getSource());
		candidateOtherInfoImpl.setCandidateOwner(getCandidateOwner());
		candidateOtherInfoImpl.setInstitute(getInstitute());
		candidateOtherInfoImpl.setDepartment(getDepartment());
		candidateOtherInfoImpl.setDegree(getDegree());
		candidateOtherInfoImpl.setFromDuration(getFromDuration());
		candidateOtherInfoImpl.setToDuration(getToDuration());
		candidateOtherInfoImpl.setOccupation(getOccupation());
		candidateOtherInfoImpl.setCompany(getCompany());
		candidateOtherInfoImpl.setSummary(getSummary());
		candidateOtherInfoImpl.setFromWorkDuration(getFromWorkDuration());
		candidateOtherInfoImpl.setToWorkDuration(getToWorkDuration());
		candidateOtherInfoImpl.setCompanyId(getCompanyId());
		candidateOtherInfoImpl.setUserId(getUserId());
		candidateOtherInfoImpl.setFolderId(getFolderId());

		candidateOtherInfoImpl.resetOriginalValues();

		return candidateOtherInfoImpl;
	}

	@Override
	public CandidateOtherInfo cloneWithOriginalValues() {
		CandidateOtherInfoImpl candidateOtherInfoImpl =
			new CandidateOtherInfoImpl();

		candidateOtherInfoImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		candidateOtherInfoImpl.setCandidateOtherInfoId(
			this.<Long>getColumnOriginalValue("candidateOtherInfoId"));
		candidateOtherInfoImpl.setCandidateId(
			this.<Long>getColumnOriginalValue("candidateId"));
		candidateOtherInfoImpl.setCandidateStatus(
			this.<String>getColumnOriginalValue("candidateStatus"));
		candidateOtherInfoImpl.setCandidateStage(
			this.<String>getColumnOriginalValue("candidateStage"));
		candidateOtherInfoImpl.setSource(
			this.<String>getColumnOriginalValue("source"));
		candidateOtherInfoImpl.setCandidateOwner(
			this.<String>getColumnOriginalValue("candidateOwner"));
		candidateOtherInfoImpl.setInstitute(
			this.<String>getColumnOriginalValue("institute"));
		candidateOtherInfoImpl.setDepartment(
			this.<String>getColumnOriginalValue("department"));
		candidateOtherInfoImpl.setDegree(
			this.<String>getColumnOriginalValue("degree"));
		candidateOtherInfoImpl.setFromDuration(
			this.<String>getColumnOriginalValue("fromDuration"));
		candidateOtherInfoImpl.setToDuration(
			this.<String>getColumnOriginalValue("toDuration"));
		candidateOtherInfoImpl.setOccupation(
			this.<String>getColumnOriginalValue("occupation"));
		candidateOtherInfoImpl.setCompany(
			this.<String>getColumnOriginalValue("company"));
		candidateOtherInfoImpl.setSummary(
			this.<String>getColumnOriginalValue("summary"));
		candidateOtherInfoImpl.setFromWorkDuration(
			this.<String>getColumnOriginalValue("fromWorkDuration"));
		candidateOtherInfoImpl.setToWorkDuration(
			this.<String>getColumnOriginalValue("toWorkDuration"));
		candidateOtherInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		candidateOtherInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		candidateOtherInfoImpl.setFolderId(
			this.<Long>getColumnOriginalValue("folderId"));

		return candidateOtherInfoImpl;
	}

	@Override
	public int compareTo(CandidateOtherInfo candidateOtherInfo) {
		long primaryKey = candidateOtherInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CandidateOtherInfo)) {
			return false;
		}

		CandidateOtherInfo candidateOtherInfo = (CandidateOtherInfo)object;

		long primaryKey = candidateOtherInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CandidateOtherInfo> toCacheModel() {
		CandidateOtherInfoCacheModel candidateOtherInfoCacheModel =
			new CandidateOtherInfoCacheModel();

		candidateOtherInfoCacheModel.uuid = getUuid();

		String uuid = candidateOtherInfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			candidateOtherInfoCacheModel.uuid = null;
		}

		candidateOtherInfoCacheModel.candidateOtherInfoId =
			getCandidateOtherInfoId();

		candidateOtherInfoCacheModel.candidateId = getCandidateId();

		candidateOtherInfoCacheModel.candidateStatus = getCandidateStatus();

		String candidateStatus = candidateOtherInfoCacheModel.candidateStatus;

		if ((candidateStatus != null) && (candidateStatus.length() == 0)) {
			candidateOtherInfoCacheModel.candidateStatus = null;
		}

		candidateOtherInfoCacheModel.candidateStage = getCandidateStage();

		String candidateStage = candidateOtherInfoCacheModel.candidateStage;

		if ((candidateStage != null) && (candidateStage.length() == 0)) {
			candidateOtherInfoCacheModel.candidateStage = null;
		}

		candidateOtherInfoCacheModel.source = getSource();

		String source = candidateOtherInfoCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			candidateOtherInfoCacheModel.source = null;
		}

		candidateOtherInfoCacheModel.candidateOwner = getCandidateOwner();

		String candidateOwner = candidateOtherInfoCacheModel.candidateOwner;

		if ((candidateOwner != null) && (candidateOwner.length() == 0)) {
			candidateOtherInfoCacheModel.candidateOwner = null;
		}

		candidateOtherInfoCacheModel.institute = getInstitute();

		String institute = candidateOtherInfoCacheModel.institute;

		if ((institute != null) && (institute.length() == 0)) {
			candidateOtherInfoCacheModel.institute = null;
		}

		candidateOtherInfoCacheModel.department = getDepartment();

		String department = candidateOtherInfoCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			candidateOtherInfoCacheModel.department = null;
		}

		candidateOtherInfoCacheModel.degree = getDegree();

		String degree = candidateOtherInfoCacheModel.degree;

		if ((degree != null) && (degree.length() == 0)) {
			candidateOtherInfoCacheModel.degree = null;
		}

		candidateOtherInfoCacheModel.fromDuration = getFromDuration();

		String fromDuration = candidateOtherInfoCacheModel.fromDuration;

		if ((fromDuration != null) && (fromDuration.length() == 0)) {
			candidateOtherInfoCacheModel.fromDuration = null;
		}

		candidateOtherInfoCacheModel.toDuration = getToDuration();

		String toDuration = candidateOtherInfoCacheModel.toDuration;

		if ((toDuration != null) && (toDuration.length() == 0)) {
			candidateOtherInfoCacheModel.toDuration = null;
		}

		candidateOtherInfoCacheModel.occupation = getOccupation();

		String occupation = candidateOtherInfoCacheModel.occupation;

		if ((occupation != null) && (occupation.length() == 0)) {
			candidateOtherInfoCacheModel.occupation = null;
		}

		candidateOtherInfoCacheModel.company = getCompany();

		String company = candidateOtherInfoCacheModel.company;

		if ((company != null) && (company.length() == 0)) {
			candidateOtherInfoCacheModel.company = null;
		}

		candidateOtherInfoCacheModel.summary = getSummary();

		String summary = candidateOtherInfoCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			candidateOtherInfoCacheModel.summary = null;
		}

		candidateOtherInfoCacheModel.fromWorkDuration = getFromWorkDuration();

		String fromWorkDuration = candidateOtherInfoCacheModel.fromWorkDuration;

		if ((fromWorkDuration != null) && (fromWorkDuration.length() == 0)) {
			candidateOtherInfoCacheModel.fromWorkDuration = null;
		}

		candidateOtherInfoCacheModel.toWorkDuration = getToWorkDuration();

		String toWorkDuration = candidateOtherInfoCacheModel.toWorkDuration;

		if ((toWorkDuration != null) && (toWorkDuration.length() == 0)) {
			candidateOtherInfoCacheModel.toWorkDuration = null;
		}

		candidateOtherInfoCacheModel.companyId = getCompanyId();

		candidateOtherInfoCacheModel.userId = getUserId();

		candidateOtherInfoCacheModel.folderId = getFolderId();

		return candidateOtherInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CandidateOtherInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CandidateOtherInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CandidateOtherInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CandidateOtherInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CandidateOtherInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CandidateOtherInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CandidateOtherInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CandidateOtherInfo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CandidateOtherInfo>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _candidateOtherInfoId;
	private long _candidateId;
	private String _candidateStatus;
	private String _candidateStage;
	private String _source;
	private String _candidateOwner;
	private String _institute;
	private String _department;
	private String _degree;
	private String _fromDuration;
	private String _toDuration;
	private String _occupation;
	private String _company;
	private String _summary;
	private String _fromWorkDuration;
	private String _toWorkDuration;
	private long _companyId;
	private long _userId;
	private long _folderId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CandidateOtherInfo, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CandidateOtherInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"candidateOtherInfoId", _candidateOtherInfoId);
		_columnOriginalValues.put("candidateId", _candidateId);
		_columnOriginalValues.put("candidateStatus", _candidateStatus);
		_columnOriginalValues.put("candidateStage", _candidateStage);
		_columnOriginalValues.put("source", _source);
		_columnOriginalValues.put("candidateOwner", _candidateOwner);
		_columnOriginalValues.put("institute", _institute);
		_columnOriginalValues.put("department", _department);
		_columnOriginalValues.put("degree", _degree);
		_columnOriginalValues.put("fromDuration", _fromDuration);
		_columnOriginalValues.put("toDuration", _toDuration);
		_columnOriginalValues.put("occupation", _occupation);
		_columnOriginalValues.put("company", _company);
		_columnOriginalValues.put("summary", _summary);
		_columnOriginalValues.put("fromWorkDuration", _fromWorkDuration);
		_columnOriginalValues.put("toWorkDuration", _toWorkDuration);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("folderId", _folderId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("candidateOtherInfoId", 2L);

		columnBitmasks.put("candidateId", 4L);

		columnBitmasks.put("candidateStatus", 8L);

		columnBitmasks.put("candidateStage", 16L);

		columnBitmasks.put("source", 32L);

		columnBitmasks.put("candidateOwner", 64L);

		columnBitmasks.put("institute", 128L);

		columnBitmasks.put("department", 256L);

		columnBitmasks.put("degree", 512L);

		columnBitmasks.put("fromDuration", 1024L);

		columnBitmasks.put("toDuration", 2048L);

		columnBitmasks.put("occupation", 4096L);

		columnBitmasks.put("company", 8192L);

		columnBitmasks.put("summary", 16384L);

		columnBitmasks.put("fromWorkDuration", 32768L);

		columnBitmasks.put("toWorkDuration", 65536L);

		columnBitmasks.put("companyId", 131072L);

		columnBitmasks.put("userId", 262144L);

		columnBitmasks.put("folderId", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CandidateOtherInfo _escapedModel;

}