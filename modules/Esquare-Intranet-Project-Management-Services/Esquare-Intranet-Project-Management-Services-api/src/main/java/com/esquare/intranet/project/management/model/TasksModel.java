/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.esquare.intranet.project.management.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the Tasks service. Represents a row in the &quot;Esquare_Tasks&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.esquare.intranet.project.management.model.impl.TasksModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.esquare.intranet.project.management.model.impl.TasksImpl</code>.
 * </p>
 *
 * @author Mahammed Seleem
 * @see Tasks
 * @generated
 */
@ProviderType
public interface TasksModel extends BaseModel<Tasks>, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a tasks model instance should use the {@link Tasks} interface instead.
	 */

	/**
	 * Returns the primary key of this tasks.
	 *
	 * @return the primary key of this tasks
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this tasks.
	 *
	 * @param primaryKey the primary key of this tasks
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this tasks.
	 *
	 * @return the uuid of this tasks
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this tasks.
	 *
	 * @param uuid the uuid of this tasks
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the task ID of this tasks.
	 *
	 * @return the task ID of this tasks
	 */
	public long getTaskId();

	/**
	 * Sets the task ID of this tasks.
	 *
	 * @param taskId the task ID of this tasks
	 */
	public void setTaskId(long taskId);

	/**
	 * Returns the name of this tasks.
	 *
	 * @return the name of this tasks
	 */
	@AutoEscape
	public String getName();

	/**
	 * Sets the name of this tasks.
	 *
	 * @param name the name of this tasks
	 */
	public void setName(String name);

	/**
	 * Returns the description of this tasks.
	 *
	 * @return the description of this tasks
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this tasks.
	 *
	 * @param description the description of this tasks
	 */
	public void setDescription(String description);

	/**
	 * Returns the developer team of this tasks.
	 *
	 * @return the developer team of this tasks
	 */
	@AutoEscape
	public String getDeveloperTeam();

	/**
	 * Sets the developer team of this tasks.
	 *
	 * @param developerTeam the developer team of this tasks
	 */
	public void setDeveloperTeam(String developerTeam);

	/**
	 * Returns the tester team of this tasks.
	 *
	 * @return the tester team of this tasks
	 */
	@AutoEscape
	public String getTesterTeam();

	/**
	 * Sets the tester team of this tasks.
	 *
	 * @param testerTeam the tester team of this tasks
	 */
	public void setTesterTeam(String testerTeam);

	/**
	 * Returns the task start date of this tasks.
	 *
	 * @return the task start date of this tasks
	 */
	public Date getTaskStartDate();

	/**
	 * Sets the task start date of this tasks.
	 *
	 * @param taskStartDate the task start date of this tasks
	 */
	public void setTaskStartDate(Date taskStartDate);

	/**
	 * Returns the task end date of this tasks.
	 *
	 * @return the task end date of this tasks
	 */
	public Date getTaskEndDate();

	/**
	 * Sets the task end date of this tasks.
	 *
	 * @param taskEndDate the task end date of this tasks
	 */
	public void setTaskEndDate(Date taskEndDate);

	/**
	 * Returns the status of this tasks.
	 *
	 * @return the status of this tasks
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this tasks.
	 *
	 * @param status the status of this tasks
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this tasks.
	 *
	 * @return the status by user ID of this tasks
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this tasks.
	 *
	 * @param statusByUserId the status by user ID of this tasks
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this tasks.
	 *
	 * @return the status by user uuid of this tasks
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this tasks.
	 *
	 * @param statusByUserUuid the status by user uuid of this tasks
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this tasks.
	 *
	 * @return the status by user name of this tasks
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this tasks.
	 *
	 * @param statusByUserName the status by user name of this tasks
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this tasks.
	 *
	 * @return the status date of this tasks
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this tasks.
	 *
	 * @param statusDate the status date of this tasks
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the project ID of this tasks.
	 *
	 * @return the project ID of this tasks
	 */
	public long getProjectId();

	/**
	 * Sets the project ID of this tasks.
	 *
	 * @param projectId the project ID of this tasks
	 */
	public void setProjectId(long projectId);

	/**
	 * Returns <code>true</code> if this tasks is approved.
	 *
	 * @return <code>true</code> if this tasks is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this tasks is denied.
	 *
	 * @return <code>true</code> if this tasks is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this tasks is a draft.
	 *
	 * @return <code>true</code> if this tasks is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this tasks is expired.
	 *
	 * @return <code>true</code> if this tasks is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this tasks is inactive.
	 *
	 * @return <code>true</code> if this tasks is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this tasks is incomplete.
	 *
	 * @return <code>true</code> if this tasks is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this tasks is pending.
	 *
	 * @return <code>true</code> if this tasks is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this tasks is scheduled.
	 *
	 * @return <code>true</code> if this tasks is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public Tasks cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}