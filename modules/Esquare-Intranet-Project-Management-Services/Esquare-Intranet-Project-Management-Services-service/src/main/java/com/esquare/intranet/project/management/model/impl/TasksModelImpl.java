/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.esquare.intranet.project.management.model.impl;

import com.esquare.intranet.project.management.model.Tasks;
import com.esquare.intranet.project.management.model.TasksModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Tasks service. Represents a row in the &quot;Esquare_Tasks&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TasksModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TasksImpl}.
 * </p>
 *
 * @author Mahammed Seleem
 * @see TasksImpl
 * @generated
 */
@JSON(strict = true)
public class TasksModelImpl extends BaseModelImpl<Tasks> implements TasksModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tasks model instance should use the <code>Tasks</code> interface instead.
	 */
	public static final String TABLE_NAME = "Esquare_Tasks";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"taskId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"developerTeam", Types.VARCHAR}, {"testerTeam", Types.VARCHAR},
		{"taskStartDate", Types.TIMESTAMP}, {"taskEndDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"projectId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("developerTeam", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testerTeam", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taskStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("taskEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Esquare_Tasks (uuid_ VARCHAR(75) null,taskId LONG not null primary key,name VARCHAR(75) null,description VARCHAR(75) null,developerTeam VARCHAR(75) null,testerTeam VARCHAR(75) null,taskStartDate DATE null,taskEndDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,projectId LONG)";

	public static final String TABLE_SQL_DROP = "drop table Esquare_Tasks";

	public static final String ORDER_BY_JPQL = " ORDER BY tasks.taskId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Esquare_Tasks.taskId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROJECTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TASKID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TasksModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _taskId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTaskId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _taskId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Tasks.class;
	}

	@Override
	public String getModelClassName() {
		return Tasks.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Tasks, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Tasks, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tasks, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Tasks)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Tasks, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Tasks, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Tasks)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Tasks, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Tasks, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Tasks, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Tasks, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Tasks, Object>>();

			attributeGetterFunctions.put("uuid", Tasks::getUuid);
			attributeGetterFunctions.put("taskId", Tasks::getTaskId);
			attributeGetterFunctions.put("name", Tasks::getName);
			attributeGetterFunctions.put("description", Tasks::getDescription);
			attributeGetterFunctions.put(
				"developerTeam", Tasks::getDeveloperTeam);
			attributeGetterFunctions.put("testerTeam", Tasks::getTesterTeam);
			attributeGetterFunctions.put(
				"taskStartDate", Tasks::getTaskStartDate);
			attributeGetterFunctions.put("taskEndDate", Tasks::getTaskEndDate);
			attributeGetterFunctions.put("status", Tasks::getStatus);
			attributeGetterFunctions.put(
				"statusByUserId", Tasks::getStatusByUserId);
			attributeGetterFunctions.put(
				"statusByUserName", Tasks::getStatusByUserName);
			attributeGetterFunctions.put("statusDate", Tasks::getStatusDate);
			attributeGetterFunctions.put("projectId", Tasks::getProjectId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Tasks, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Tasks, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Tasks, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Tasks, String>)Tasks::setUuid);
			attributeSetterBiConsumers.put(
				"taskId", (BiConsumer<Tasks, Long>)Tasks::setTaskId);
			attributeSetterBiConsumers.put(
				"name", (BiConsumer<Tasks, String>)Tasks::setName);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<Tasks, String>)Tasks::setDescription);
			attributeSetterBiConsumers.put(
				"developerTeam",
				(BiConsumer<Tasks, String>)Tasks::setDeveloperTeam);
			attributeSetterBiConsumers.put(
				"testerTeam", (BiConsumer<Tasks, String>)Tasks::setTesterTeam);
			attributeSetterBiConsumers.put(
				"taskStartDate",
				(BiConsumer<Tasks, Date>)Tasks::setTaskStartDate);
			attributeSetterBiConsumers.put(
				"taskEndDate", (BiConsumer<Tasks, Date>)Tasks::setTaskEndDate);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Tasks, Integer>)Tasks::setStatus);
			attributeSetterBiConsumers.put(
				"statusByUserId",
				(BiConsumer<Tasks, Long>)Tasks::setStatusByUserId);
			attributeSetterBiConsumers.put(
				"statusByUserName",
				(BiConsumer<Tasks, String>)Tasks::setStatusByUserName);
			attributeSetterBiConsumers.put(
				"statusDate", (BiConsumer<Tasks, Date>)Tasks::setStatusDate);
			attributeSetterBiConsumers.put(
				"projectId", (BiConsumer<Tasks, Long>)Tasks::setProjectId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getTaskId() {
		return _taskId;
	}

	@Override
	public void setTaskId(long taskId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taskId = taskId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getDeveloperTeam() {
		if (_developerTeam == null) {
			return "";
		}
		else {
			return _developerTeam;
		}
	}

	@Override
	public void setDeveloperTeam(String developerTeam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_developerTeam = developerTeam;
	}

	@JSON
	@Override
	public String getTesterTeam() {
		if (_testerTeam == null) {
			return "";
		}
		else {
			return _testerTeam;
		}
	}

	@Override
	public void setTesterTeam(String testerTeam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testerTeam = testerTeam;
	}

	@JSON
	@Override
	public Date getTaskStartDate() {
		return _taskStartDate;
	}

	@Override
	public void setTaskStartDate(Date taskStartDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taskStartDate = taskStartDate;
	}

	@JSON
	@Override
	public Date getTaskEndDate() {
		return _taskEndDate;
	}

	@Override
	public void setTaskEndDate(Date taskEndDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taskEndDate = taskEndDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectId = projectId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProjectId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("projectId"));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Tasks.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Tasks toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Tasks>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TasksImpl tasksImpl = new TasksImpl();

		tasksImpl.setUuid(getUuid());
		tasksImpl.setTaskId(getTaskId());
		tasksImpl.setName(getName());
		tasksImpl.setDescription(getDescription());
		tasksImpl.setDeveloperTeam(getDeveloperTeam());
		tasksImpl.setTesterTeam(getTesterTeam());
		tasksImpl.setTaskStartDate(getTaskStartDate());
		tasksImpl.setTaskEndDate(getTaskEndDate());
		tasksImpl.setStatus(getStatus());
		tasksImpl.setStatusByUserId(getStatusByUserId());
		tasksImpl.setStatusByUserName(getStatusByUserName());
		tasksImpl.setStatusDate(getStatusDate());
		tasksImpl.setProjectId(getProjectId());

		tasksImpl.resetOriginalValues();

		return tasksImpl;
	}

	@Override
	public Tasks cloneWithOriginalValues() {
		TasksImpl tasksImpl = new TasksImpl();

		tasksImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		tasksImpl.setTaskId(this.<Long>getColumnOriginalValue("taskId"));
		tasksImpl.setName(this.<String>getColumnOriginalValue("name"));
		tasksImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		tasksImpl.setDeveloperTeam(
			this.<String>getColumnOriginalValue("developerTeam"));
		tasksImpl.setTesterTeam(
			this.<String>getColumnOriginalValue("testerTeam"));
		tasksImpl.setTaskStartDate(
			this.<Date>getColumnOriginalValue("taskStartDate"));
		tasksImpl.setTaskEndDate(
			this.<Date>getColumnOriginalValue("taskEndDate"));
		tasksImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		tasksImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		tasksImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		tasksImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		tasksImpl.setProjectId(this.<Long>getColumnOriginalValue("projectId"));

		return tasksImpl;
	}

	@Override
	public int compareTo(Tasks tasks) {
		long primaryKey = tasks.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Tasks)) {
			return false;
		}

		Tasks tasks = (Tasks)object;

		long primaryKey = tasks.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Tasks> toCacheModel() {
		TasksCacheModel tasksCacheModel = new TasksCacheModel();

		tasksCacheModel.uuid = getUuid();

		String uuid = tasksCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			tasksCacheModel.uuid = null;
		}

		tasksCacheModel.taskId = getTaskId();

		tasksCacheModel.name = getName();

		String name = tasksCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			tasksCacheModel.name = null;
		}

		tasksCacheModel.description = getDescription();

		String description = tasksCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			tasksCacheModel.description = null;
		}

		tasksCacheModel.developerTeam = getDeveloperTeam();

		String developerTeam = tasksCacheModel.developerTeam;

		if ((developerTeam != null) && (developerTeam.length() == 0)) {
			tasksCacheModel.developerTeam = null;
		}

		tasksCacheModel.testerTeam = getTesterTeam();

		String testerTeam = tasksCacheModel.testerTeam;

		if ((testerTeam != null) && (testerTeam.length() == 0)) {
			tasksCacheModel.testerTeam = null;
		}

		Date taskStartDate = getTaskStartDate();

		if (taskStartDate != null) {
			tasksCacheModel.taskStartDate = taskStartDate.getTime();
		}
		else {
			tasksCacheModel.taskStartDate = Long.MIN_VALUE;
		}

		Date taskEndDate = getTaskEndDate();

		if (taskEndDate != null) {
			tasksCacheModel.taskEndDate = taskEndDate.getTime();
		}
		else {
			tasksCacheModel.taskEndDate = Long.MIN_VALUE;
		}

		tasksCacheModel.status = getStatus();

		tasksCacheModel.statusByUserId = getStatusByUserId();

		tasksCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = tasksCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			tasksCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			tasksCacheModel.statusDate = statusDate.getTime();
		}
		else {
			tasksCacheModel.statusDate = Long.MIN_VALUE;
		}

		tasksCacheModel.projectId = getProjectId();

		return tasksCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Tasks, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Tasks, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tasks, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Tasks)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Tasks>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Tasks.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _taskId;
	private String _name;
	private String _description;
	private String _developerTeam;
	private String _testerTeam;
	private Date _taskStartDate;
	private Date _taskEndDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _projectId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Tasks, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Tasks)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("taskId", _taskId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("developerTeam", _developerTeam);
		_columnOriginalValues.put("testerTeam", _testerTeam);
		_columnOriginalValues.put("taskStartDate", _taskStartDate);
		_columnOriginalValues.put("taskEndDate", _taskEndDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("projectId", _projectId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("taskId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("description", 8L);

		columnBitmasks.put("developerTeam", 16L);

		columnBitmasks.put("testerTeam", 32L);

		columnBitmasks.put("taskStartDate", 64L);

		columnBitmasks.put("taskEndDate", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("statusByUserId", 512L);

		columnBitmasks.put("statusByUserName", 1024L);

		columnBitmasks.put("statusDate", 2048L);

		columnBitmasks.put("projectId", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Tasks _escapedModel;

}