/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.esquare.intranet.project.management.model.impl;

import com.esquare.intranet.project.management.model.TeamMembers;
import com.esquare.intranet.project.management.model.TeamMembersModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TeamMembers service. Represents a row in the &quot;Esquare_TeamMembers&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TeamMembersModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeamMembersImpl}.
 * </p>
 *
 * @author Mahammed Seleem
 * @see TeamMembersImpl
 * @generated
 */
@JSON(strict = true)
public class TeamMembersModelImpl
	extends BaseModelImpl<TeamMembers> implements TeamMembersModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a team members model instance should use the <code>TeamMembers</code> interface instead.
	 */
	public static final String TABLE_NAME = "Esquare_TeamMembers";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"memberId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"memberRole", Types.VARCHAR},
		{"userId", Types.BIGINT}, {"projectId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memberRole", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Esquare_TeamMembers (uuid_ VARCHAR(75) null,memberId LONG not null primary key,name VARCHAR(75) null,memberRole VARCHAR(75) null,userId LONG,projectId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table Esquare_TeamMembers";

	public static final String ORDER_BY_JPQL =
		" ORDER BY teamMembers.memberId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Esquare_TeamMembers.memberId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROJECTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MEMBERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TeamMembersModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _memberId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMemberId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _memberId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TeamMembers.class;
	}

	@Override
	public String getModelClassName() {
		return TeamMembers.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TeamMembers, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TeamMembers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TeamMembers, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TeamMembers)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TeamMembers, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TeamMembers, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TeamMembers)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TeamMembers, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TeamMembers, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<TeamMembers, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<TeamMembers, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<TeamMembers, Object>>();

			attributeGetterFunctions.put("uuid", TeamMembers::getUuid);
			attributeGetterFunctions.put("memberId", TeamMembers::getMemberId);
			attributeGetterFunctions.put("name", TeamMembers::getName);
			attributeGetterFunctions.put(
				"memberRole", TeamMembers::getMemberRole);
			attributeGetterFunctions.put("userId", TeamMembers::getUserId);
			attributeGetterFunctions.put(
				"projectId", TeamMembers::getProjectId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<TeamMembers, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TeamMembers, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<TeamMembers, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<TeamMembers, String>)TeamMembers::setUuid);
			attributeSetterBiConsumers.put(
				"memberId",
				(BiConsumer<TeamMembers, Long>)TeamMembers::setMemberId);
			attributeSetterBiConsumers.put(
				"name", (BiConsumer<TeamMembers, String>)TeamMembers::setName);
			attributeSetterBiConsumers.put(
				"memberRole",
				(BiConsumer<TeamMembers, String>)TeamMembers::setMemberRole);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TeamMembers, Long>)TeamMembers::setUserId);
			attributeSetterBiConsumers.put(
				"projectId",
				(BiConsumer<TeamMembers, Long>)TeamMembers::setProjectId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getMemberId() {
		return _memberId;
	}

	@Override
	public void setMemberId(long memberId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_memberId = memberId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getMemberRole() {
		if (_memberRole == null) {
			return "";
		}
		else {
			return _memberRole;
		}
	}

	@Override
	public void setMemberRole(String memberRole) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_memberRole = memberRole;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectId = projectId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProjectId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("projectId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TeamMembers.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TeamMembers toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TeamMembers>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TeamMembersImpl teamMembersImpl = new TeamMembersImpl();

		teamMembersImpl.setUuid(getUuid());
		teamMembersImpl.setMemberId(getMemberId());
		teamMembersImpl.setName(getName());
		teamMembersImpl.setMemberRole(getMemberRole());
		teamMembersImpl.setUserId(getUserId());
		teamMembersImpl.setProjectId(getProjectId());

		teamMembersImpl.resetOriginalValues();

		return teamMembersImpl;
	}

	@Override
	public TeamMembers cloneWithOriginalValues() {
		TeamMembersImpl teamMembersImpl = new TeamMembersImpl();

		teamMembersImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		teamMembersImpl.setMemberId(
			this.<Long>getColumnOriginalValue("memberId"));
		teamMembersImpl.setName(this.<String>getColumnOriginalValue("name"));
		teamMembersImpl.setMemberRole(
			this.<String>getColumnOriginalValue("memberRole"));
		teamMembersImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		teamMembersImpl.setProjectId(
			this.<Long>getColumnOriginalValue("projectId"));

		return teamMembersImpl;
	}

	@Override
	public int compareTo(TeamMembers teamMembers) {
		long primaryKey = teamMembers.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TeamMembers)) {
			return false;
		}

		TeamMembers teamMembers = (TeamMembers)object;

		long primaryKey = teamMembers.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TeamMembers> toCacheModel() {
		TeamMembersCacheModel teamMembersCacheModel =
			new TeamMembersCacheModel();

		teamMembersCacheModel.uuid = getUuid();

		String uuid = teamMembersCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			teamMembersCacheModel.uuid = null;
		}

		teamMembersCacheModel.memberId = getMemberId();

		teamMembersCacheModel.name = getName();

		String name = teamMembersCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			teamMembersCacheModel.name = null;
		}

		teamMembersCacheModel.memberRole = getMemberRole();

		String memberRole = teamMembersCacheModel.memberRole;

		if ((memberRole != null) && (memberRole.length() == 0)) {
			teamMembersCacheModel.memberRole = null;
		}

		teamMembersCacheModel.userId = getUserId();

		teamMembersCacheModel.projectId = getProjectId();

		return teamMembersCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TeamMembers, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TeamMembers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TeamMembers, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((TeamMembers)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TeamMembers>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					TeamMembers.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _memberId;
	private String _name;
	private String _memberRole;
	private long _userId;
	private long _projectId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<TeamMembers, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TeamMembers)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("memberId", _memberId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("memberRole", _memberRole);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("projectId", _projectId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("memberId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("memberRole", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("projectId", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TeamMembers _escapedModel;

}