/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.esquare.intranet.project.management.model.impl;

import com.esquare.intranet.project.management.model.Notes;
import com.esquare.intranet.project.management.model.NotesModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Notes service. Represents a row in the &quot;Esquare_Notes&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NotesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotesImpl}.
 * </p>
 *
 * @author Mahammed Seleem
 * @see NotesImpl
 * @generated
 */
@JSON(strict = true)
public class NotesModelImpl extends BaseModelImpl<Notes> implements NotesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notes model instance should use the <code>Notes</code> interface instead.
	 */
	public static final String TABLE_NAME = "Esquare_Notes";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"noteId", Types.BIGINT},
		{"noteTitle", Types.VARCHAR}, {"noteDescription", Types.VARCHAR},
		{"noteType", Types.VARCHAR}, {"noteAuthor", Types.VARCHAR},
		{"noteDate", Types.TIMESTAMP}, {"projectId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("noteTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noteDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noteType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noteAuthor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noteDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Esquare_Notes (uuid_ VARCHAR(75) null,noteId LONG not null primary key,noteTitle VARCHAR(75) null,noteDescription VARCHAR(75) null,noteType VARCHAR(75) null,noteAuthor VARCHAR(75) null,noteDate DATE null,projectId LONG)";

	public static final String TABLE_SQL_DROP = "drop table Esquare_Notes";

	public static final String ORDER_BY_JPQL = " ORDER BY notes.noteId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Esquare_Notes.noteId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOTEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NotesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _noteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNoteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _noteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Notes.class;
	}

	@Override
	public String getModelClassName() {
		return Notes.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Notes, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Notes, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Notes, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Notes)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Notes, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Notes, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Notes)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Notes, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Notes, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Notes, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Notes, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Notes, Object>>();

			attributeGetterFunctions.put("uuid", Notes::getUuid);
			attributeGetterFunctions.put("noteId", Notes::getNoteId);
			attributeGetterFunctions.put("noteTitle", Notes::getNoteTitle);
			attributeGetterFunctions.put(
				"noteDescription", Notes::getNoteDescription);
			attributeGetterFunctions.put("noteType", Notes::getNoteType);
			attributeGetterFunctions.put("noteAuthor", Notes::getNoteAuthor);
			attributeGetterFunctions.put("noteDate", Notes::getNoteDate);
			attributeGetterFunctions.put("projectId", Notes::getProjectId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Notes, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Notes, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Notes, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Notes, String>)Notes::setUuid);
			attributeSetterBiConsumers.put(
				"noteId", (BiConsumer<Notes, Long>)Notes::setNoteId);
			attributeSetterBiConsumers.put(
				"noteTitle", (BiConsumer<Notes, String>)Notes::setNoteTitle);
			attributeSetterBiConsumers.put(
				"noteDescription",
				(BiConsumer<Notes, String>)Notes::setNoteDescription);
			attributeSetterBiConsumers.put(
				"noteType", (BiConsumer<Notes, String>)Notes::setNoteType);
			attributeSetterBiConsumers.put(
				"noteAuthor", (BiConsumer<Notes, String>)Notes::setNoteAuthor);
			attributeSetterBiConsumers.put(
				"noteDate", (BiConsumer<Notes, Date>)Notes::setNoteDate);
			attributeSetterBiConsumers.put(
				"projectId", (BiConsumer<Notes, Long>)Notes::setProjectId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getNoteId() {
		return _noteId;
	}

	@Override
	public void setNoteId(long noteId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noteId = noteId;
	}

	@JSON
	@Override
	public String getNoteTitle() {
		if (_noteTitle == null) {
			return "";
		}
		else {
			return _noteTitle;
		}
	}

	@Override
	public void setNoteTitle(String noteTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noteTitle = noteTitle;
	}

	@JSON
	@Override
	public String getNoteDescription() {
		if (_noteDescription == null) {
			return "";
		}
		else {
			return _noteDescription;
		}
	}

	@Override
	public void setNoteDescription(String noteDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noteDescription = noteDescription;
	}

	@JSON
	@Override
	public String getNoteType() {
		if (_noteType == null) {
			return "";
		}
		else {
			return _noteType;
		}
	}

	@Override
	public void setNoteType(String noteType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noteType = noteType;
	}

	@JSON
	@Override
	public String getNoteAuthor() {
		if (_noteAuthor == null) {
			return "";
		}
		else {
			return _noteAuthor;
		}
	}

	@Override
	public void setNoteAuthor(String noteAuthor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noteAuthor = noteAuthor;
	}

	@JSON
	@Override
	public Date getNoteDate() {
		return _noteDate;
	}

	@Override
	public void setNoteDate(Date noteDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noteDate = noteDate;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectId = projectId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Notes.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Notes toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Notes>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotesImpl notesImpl = new NotesImpl();

		notesImpl.setUuid(getUuid());
		notesImpl.setNoteId(getNoteId());
		notesImpl.setNoteTitle(getNoteTitle());
		notesImpl.setNoteDescription(getNoteDescription());
		notesImpl.setNoteType(getNoteType());
		notesImpl.setNoteAuthor(getNoteAuthor());
		notesImpl.setNoteDate(getNoteDate());
		notesImpl.setProjectId(getProjectId());

		notesImpl.resetOriginalValues();

		return notesImpl;
	}

	@Override
	public Notes cloneWithOriginalValues() {
		NotesImpl notesImpl = new NotesImpl();

		notesImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		notesImpl.setNoteId(this.<Long>getColumnOriginalValue("noteId"));
		notesImpl.setNoteTitle(
			this.<String>getColumnOriginalValue("noteTitle"));
		notesImpl.setNoteDescription(
			this.<String>getColumnOriginalValue("noteDescription"));
		notesImpl.setNoteType(this.<String>getColumnOriginalValue("noteType"));
		notesImpl.setNoteAuthor(
			this.<String>getColumnOriginalValue("noteAuthor"));
		notesImpl.setNoteDate(this.<Date>getColumnOriginalValue("noteDate"));
		notesImpl.setProjectId(this.<Long>getColumnOriginalValue("projectId"));

		return notesImpl;
	}

	@Override
	public int compareTo(Notes notes) {
		long primaryKey = notes.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Notes)) {
			return false;
		}

		Notes notes = (Notes)object;

		long primaryKey = notes.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Notes> toCacheModel() {
		NotesCacheModel notesCacheModel = new NotesCacheModel();

		notesCacheModel.uuid = getUuid();

		String uuid = notesCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			notesCacheModel.uuid = null;
		}

		notesCacheModel.noteId = getNoteId();

		notesCacheModel.noteTitle = getNoteTitle();

		String noteTitle = notesCacheModel.noteTitle;

		if ((noteTitle != null) && (noteTitle.length() == 0)) {
			notesCacheModel.noteTitle = null;
		}

		notesCacheModel.noteDescription = getNoteDescription();

		String noteDescription = notesCacheModel.noteDescription;

		if ((noteDescription != null) && (noteDescription.length() == 0)) {
			notesCacheModel.noteDescription = null;
		}

		notesCacheModel.noteType = getNoteType();

		String noteType = notesCacheModel.noteType;

		if ((noteType != null) && (noteType.length() == 0)) {
			notesCacheModel.noteType = null;
		}

		notesCacheModel.noteAuthor = getNoteAuthor();

		String noteAuthor = notesCacheModel.noteAuthor;

		if ((noteAuthor != null) && (noteAuthor.length() == 0)) {
			notesCacheModel.noteAuthor = null;
		}

		Date noteDate = getNoteDate();

		if (noteDate != null) {
			notesCacheModel.noteDate = noteDate.getTime();
		}
		else {
			notesCacheModel.noteDate = Long.MIN_VALUE;
		}

		notesCacheModel.projectId = getProjectId();

		return notesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Notes, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Notes, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Notes, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Notes)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Notes>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Notes.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _noteId;
	private String _noteTitle;
	private String _noteDescription;
	private String _noteType;
	private String _noteAuthor;
	private Date _noteDate;
	private long _projectId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Notes, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Notes)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("noteId", _noteId);
		_columnOriginalValues.put("noteTitle", _noteTitle);
		_columnOriginalValues.put("noteDescription", _noteDescription);
		_columnOriginalValues.put("noteType", _noteType);
		_columnOriginalValues.put("noteAuthor", _noteAuthor);
		_columnOriginalValues.put("noteDate", _noteDate);
		_columnOriginalValues.put("projectId", _projectId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("noteId", 2L);

		columnBitmasks.put("noteTitle", 4L);

		columnBitmasks.put("noteDescription", 8L);

		columnBitmasks.put("noteType", 16L);

		columnBitmasks.put("noteAuthor", 32L);

		columnBitmasks.put("noteDate", 64L);

		columnBitmasks.put("projectId", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Notes _escapedModel;

}