/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.model.impl;

import com.intranet.model.EducationDetails;
import com.intranet.model.EducationDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EducationDetails service. Represents a row in the &quot;INTRANET_EducationDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EducationDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EducationDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EducationDetailsImpl
 * @generated
 */
public class EducationDetailsModelImpl
	extends BaseModelImpl<EducationDetails> implements EducationDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a education details model instance should use the <code>EducationDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "INTRANET_EducationDetails";

	public static final Object[][] TABLE_COLUMNS = {
		{"educationId", Types.BIGINT}, {"employeeID", Types.BIGINT},
		{"pgGraduation", Types.VARCHAR}, {"pgSpecialization", Types.VARCHAR},
		{"pgUniversity", Types.VARCHAR}, {"pgPassout", Types.VARCHAR},
		{"pgPercentage", Types.VARCHAR}, {"graduation", Types.VARCHAR},
		{"specialization", Types.VARCHAR}, {"university", Types.VARCHAR},
		{"passout", Types.VARCHAR}, {"percentage", Types.VARCHAR},
		{"hscSchool", Types.VARCHAR}, {"hscPassout", Types.VARCHAR},
		{"hscPercentage", Types.VARCHAR}, {"sslcSchool", Types.VARCHAR},
		{"sslcPassout", Types.VARCHAR}, {"sslcPercentage", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("educationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pgGraduation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pgSpecialization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pgUniversity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pgPassout", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pgPercentage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("graduation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specialization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("university", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("passout", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("percentage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hscSchool", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hscPassout", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hscPercentage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sslcSchool", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sslcPassout", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sslcPercentage", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table INTRANET_EducationDetails (educationId LONG not null primary key,employeeID LONG,pgGraduation VARCHAR(75) null,pgSpecialization VARCHAR(75) null,pgUniversity VARCHAR(75) null,pgPassout VARCHAR(75) null,pgPercentage VARCHAR(75) null,graduation VARCHAR(75) null,specialization VARCHAR(75) null,university VARCHAR(75) null,passout VARCHAR(75) null,percentage VARCHAR(75) null,hscSchool VARCHAR(75) null,hscPassout VARCHAR(75) null,hscPercentage VARCHAR(75) null,sslcSchool VARCHAR(75) null,sslcPassout VARCHAR(75) null,sslcPercentage VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table INTRANET_EducationDetails";

	public static final String ORDER_BY_JPQL =
		" ORDER BY educationDetails.educationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY INTRANET_EducationDetails.educationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EDUCATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EducationDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _educationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEducationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _educationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EducationDetails.class;
	}

	@Override
	public String getModelClassName() {
		return EducationDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EducationDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EducationDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EducationDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EducationDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EducationDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EducationDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EducationDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EducationDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EducationDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<EducationDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EducationDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EducationDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<EducationDetails, Object>>();
		Map<String, BiConsumer<EducationDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<EducationDetails, ?>>();

		attributeGetterFunctions.put(
			"educationId", EducationDetails::getEducationId);
		attributeSetterBiConsumers.put(
			"educationId",
			(BiConsumer<EducationDetails, Long>)
				EducationDetails::setEducationId);
		attributeGetterFunctions.put(
			"employeeID", EducationDetails::getEmployeeID);
		attributeSetterBiConsumers.put(
			"employeeID",
			(BiConsumer<EducationDetails, Long>)
				EducationDetails::setEmployeeID);
		attributeGetterFunctions.put(
			"pgGraduation", EducationDetails::getPgGraduation);
		attributeSetterBiConsumers.put(
			"pgGraduation",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setPgGraduation);
		attributeGetterFunctions.put(
			"pgSpecialization", EducationDetails::getPgSpecialization);
		attributeSetterBiConsumers.put(
			"pgSpecialization",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setPgSpecialization);
		attributeGetterFunctions.put(
			"pgUniversity", EducationDetails::getPgUniversity);
		attributeSetterBiConsumers.put(
			"pgUniversity",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setPgUniversity);
		attributeGetterFunctions.put(
			"pgPassout", EducationDetails::getPgPassout);
		attributeSetterBiConsumers.put(
			"pgPassout",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setPgPassout);
		attributeGetterFunctions.put(
			"pgPercentage", EducationDetails::getPgPercentage);
		attributeSetterBiConsumers.put(
			"pgPercentage",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setPgPercentage);
		attributeGetterFunctions.put(
			"graduation", EducationDetails::getGraduation);
		attributeSetterBiConsumers.put(
			"graduation",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setGraduation);
		attributeGetterFunctions.put(
			"specialization", EducationDetails::getSpecialization);
		attributeSetterBiConsumers.put(
			"specialization",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setSpecialization);
		attributeGetterFunctions.put(
			"university", EducationDetails::getUniversity);
		attributeSetterBiConsumers.put(
			"university",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setUniversity);
		attributeGetterFunctions.put("passout", EducationDetails::getPassout);
		attributeSetterBiConsumers.put(
			"passout",
			(BiConsumer<EducationDetails, String>)EducationDetails::setPassout);
		attributeGetterFunctions.put(
			"percentage", EducationDetails::getPercentage);
		attributeSetterBiConsumers.put(
			"percentage",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setPercentage);
		attributeGetterFunctions.put(
			"hscSchool", EducationDetails::getHscSchool);
		attributeSetterBiConsumers.put(
			"hscSchool",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setHscSchool);
		attributeGetterFunctions.put(
			"hscPassout", EducationDetails::getHscPassout);
		attributeSetterBiConsumers.put(
			"hscPassout",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setHscPassout);
		attributeGetterFunctions.put(
			"hscPercentage", EducationDetails::getHscPercentage);
		attributeSetterBiConsumers.put(
			"hscPercentage",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setHscPercentage);
		attributeGetterFunctions.put(
			"sslcSchool", EducationDetails::getSslcSchool);
		attributeSetterBiConsumers.put(
			"sslcSchool",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setSslcSchool);
		attributeGetterFunctions.put(
			"sslcPassout", EducationDetails::getSslcPassout);
		attributeSetterBiConsumers.put(
			"sslcPassout",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setSslcPassout);
		attributeGetterFunctions.put(
			"sslcPercentage", EducationDetails::getSslcPercentage);
		attributeSetterBiConsumers.put(
			"sslcPercentage",
			(BiConsumer<EducationDetails, String>)
				EducationDetails::setSslcPercentage);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getEducationId() {
		return _educationId;
	}

	@Override
	public void setEducationId(long educationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_educationId = educationId;
	}

	@Override
	public long getEmployeeID() {
		return _employeeID;
	}

	@Override
	public void setEmployeeID(long employeeID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeID = employeeID;
	}

	@Override
	public String getPgGraduation() {
		if (_pgGraduation == null) {
			return "";
		}
		else {
			return _pgGraduation;
		}
	}

	@Override
	public void setPgGraduation(String pgGraduation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pgGraduation = pgGraduation;
	}

	@Override
	public String getPgSpecialization() {
		if (_pgSpecialization == null) {
			return "";
		}
		else {
			return _pgSpecialization;
		}
	}

	@Override
	public void setPgSpecialization(String pgSpecialization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pgSpecialization = pgSpecialization;
	}

	@Override
	public String getPgUniversity() {
		if (_pgUniversity == null) {
			return "";
		}
		else {
			return _pgUniversity;
		}
	}

	@Override
	public void setPgUniversity(String pgUniversity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pgUniversity = pgUniversity;
	}

	@Override
	public String getPgPassout() {
		if (_pgPassout == null) {
			return "";
		}
		else {
			return _pgPassout;
		}
	}

	@Override
	public void setPgPassout(String pgPassout) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pgPassout = pgPassout;
	}

	@Override
	public String getPgPercentage() {
		if (_pgPercentage == null) {
			return "";
		}
		else {
			return _pgPercentage;
		}
	}

	@Override
	public void setPgPercentage(String pgPercentage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pgPercentage = pgPercentage;
	}

	@Override
	public String getGraduation() {
		if (_graduation == null) {
			return "";
		}
		else {
			return _graduation;
		}
	}

	@Override
	public void setGraduation(String graduation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_graduation = graduation;
	}

	@Override
	public String getSpecialization() {
		if (_specialization == null) {
			return "";
		}
		else {
			return _specialization;
		}
	}

	@Override
	public void setSpecialization(String specialization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specialization = specialization;
	}

	@Override
	public String getUniversity() {
		if (_university == null) {
			return "";
		}
		else {
			return _university;
		}
	}

	@Override
	public void setUniversity(String university) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_university = university;
	}

	@Override
	public String getPassout() {
		if (_passout == null) {
			return "";
		}
		else {
			return _passout;
		}
	}

	@Override
	public void setPassout(String passout) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_passout = passout;
	}

	@Override
	public String getPercentage() {
		if (_percentage == null) {
			return "";
		}
		else {
			return _percentage;
		}
	}

	@Override
	public void setPercentage(String percentage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_percentage = percentage;
	}

	@Override
	public String getHscSchool() {
		if (_hscSchool == null) {
			return "";
		}
		else {
			return _hscSchool;
		}
	}

	@Override
	public void setHscSchool(String hscSchool) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hscSchool = hscSchool;
	}

	@Override
	public String getHscPassout() {
		if (_hscPassout == null) {
			return "";
		}
		else {
			return _hscPassout;
		}
	}

	@Override
	public void setHscPassout(String hscPassout) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hscPassout = hscPassout;
	}

	@Override
	public String getHscPercentage() {
		if (_hscPercentage == null) {
			return "";
		}
		else {
			return _hscPercentage;
		}
	}

	@Override
	public void setHscPercentage(String hscPercentage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hscPercentage = hscPercentage;
	}

	@Override
	public String getSslcSchool() {
		if (_sslcSchool == null) {
			return "";
		}
		else {
			return _sslcSchool;
		}
	}

	@Override
	public void setSslcSchool(String sslcSchool) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sslcSchool = sslcSchool;
	}

	@Override
	public String getSslcPassout() {
		if (_sslcPassout == null) {
			return "";
		}
		else {
			return _sslcPassout;
		}
	}

	@Override
	public void setSslcPassout(String sslcPassout) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sslcPassout = sslcPassout;
	}

	@Override
	public String getSslcPercentage() {
		if (_sslcPercentage == null) {
			return "";
		}
		else {
			return _sslcPercentage;
		}
	}

	@Override
	public void setSslcPercentage(String sslcPercentage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sslcPercentage = sslcPercentage;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, EducationDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EducationDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EducationDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EducationDetailsImpl educationDetailsImpl = new EducationDetailsImpl();

		educationDetailsImpl.setEducationId(getEducationId());
		educationDetailsImpl.setEmployeeID(getEmployeeID());
		educationDetailsImpl.setPgGraduation(getPgGraduation());
		educationDetailsImpl.setPgSpecialization(getPgSpecialization());
		educationDetailsImpl.setPgUniversity(getPgUniversity());
		educationDetailsImpl.setPgPassout(getPgPassout());
		educationDetailsImpl.setPgPercentage(getPgPercentage());
		educationDetailsImpl.setGraduation(getGraduation());
		educationDetailsImpl.setSpecialization(getSpecialization());
		educationDetailsImpl.setUniversity(getUniversity());
		educationDetailsImpl.setPassout(getPassout());
		educationDetailsImpl.setPercentage(getPercentage());
		educationDetailsImpl.setHscSchool(getHscSchool());
		educationDetailsImpl.setHscPassout(getHscPassout());
		educationDetailsImpl.setHscPercentage(getHscPercentage());
		educationDetailsImpl.setSslcSchool(getSslcSchool());
		educationDetailsImpl.setSslcPassout(getSslcPassout());
		educationDetailsImpl.setSslcPercentage(getSslcPercentage());

		educationDetailsImpl.resetOriginalValues();

		return educationDetailsImpl;
	}

	@Override
	public EducationDetails cloneWithOriginalValues() {
		EducationDetailsImpl educationDetailsImpl = new EducationDetailsImpl();

		educationDetailsImpl.setEducationId(
			this.<Long>getColumnOriginalValue("educationId"));
		educationDetailsImpl.setEmployeeID(
			this.<Long>getColumnOriginalValue("employeeID"));
		educationDetailsImpl.setPgGraduation(
			this.<String>getColumnOriginalValue("pgGraduation"));
		educationDetailsImpl.setPgSpecialization(
			this.<String>getColumnOriginalValue("pgSpecialization"));
		educationDetailsImpl.setPgUniversity(
			this.<String>getColumnOriginalValue("pgUniversity"));
		educationDetailsImpl.setPgPassout(
			this.<String>getColumnOriginalValue("pgPassout"));
		educationDetailsImpl.setPgPercentage(
			this.<String>getColumnOriginalValue("pgPercentage"));
		educationDetailsImpl.setGraduation(
			this.<String>getColumnOriginalValue("graduation"));
		educationDetailsImpl.setSpecialization(
			this.<String>getColumnOriginalValue("specialization"));
		educationDetailsImpl.setUniversity(
			this.<String>getColumnOriginalValue("university"));
		educationDetailsImpl.setPassout(
			this.<String>getColumnOriginalValue("passout"));
		educationDetailsImpl.setPercentage(
			this.<String>getColumnOriginalValue("percentage"));
		educationDetailsImpl.setHscSchool(
			this.<String>getColumnOriginalValue("hscSchool"));
		educationDetailsImpl.setHscPassout(
			this.<String>getColumnOriginalValue("hscPassout"));
		educationDetailsImpl.setHscPercentage(
			this.<String>getColumnOriginalValue("hscPercentage"));
		educationDetailsImpl.setSslcSchool(
			this.<String>getColumnOriginalValue("sslcSchool"));
		educationDetailsImpl.setSslcPassout(
			this.<String>getColumnOriginalValue("sslcPassout"));
		educationDetailsImpl.setSslcPercentage(
			this.<String>getColumnOriginalValue("sslcPercentage"));

		return educationDetailsImpl;
	}

	@Override
	public int compareTo(EducationDetails educationDetails) {
		long primaryKey = educationDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EducationDetails)) {
			return false;
		}

		EducationDetails educationDetails = (EducationDetails)object;

		long primaryKey = educationDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EducationDetails> toCacheModel() {
		EducationDetailsCacheModel educationDetailsCacheModel =
			new EducationDetailsCacheModel();

		educationDetailsCacheModel.educationId = getEducationId();

		educationDetailsCacheModel.employeeID = getEmployeeID();

		educationDetailsCacheModel.pgGraduation = getPgGraduation();

		String pgGraduation = educationDetailsCacheModel.pgGraduation;

		if ((pgGraduation != null) && (pgGraduation.length() == 0)) {
			educationDetailsCacheModel.pgGraduation = null;
		}

		educationDetailsCacheModel.pgSpecialization = getPgSpecialization();

		String pgSpecialization = educationDetailsCacheModel.pgSpecialization;

		if ((pgSpecialization != null) && (pgSpecialization.length() == 0)) {
			educationDetailsCacheModel.pgSpecialization = null;
		}

		educationDetailsCacheModel.pgUniversity = getPgUniversity();

		String pgUniversity = educationDetailsCacheModel.pgUniversity;

		if ((pgUniversity != null) && (pgUniversity.length() == 0)) {
			educationDetailsCacheModel.pgUniversity = null;
		}

		educationDetailsCacheModel.pgPassout = getPgPassout();

		String pgPassout = educationDetailsCacheModel.pgPassout;

		if ((pgPassout != null) && (pgPassout.length() == 0)) {
			educationDetailsCacheModel.pgPassout = null;
		}

		educationDetailsCacheModel.pgPercentage = getPgPercentage();

		String pgPercentage = educationDetailsCacheModel.pgPercentage;

		if ((pgPercentage != null) && (pgPercentage.length() == 0)) {
			educationDetailsCacheModel.pgPercentage = null;
		}

		educationDetailsCacheModel.graduation = getGraduation();

		String graduation = educationDetailsCacheModel.graduation;

		if ((graduation != null) && (graduation.length() == 0)) {
			educationDetailsCacheModel.graduation = null;
		}

		educationDetailsCacheModel.specialization = getSpecialization();

		String specialization = educationDetailsCacheModel.specialization;

		if ((specialization != null) && (specialization.length() == 0)) {
			educationDetailsCacheModel.specialization = null;
		}

		educationDetailsCacheModel.university = getUniversity();

		String university = educationDetailsCacheModel.university;

		if ((university != null) && (university.length() == 0)) {
			educationDetailsCacheModel.university = null;
		}

		educationDetailsCacheModel.passout = getPassout();

		String passout = educationDetailsCacheModel.passout;

		if ((passout != null) && (passout.length() == 0)) {
			educationDetailsCacheModel.passout = null;
		}

		educationDetailsCacheModel.percentage = getPercentage();

		String percentage = educationDetailsCacheModel.percentage;

		if ((percentage != null) && (percentage.length() == 0)) {
			educationDetailsCacheModel.percentage = null;
		}

		educationDetailsCacheModel.hscSchool = getHscSchool();

		String hscSchool = educationDetailsCacheModel.hscSchool;

		if ((hscSchool != null) && (hscSchool.length() == 0)) {
			educationDetailsCacheModel.hscSchool = null;
		}

		educationDetailsCacheModel.hscPassout = getHscPassout();

		String hscPassout = educationDetailsCacheModel.hscPassout;

		if ((hscPassout != null) && (hscPassout.length() == 0)) {
			educationDetailsCacheModel.hscPassout = null;
		}

		educationDetailsCacheModel.hscPercentage = getHscPercentage();

		String hscPercentage = educationDetailsCacheModel.hscPercentage;

		if ((hscPercentage != null) && (hscPercentage.length() == 0)) {
			educationDetailsCacheModel.hscPercentage = null;
		}

		educationDetailsCacheModel.sslcSchool = getSslcSchool();

		String sslcSchool = educationDetailsCacheModel.sslcSchool;

		if ((sslcSchool != null) && (sslcSchool.length() == 0)) {
			educationDetailsCacheModel.sslcSchool = null;
		}

		educationDetailsCacheModel.sslcPassout = getSslcPassout();

		String sslcPassout = educationDetailsCacheModel.sslcPassout;

		if ((sslcPassout != null) && (sslcPassout.length() == 0)) {
			educationDetailsCacheModel.sslcPassout = null;
		}

		educationDetailsCacheModel.sslcPercentage = getSslcPercentage();

		String sslcPercentage = educationDetailsCacheModel.sslcPercentage;

		if ((sslcPercentage != null) && (sslcPercentage.length() == 0)) {
			educationDetailsCacheModel.sslcPercentage = null;
		}

		return educationDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EducationDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EducationDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EducationDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(EducationDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EducationDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EducationDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EducationDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EducationDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EducationDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EducationDetails.class, ModelWrapper.class);

	}

	private long _educationId;
	private long _employeeID;
	private String _pgGraduation;
	private String _pgSpecialization;
	private String _pgUniversity;
	private String _pgPassout;
	private String _pgPercentage;
	private String _graduation;
	private String _specialization;
	private String _university;
	private String _passout;
	private String _percentage;
	private String _hscSchool;
	private String _hscPassout;
	private String _hscPercentage;
	private String _sslcSchool;
	private String _sslcPassout;
	private String _sslcPercentage;

	public <T> T getColumnValue(String columnName) {
		Function<EducationDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EducationDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("educationId", _educationId);
		_columnOriginalValues.put("employeeID", _employeeID);
		_columnOriginalValues.put("pgGraduation", _pgGraduation);
		_columnOriginalValues.put("pgSpecialization", _pgSpecialization);
		_columnOriginalValues.put("pgUniversity", _pgUniversity);
		_columnOriginalValues.put("pgPassout", _pgPassout);
		_columnOriginalValues.put("pgPercentage", _pgPercentage);
		_columnOriginalValues.put("graduation", _graduation);
		_columnOriginalValues.put("specialization", _specialization);
		_columnOriginalValues.put("university", _university);
		_columnOriginalValues.put("passout", _passout);
		_columnOriginalValues.put("percentage", _percentage);
		_columnOriginalValues.put("hscSchool", _hscSchool);
		_columnOriginalValues.put("hscPassout", _hscPassout);
		_columnOriginalValues.put("hscPercentage", _hscPercentage);
		_columnOriginalValues.put("sslcSchool", _sslcSchool);
		_columnOriginalValues.put("sslcPassout", _sslcPassout);
		_columnOriginalValues.put("sslcPercentage", _sslcPercentage);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("educationId", 1L);

		columnBitmasks.put("employeeID", 2L);

		columnBitmasks.put("pgGraduation", 4L);

		columnBitmasks.put("pgSpecialization", 8L);

		columnBitmasks.put("pgUniversity", 16L);

		columnBitmasks.put("pgPassout", 32L);

		columnBitmasks.put("pgPercentage", 64L);

		columnBitmasks.put("graduation", 128L);

		columnBitmasks.put("specialization", 256L);

		columnBitmasks.put("university", 512L);

		columnBitmasks.put("passout", 1024L);

		columnBitmasks.put("percentage", 2048L);

		columnBitmasks.put("hscSchool", 4096L);

		columnBitmasks.put("hscPassout", 8192L);

		columnBitmasks.put("hscPercentage", 16384L);

		columnBitmasks.put("sslcSchool", 32768L);

		columnBitmasks.put("sslcPassout", 65536L);

		columnBitmasks.put("sslcPercentage", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EducationDetails _escapedModel;

}