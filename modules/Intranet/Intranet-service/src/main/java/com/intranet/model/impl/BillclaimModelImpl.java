/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.model.impl;

import com.intranet.model.Billclaim;
import com.intranet.model.BillclaimModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Billclaim service. Represents a row in the &quot;INTRANET_Billclaim&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BillclaimModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BillclaimImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BillclaimImpl
 * @generated
 */
public class BillclaimModelImpl
	extends BaseModelImpl<Billclaim> implements BillclaimModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a billclaim model instance should use the <code>Billclaim</code> interface instead.
	 */
	public static final String TABLE_NAME = "INTRANET_Billclaim";

	public static final Object[][] TABLE_COLUMNS = {
		{"fooId", Types.BIGINT}, {"employeeID", Types.VARCHAR},
		{"userName", Types.VARCHAR}, {"claimType", Types.VARCHAR},
		{"claimDate", Types.TIMESTAMP}, {"claimAmount", Types.BIGINT},
		{"attachBill", Types.BIGINT}, {"status", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fooId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("claimAmount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("attachBill", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table INTRANET_Billclaim (fooId LONG not null primary key,employeeID VARCHAR(75) null,userName VARCHAR(75) null,claimType VARCHAR(75) null,claimDate DATE null,claimAmount LONG,attachBill LONG,status VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table INTRANET_Billclaim";

	public static final String ORDER_BY_JPQL = " ORDER BY billclaim.fooId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY INTRANET_Billclaim.fooId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERNAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FOOID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BillclaimModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fooId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFooId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fooId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Billclaim.class;
	}

	@Override
	public String getModelClassName() {
		return Billclaim.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Billclaim, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Billclaim, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Billclaim, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Billclaim)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Billclaim, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Billclaim, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Billclaim)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Billclaim, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Billclaim, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Billclaim, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Billclaim, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Billclaim, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Billclaim, Object>>();
		Map<String, BiConsumer<Billclaim, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Billclaim, ?>>();

		attributeGetterFunctions.put("fooId", Billclaim::getFooId);
		attributeSetterBiConsumers.put(
			"fooId", (BiConsumer<Billclaim, Long>)Billclaim::setFooId);
		attributeGetterFunctions.put("employeeID", Billclaim::getEmployeeID);
		attributeSetterBiConsumers.put(
			"employeeID",
			(BiConsumer<Billclaim, String>)Billclaim::setEmployeeID);
		attributeGetterFunctions.put("userName", Billclaim::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Billclaim, String>)Billclaim::setUserName);
		attributeGetterFunctions.put("claimType", Billclaim::getClaimType);
		attributeSetterBiConsumers.put(
			"claimType",
			(BiConsumer<Billclaim, String>)Billclaim::setClaimType);
		attributeGetterFunctions.put("claimDate", Billclaim::getClaimDate);
		attributeSetterBiConsumers.put(
			"claimDate", (BiConsumer<Billclaim, Date>)Billclaim::setClaimDate);
		attributeGetterFunctions.put("claimAmount", Billclaim::getClaimAmount);
		attributeSetterBiConsumers.put(
			"claimAmount",
			(BiConsumer<Billclaim, Long>)Billclaim::setClaimAmount);
		attributeGetterFunctions.put("attachBill", Billclaim::getAttachBill);
		attributeSetterBiConsumers.put(
			"attachBill",
			(BiConsumer<Billclaim, Long>)Billclaim::setAttachBill);
		attributeGetterFunctions.put("status", Billclaim::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Billclaim, String>)Billclaim::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getFooId() {
		return _fooId;
	}

	@Override
	public void setFooId(long fooId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fooId = fooId;
	}

	@Override
	public String getEmployeeID() {
		if (_employeeID == null) {
			return "";
		}
		else {
			return _employeeID;
		}
	}

	@Override
	public void setEmployeeID(String employeeID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeID = employeeID;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUserName() {
		return getColumnOriginalValue("userName");
	}

	@Override
	public String getClaimType() {
		if (_claimType == null) {
			return "";
		}
		else {
			return _claimType;
		}
	}

	@Override
	public void setClaimType(String claimType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimType = claimType;
	}

	@Override
	public Date getClaimDate() {
		return _claimDate;
	}

	@Override
	public void setClaimDate(Date claimDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimDate = claimDate;
	}

	@Override
	public long getClaimAmount() {
		return _claimAmount;
	}

	@Override
	public void setClaimAmount(long claimAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimAmount = claimAmount;
	}

	@Override
	public long getAttachBill() {
		return _attachBill;
	}

	@Override
	public void setAttachBill(long attachBill) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attachBill = attachBill;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Billclaim.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Billclaim toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Billclaim>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BillclaimImpl billclaimImpl = new BillclaimImpl();

		billclaimImpl.setFooId(getFooId());
		billclaimImpl.setEmployeeID(getEmployeeID());
		billclaimImpl.setUserName(getUserName());
		billclaimImpl.setClaimType(getClaimType());
		billclaimImpl.setClaimDate(getClaimDate());
		billclaimImpl.setClaimAmount(getClaimAmount());
		billclaimImpl.setAttachBill(getAttachBill());
		billclaimImpl.setStatus(getStatus());

		billclaimImpl.resetOriginalValues();

		return billclaimImpl;
	}

	@Override
	public Billclaim cloneWithOriginalValues() {
		BillclaimImpl billclaimImpl = new BillclaimImpl();

		billclaimImpl.setFooId(this.<Long>getColumnOriginalValue("fooId"));
		billclaimImpl.setEmployeeID(
			this.<String>getColumnOriginalValue("employeeID"));
		billclaimImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		billclaimImpl.setClaimType(
			this.<String>getColumnOriginalValue("claimType"));
		billclaimImpl.setClaimDate(
			this.<Date>getColumnOriginalValue("claimDate"));
		billclaimImpl.setClaimAmount(
			this.<Long>getColumnOriginalValue("claimAmount"));
		billclaimImpl.setAttachBill(
			this.<Long>getColumnOriginalValue("attachBill"));
		billclaimImpl.setStatus(this.<String>getColumnOriginalValue("status"));

		return billclaimImpl;
	}

	@Override
	public int compareTo(Billclaim billclaim) {
		long primaryKey = billclaim.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Billclaim)) {
			return false;
		}

		Billclaim billclaim = (Billclaim)object;

		long primaryKey = billclaim.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Billclaim> toCacheModel() {
		BillclaimCacheModel billclaimCacheModel = new BillclaimCacheModel();

		billclaimCacheModel.fooId = getFooId();

		billclaimCacheModel.employeeID = getEmployeeID();

		String employeeID = billclaimCacheModel.employeeID;

		if ((employeeID != null) && (employeeID.length() == 0)) {
			billclaimCacheModel.employeeID = null;
		}

		billclaimCacheModel.userName = getUserName();

		String userName = billclaimCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			billclaimCacheModel.userName = null;
		}

		billclaimCacheModel.claimType = getClaimType();

		String claimType = billclaimCacheModel.claimType;

		if ((claimType != null) && (claimType.length() == 0)) {
			billclaimCacheModel.claimType = null;
		}

		Date claimDate = getClaimDate();

		if (claimDate != null) {
			billclaimCacheModel.claimDate = claimDate.getTime();
		}
		else {
			billclaimCacheModel.claimDate = Long.MIN_VALUE;
		}

		billclaimCacheModel.claimAmount = getClaimAmount();

		billclaimCacheModel.attachBill = getAttachBill();

		billclaimCacheModel.status = getStatus();

		String status = billclaimCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			billclaimCacheModel.status = null;
		}

		return billclaimCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Billclaim, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Billclaim, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Billclaim, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Billclaim)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Billclaim, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Billclaim, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Billclaim, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Billclaim)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Billclaim>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Billclaim.class, ModelWrapper.class);

	}

	private long _fooId;
	private String _employeeID;
	private String _userName;
	private String _claimType;
	private Date _claimDate;
	private long _claimAmount;
	private long _attachBill;
	private String _status;

	public <T> T getColumnValue(String columnName) {
		Function<Billclaim, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Billclaim)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("fooId", _fooId);
		_columnOriginalValues.put("employeeID", _employeeID);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("claimType", _claimType);
		_columnOriginalValues.put("claimDate", _claimDate);
		_columnOriginalValues.put("claimAmount", _claimAmount);
		_columnOriginalValues.put("attachBill", _attachBill);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("fooId", 1L);

		columnBitmasks.put("employeeID", 2L);

		columnBitmasks.put("userName", 4L);

		columnBitmasks.put("claimType", 8L);

		columnBitmasks.put("claimDate", 16L);

		columnBitmasks.put("claimAmount", 32L);

		columnBitmasks.put("attachBill", 64L);

		columnBitmasks.put("status", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Billclaim _escapedModel;

}