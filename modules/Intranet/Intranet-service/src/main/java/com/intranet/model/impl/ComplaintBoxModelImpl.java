/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.model.impl;

import com.intranet.model.ComplaintBox;
import com.intranet.model.ComplaintBoxModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ComplaintBox service. Represents a row in the &quot;INTRANET_ComplaintBox&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ComplaintBoxModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ComplaintBoxImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ComplaintBoxImpl
 * @generated
 */
public class ComplaintBoxModelImpl
	extends BaseModelImpl<ComplaintBox> implements ComplaintBoxModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a complaint box model instance should use the <code>ComplaintBox</code> interface instead.
	 */
	public static final String TABLE_NAME = "INTRANET_ComplaintBox";

	public static final Object[][] TABLE_COLUMNS = {
		{"fooId", Types.BIGINT}, {"employeeId", Types.VARCHAR},
		{"userName", Types.VARCHAR}, {"posistionType", Types.VARCHAR},
		{"submittedDate", Types.TIMESTAMP}, {"question1", Types.INTEGER},
		{"question2", Types.INTEGER}, {"question3", Types.INTEGER},
		{"question4", Types.INTEGER}, {"question5", Types.INTEGER},
		{"question6", Types.INTEGER}, {"question7", Types.INTEGER},
		{"question8", Types.INTEGER}, {"question9", Types.INTEGER},
		{"question10", Types.INTEGER}, {"question11", Types.INTEGER},
		{"question12", Types.INTEGER}, {"question13", Types.INTEGER},
		{"question14", Types.INTEGER}, {"question15", Types.INTEGER},
		{"description1", Types.VARCHAR}, {"description2", Types.VARCHAR},
		{"description3", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fooId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("posistionType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("submittedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("question1", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question2", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question4", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question5", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question6", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question7", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question8", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question9", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question10", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question11", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question12", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question13", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question14", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("question15", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("description1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description3", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table INTRANET_ComplaintBox (fooId LONG not null primary key,employeeId VARCHAR(75) null,userName VARCHAR(75) null,posistionType VARCHAR(75) null,submittedDate DATE null,question1 INTEGER,question2 INTEGER,question3 INTEGER,question4 INTEGER,question5 INTEGER,question6 INTEGER,question7 INTEGER,question8 INTEGER,question9 INTEGER,question10 INTEGER,question11 INTEGER,question12 INTEGER,question13 INTEGER,question14 INTEGER,question15 INTEGER,description1 VARCHAR(75) null,description2 VARCHAR(75) null,description3 VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table INTRANET_ComplaintBox";

	public static final String ORDER_BY_JPQL =
		" ORDER BY complaintBox.fooId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY INTRANET_ComplaintBox.fooId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FOOID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ComplaintBoxModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fooId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFooId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fooId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ComplaintBox.class;
	}

	@Override
	public String getModelClassName() {
		return ComplaintBox.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ComplaintBox, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ComplaintBox, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ComplaintBox, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ComplaintBox)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ComplaintBox, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ComplaintBox, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ComplaintBox)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ComplaintBox, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ComplaintBox, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ComplaintBox, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ComplaintBox, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ComplaintBox, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ComplaintBox, Object>>();
		Map<String, BiConsumer<ComplaintBox, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ComplaintBox, ?>>();

		attributeGetterFunctions.put("fooId", ComplaintBox::getFooId);
		attributeSetterBiConsumers.put(
			"fooId", (BiConsumer<ComplaintBox, Long>)ComplaintBox::setFooId);
		attributeGetterFunctions.put("employeeId", ComplaintBox::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<ComplaintBox, String>)ComplaintBox::setEmployeeId);
		attributeGetterFunctions.put("userName", ComplaintBox::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ComplaintBox, String>)ComplaintBox::setUserName);
		attributeGetterFunctions.put(
			"posistionType", ComplaintBox::getPosistionType);
		attributeSetterBiConsumers.put(
			"posistionType",
			(BiConsumer<ComplaintBox, String>)ComplaintBox::setPosistionType);
		attributeGetterFunctions.put(
			"submittedDate", ComplaintBox::getSubmittedDate);
		attributeSetterBiConsumers.put(
			"submittedDate",
			(BiConsumer<ComplaintBox, Date>)ComplaintBox::setSubmittedDate);
		attributeGetterFunctions.put("question1", ComplaintBox::getQuestion1);
		attributeSetterBiConsumers.put(
			"question1",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion1);
		attributeGetterFunctions.put("question2", ComplaintBox::getQuestion2);
		attributeSetterBiConsumers.put(
			"question2",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion2);
		attributeGetterFunctions.put("question3", ComplaintBox::getQuestion3);
		attributeSetterBiConsumers.put(
			"question3",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion3);
		attributeGetterFunctions.put("question4", ComplaintBox::getQuestion4);
		attributeSetterBiConsumers.put(
			"question4",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion4);
		attributeGetterFunctions.put("question5", ComplaintBox::getQuestion5);
		attributeSetterBiConsumers.put(
			"question5",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion5);
		attributeGetterFunctions.put("question6", ComplaintBox::getQuestion6);
		attributeSetterBiConsumers.put(
			"question6",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion6);
		attributeGetterFunctions.put("question7", ComplaintBox::getQuestion7);
		attributeSetterBiConsumers.put(
			"question7",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion7);
		attributeGetterFunctions.put("question8", ComplaintBox::getQuestion8);
		attributeSetterBiConsumers.put(
			"question8",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion8);
		attributeGetterFunctions.put("question9", ComplaintBox::getQuestion9);
		attributeSetterBiConsumers.put(
			"question9",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion9);
		attributeGetterFunctions.put("question10", ComplaintBox::getQuestion10);
		attributeSetterBiConsumers.put(
			"question10",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion10);
		attributeGetterFunctions.put("question11", ComplaintBox::getQuestion11);
		attributeSetterBiConsumers.put(
			"question11",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion11);
		attributeGetterFunctions.put("question12", ComplaintBox::getQuestion12);
		attributeSetterBiConsumers.put(
			"question12",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion12);
		attributeGetterFunctions.put("question13", ComplaintBox::getQuestion13);
		attributeSetterBiConsumers.put(
			"question13",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion13);
		attributeGetterFunctions.put("question14", ComplaintBox::getQuestion14);
		attributeSetterBiConsumers.put(
			"question14",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion14);
		attributeGetterFunctions.put("question15", ComplaintBox::getQuestion15);
		attributeSetterBiConsumers.put(
			"question15",
			(BiConsumer<ComplaintBox, Integer>)ComplaintBox::setQuestion15);
		attributeGetterFunctions.put(
			"description1", ComplaintBox::getDescription1);
		attributeSetterBiConsumers.put(
			"description1",
			(BiConsumer<ComplaintBox, String>)ComplaintBox::setDescription1);
		attributeGetterFunctions.put(
			"description2", ComplaintBox::getDescription2);
		attributeSetterBiConsumers.put(
			"description2",
			(BiConsumer<ComplaintBox, String>)ComplaintBox::setDescription2);
		attributeGetterFunctions.put(
			"description3", ComplaintBox::getDescription3);
		attributeSetterBiConsumers.put(
			"description3",
			(BiConsumer<ComplaintBox, String>)ComplaintBox::setDescription3);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getFooId() {
		return _fooId;
	}

	@Override
	public void setFooId(long fooId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fooId = fooId;
	}

	@Override
	public String getEmployeeId() {
		if (_employeeId == null) {
			return "";
		}
		else {
			return _employeeId;
		}
	}

	@Override
	public void setEmployeeId(String employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public String getPosistionType() {
		if (_posistionType == null) {
			return "";
		}
		else {
			return _posistionType;
		}
	}

	@Override
	public void setPosistionType(String posistionType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_posistionType = posistionType;
	}

	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_submittedDate = submittedDate;
	}

	@Override
	public int getQuestion1() {
		return _question1;
	}

	@Override
	public void setQuestion1(int question1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question1 = question1;
	}

	@Override
	public int getQuestion2() {
		return _question2;
	}

	@Override
	public void setQuestion2(int question2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question2 = question2;
	}

	@Override
	public int getQuestion3() {
		return _question3;
	}

	@Override
	public void setQuestion3(int question3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question3 = question3;
	}

	@Override
	public int getQuestion4() {
		return _question4;
	}

	@Override
	public void setQuestion4(int question4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question4 = question4;
	}

	@Override
	public int getQuestion5() {
		return _question5;
	}

	@Override
	public void setQuestion5(int question5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question5 = question5;
	}

	@Override
	public int getQuestion6() {
		return _question6;
	}

	@Override
	public void setQuestion6(int question6) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question6 = question6;
	}

	@Override
	public int getQuestion7() {
		return _question7;
	}

	@Override
	public void setQuestion7(int question7) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question7 = question7;
	}

	@Override
	public int getQuestion8() {
		return _question8;
	}

	@Override
	public void setQuestion8(int question8) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question8 = question8;
	}

	@Override
	public int getQuestion9() {
		return _question9;
	}

	@Override
	public void setQuestion9(int question9) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question9 = question9;
	}

	@Override
	public int getQuestion10() {
		return _question10;
	}

	@Override
	public void setQuestion10(int question10) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question10 = question10;
	}

	@Override
	public int getQuestion11() {
		return _question11;
	}

	@Override
	public void setQuestion11(int question11) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question11 = question11;
	}

	@Override
	public int getQuestion12() {
		return _question12;
	}

	@Override
	public void setQuestion12(int question12) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question12 = question12;
	}

	@Override
	public int getQuestion13() {
		return _question13;
	}

	@Override
	public void setQuestion13(int question13) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question13 = question13;
	}

	@Override
	public int getQuestion14() {
		return _question14;
	}

	@Override
	public void setQuestion14(int question14) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question14 = question14;
	}

	@Override
	public int getQuestion15() {
		return _question15;
	}

	@Override
	public void setQuestion15(int question15) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_question15 = question15;
	}

	@Override
	public String getDescription1() {
		if (_description1 == null) {
			return "";
		}
		else {
			return _description1;
		}
	}

	@Override
	public void setDescription1(String description1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description1 = description1;
	}

	@Override
	public String getDescription2() {
		if (_description2 == null) {
			return "";
		}
		else {
			return _description2;
		}
	}

	@Override
	public void setDescription2(String description2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description2 = description2;
	}

	@Override
	public String getDescription3() {
		if (_description3 == null) {
			return "";
		}
		else {
			return _description3;
		}
	}

	@Override
	public void setDescription3(String description3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description3 = description3;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ComplaintBox.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ComplaintBox toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ComplaintBox>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ComplaintBoxImpl complaintBoxImpl = new ComplaintBoxImpl();

		complaintBoxImpl.setFooId(getFooId());
		complaintBoxImpl.setEmployeeId(getEmployeeId());
		complaintBoxImpl.setUserName(getUserName());
		complaintBoxImpl.setPosistionType(getPosistionType());
		complaintBoxImpl.setSubmittedDate(getSubmittedDate());
		complaintBoxImpl.setQuestion1(getQuestion1());
		complaintBoxImpl.setQuestion2(getQuestion2());
		complaintBoxImpl.setQuestion3(getQuestion3());
		complaintBoxImpl.setQuestion4(getQuestion4());
		complaintBoxImpl.setQuestion5(getQuestion5());
		complaintBoxImpl.setQuestion6(getQuestion6());
		complaintBoxImpl.setQuestion7(getQuestion7());
		complaintBoxImpl.setQuestion8(getQuestion8());
		complaintBoxImpl.setQuestion9(getQuestion9());
		complaintBoxImpl.setQuestion10(getQuestion10());
		complaintBoxImpl.setQuestion11(getQuestion11());
		complaintBoxImpl.setQuestion12(getQuestion12());
		complaintBoxImpl.setQuestion13(getQuestion13());
		complaintBoxImpl.setQuestion14(getQuestion14());
		complaintBoxImpl.setQuestion15(getQuestion15());
		complaintBoxImpl.setDescription1(getDescription1());
		complaintBoxImpl.setDescription2(getDescription2());
		complaintBoxImpl.setDescription3(getDescription3());

		complaintBoxImpl.resetOriginalValues();

		return complaintBoxImpl;
	}

	@Override
	public ComplaintBox cloneWithOriginalValues() {
		ComplaintBoxImpl complaintBoxImpl = new ComplaintBoxImpl();

		complaintBoxImpl.setFooId(this.<Long>getColumnOriginalValue("fooId"));
		complaintBoxImpl.setEmployeeId(
			this.<String>getColumnOriginalValue("employeeId"));
		complaintBoxImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		complaintBoxImpl.setPosistionType(
			this.<String>getColumnOriginalValue("posistionType"));
		complaintBoxImpl.setSubmittedDate(
			this.<Date>getColumnOriginalValue("submittedDate"));
		complaintBoxImpl.setQuestion1(
			this.<Integer>getColumnOriginalValue("question1"));
		complaintBoxImpl.setQuestion2(
			this.<Integer>getColumnOriginalValue("question2"));
		complaintBoxImpl.setQuestion3(
			this.<Integer>getColumnOriginalValue("question3"));
		complaintBoxImpl.setQuestion4(
			this.<Integer>getColumnOriginalValue("question4"));
		complaintBoxImpl.setQuestion5(
			this.<Integer>getColumnOriginalValue("question5"));
		complaintBoxImpl.setQuestion6(
			this.<Integer>getColumnOriginalValue("question6"));
		complaintBoxImpl.setQuestion7(
			this.<Integer>getColumnOriginalValue("question7"));
		complaintBoxImpl.setQuestion8(
			this.<Integer>getColumnOriginalValue("question8"));
		complaintBoxImpl.setQuestion9(
			this.<Integer>getColumnOriginalValue("question9"));
		complaintBoxImpl.setQuestion10(
			this.<Integer>getColumnOriginalValue("question10"));
		complaintBoxImpl.setQuestion11(
			this.<Integer>getColumnOriginalValue("question11"));
		complaintBoxImpl.setQuestion12(
			this.<Integer>getColumnOriginalValue("question12"));
		complaintBoxImpl.setQuestion13(
			this.<Integer>getColumnOriginalValue("question13"));
		complaintBoxImpl.setQuestion14(
			this.<Integer>getColumnOriginalValue("question14"));
		complaintBoxImpl.setQuestion15(
			this.<Integer>getColumnOriginalValue("question15"));
		complaintBoxImpl.setDescription1(
			this.<String>getColumnOriginalValue("description1"));
		complaintBoxImpl.setDescription2(
			this.<String>getColumnOriginalValue("description2"));
		complaintBoxImpl.setDescription3(
			this.<String>getColumnOriginalValue("description3"));

		return complaintBoxImpl;
	}

	@Override
	public int compareTo(ComplaintBox complaintBox) {
		long primaryKey = complaintBox.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ComplaintBox)) {
			return false;
		}

		ComplaintBox complaintBox = (ComplaintBox)object;

		long primaryKey = complaintBox.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ComplaintBox> toCacheModel() {
		ComplaintBoxCacheModel complaintBoxCacheModel =
			new ComplaintBoxCacheModel();

		complaintBoxCacheModel.fooId = getFooId();

		complaintBoxCacheModel.employeeId = getEmployeeId();

		String employeeId = complaintBoxCacheModel.employeeId;

		if ((employeeId != null) && (employeeId.length() == 0)) {
			complaintBoxCacheModel.employeeId = null;
		}

		complaintBoxCacheModel.userName = getUserName();

		String userName = complaintBoxCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			complaintBoxCacheModel.userName = null;
		}

		complaintBoxCacheModel.posistionType = getPosistionType();

		String posistionType = complaintBoxCacheModel.posistionType;

		if ((posistionType != null) && (posistionType.length() == 0)) {
			complaintBoxCacheModel.posistionType = null;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			complaintBoxCacheModel.submittedDate = submittedDate.getTime();
		}
		else {
			complaintBoxCacheModel.submittedDate = Long.MIN_VALUE;
		}

		complaintBoxCacheModel.question1 = getQuestion1();

		complaintBoxCacheModel.question2 = getQuestion2();

		complaintBoxCacheModel.question3 = getQuestion3();

		complaintBoxCacheModel.question4 = getQuestion4();

		complaintBoxCacheModel.question5 = getQuestion5();

		complaintBoxCacheModel.question6 = getQuestion6();

		complaintBoxCacheModel.question7 = getQuestion7();

		complaintBoxCacheModel.question8 = getQuestion8();

		complaintBoxCacheModel.question9 = getQuestion9();

		complaintBoxCacheModel.question10 = getQuestion10();

		complaintBoxCacheModel.question11 = getQuestion11();

		complaintBoxCacheModel.question12 = getQuestion12();

		complaintBoxCacheModel.question13 = getQuestion13();

		complaintBoxCacheModel.question14 = getQuestion14();

		complaintBoxCacheModel.question15 = getQuestion15();

		complaintBoxCacheModel.description1 = getDescription1();

		String description1 = complaintBoxCacheModel.description1;

		if ((description1 != null) && (description1.length() == 0)) {
			complaintBoxCacheModel.description1 = null;
		}

		complaintBoxCacheModel.description2 = getDescription2();

		String description2 = complaintBoxCacheModel.description2;

		if ((description2 != null) && (description2.length() == 0)) {
			complaintBoxCacheModel.description2 = null;
		}

		complaintBoxCacheModel.description3 = getDescription3();

		String description3 = complaintBoxCacheModel.description3;

		if ((description3 != null) && (description3.length() == 0)) {
			complaintBoxCacheModel.description3 = null;
		}

		return complaintBoxCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ComplaintBox, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ComplaintBox, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ComplaintBox, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ComplaintBox)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ComplaintBox, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ComplaintBox, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ComplaintBox, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ComplaintBox)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ComplaintBox>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ComplaintBox.class, ModelWrapper.class);

	}

	private long _fooId;
	private String _employeeId;
	private String _userName;
	private String _posistionType;
	private Date _submittedDate;
	private int _question1;
	private int _question2;
	private int _question3;
	private int _question4;
	private int _question5;
	private int _question6;
	private int _question7;
	private int _question8;
	private int _question9;
	private int _question10;
	private int _question11;
	private int _question12;
	private int _question13;
	private int _question14;
	private int _question15;
	private String _description1;
	private String _description2;
	private String _description3;

	public <T> T getColumnValue(String columnName) {
		Function<ComplaintBox, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ComplaintBox)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("fooId", _fooId);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("posistionType", _posistionType);
		_columnOriginalValues.put("submittedDate", _submittedDate);
		_columnOriginalValues.put("question1", _question1);
		_columnOriginalValues.put("question2", _question2);
		_columnOriginalValues.put("question3", _question3);
		_columnOriginalValues.put("question4", _question4);
		_columnOriginalValues.put("question5", _question5);
		_columnOriginalValues.put("question6", _question6);
		_columnOriginalValues.put("question7", _question7);
		_columnOriginalValues.put("question8", _question8);
		_columnOriginalValues.put("question9", _question9);
		_columnOriginalValues.put("question10", _question10);
		_columnOriginalValues.put("question11", _question11);
		_columnOriginalValues.put("question12", _question12);
		_columnOriginalValues.put("question13", _question13);
		_columnOriginalValues.put("question14", _question14);
		_columnOriginalValues.put("question15", _question15);
		_columnOriginalValues.put("description1", _description1);
		_columnOriginalValues.put("description2", _description2);
		_columnOriginalValues.put("description3", _description3);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("fooId", 1L);

		columnBitmasks.put("employeeId", 2L);

		columnBitmasks.put("userName", 4L);

		columnBitmasks.put("posistionType", 8L);

		columnBitmasks.put("submittedDate", 16L);

		columnBitmasks.put("question1", 32L);

		columnBitmasks.put("question2", 64L);

		columnBitmasks.put("question3", 128L);

		columnBitmasks.put("question4", 256L);

		columnBitmasks.put("question5", 512L);

		columnBitmasks.put("question6", 1024L);

		columnBitmasks.put("question7", 2048L);

		columnBitmasks.put("question8", 4096L);

		columnBitmasks.put("question9", 8192L);

		columnBitmasks.put("question10", 16384L);

		columnBitmasks.put("question11", 32768L);

		columnBitmasks.put("question12", 65536L);

		columnBitmasks.put("question13", 131072L);

		columnBitmasks.put("question14", 262144L);

		columnBitmasks.put("question15", 524288L);

		columnBitmasks.put("description1", 1048576L);

		columnBitmasks.put("description2", 2097152L);

		columnBitmasks.put("description3", 4194304L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ComplaintBox _escapedModel;

}