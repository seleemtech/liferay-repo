/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.model.impl;

import com.intranet.model.ExperienceDetails;
import com.intranet.model.ExperienceDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ExperienceDetails service. Represents a row in the &quot;INTRANET_ExperienceDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ExperienceDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExperienceDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExperienceDetailsImpl
 * @generated
 */
public class ExperienceDetailsModelImpl
	extends BaseModelImpl<ExperienceDetails> implements ExperienceDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a experience details model instance should use the <code>ExperienceDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "INTRANET_ExperienceDetails";

	public static final Object[][] TABLE_COLUMNS = {
		{"experienceId", Types.BIGINT}, {"employeeID", Types.BIGINT},
		{"organization", Types.VARCHAR}, {"designation", Types.VARCHAR},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("experienceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table INTRANET_ExperienceDetails (experienceId LONG not null primary key,employeeID LONG,organization VARCHAR(75) null,designation VARCHAR(75) null,startDate DATE null,endDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table INTRANET_ExperienceDetails";

	public static final String ORDER_BY_JPQL =
		" ORDER BY experienceDetails.experienceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY INTRANET_ExperienceDetails.experienceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPERIENCEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ExperienceDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _experienceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExperienceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _experienceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExperienceDetails.class;
	}

	@Override
	public String getModelClassName() {
		return ExperienceDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ExperienceDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ExperienceDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExperienceDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ExperienceDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ExperienceDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ExperienceDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ExperienceDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ExperienceDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ExperienceDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ExperienceDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ExperienceDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ExperienceDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ExperienceDetails, Object>>();
		Map<String, BiConsumer<ExperienceDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ExperienceDetails, ?>>();

		attributeGetterFunctions.put(
			"experienceId", ExperienceDetails::getExperienceId);
		attributeSetterBiConsumers.put(
			"experienceId",
			(BiConsumer<ExperienceDetails, Long>)
				ExperienceDetails::setExperienceId);
		attributeGetterFunctions.put(
			"employeeID", ExperienceDetails::getEmployeeID);
		attributeSetterBiConsumers.put(
			"employeeID",
			(BiConsumer<ExperienceDetails, Long>)
				ExperienceDetails::setEmployeeID);
		attributeGetterFunctions.put(
			"organization", ExperienceDetails::getOrganization);
		attributeSetterBiConsumers.put(
			"organization",
			(BiConsumer<ExperienceDetails, String>)
				ExperienceDetails::setOrganization);
		attributeGetterFunctions.put(
			"designation", ExperienceDetails::getDesignation);
		attributeSetterBiConsumers.put(
			"designation",
			(BiConsumer<ExperienceDetails, String>)
				ExperienceDetails::setDesignation);
		attributeGetterFunctions.put(
			"startDate", ExperienceDetails::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<ExperienceDetails, Date>)
				ExperienceDetails::setStartDate);
		attributeGetterFunctions.put("endDate", ExperienceDetails::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<ExperienceDetails, Date>)ExperienceDetails::setEndDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getExperienceId() {
		return _experienceId;
	}

	@Override
	public void setExperienceId(long experienceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_experienceId = experienceId;
	}

	@Override
	public long getEmployeeID() {
		return _employeeID;
	}

	@Override
	public void setEmployeeID(long employeeID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeID = employeeID;
	}

	@Override
	public String getOrganization() {
		if (_organization == null) {
			return "";
		}
		else {
			return _organization;
		}
	}

	@Override
	public void setOrganization(String organization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organization = organization;
	}

	@Override
	public String getDesignation() {
		if (_designation == null) {
			return "";
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designation = designation;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ExperienceDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExperienceDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ExperienceDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExperienceDetailsImpl experienceDetailsImpl =
			new ExperienceDetailsImpl();

		experienceDetailsImpl.setExperienceId(getExperienceId());
		experienceDetailsImpl.setEmployeeID(getEmployeeID());
		experienceDetailsImpl.setOrganization(getOrganization());
		experienceDetailsImpl.setDesignation(getDesignation());
		experienceDetailsImpl.setStartDate(getStartDate());
		experienceDetailsImpl.setEndDate(getEndDate());

		experienceDetailsImpl.resetOriginalValues();

		return experienceDetailsImpl;
	}

	@Override
	public ExperienceDetails cloneWithOriginalValues() {
		ExperienceDetailsImpl experienceDetailsImpl =
			new ExperienceDetailsImpl();

		experienceDetailsImpl.setExperienceId(
			this.<Long>getColumnOriginalValue("experienceId"));
		experienceDetailsImpl.setEmployeeID(
			this.<Long>getColumnOriginalValue("employeeID"));
		experienceDetailsImpl.setOrganization(
			this.<String>getColumnOriginalValue("organization"));
		experienceDetailsImpl.setDesignation(
			this.<String>getColumnOriginalValue("designation"));
		experienceDetailsImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		experienceDetailsImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));

		return experienceDetailsImpl;
	}

	@Override
	public int compareTo(ExperienceDetails experienceDetails) {
		long primaryKey = experienceDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ExperienceDetails)) {
			return false;
		}

		ExperienceDetails experienceDetails = (ExperienceDetails)object;

		long primaryKey = experienceDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ExperienceDetails> toCacheModel() {
		ExperienceDetailsCacheModel experienceDetailsCacheModel =
			new ExperienceDetailsCacheModel();

		experienceDetailsCacheModel.experienceId = getExperienceId();

		experienceDetailsCacheModel.employeeID = getEmployeeID();

		experienceDetailsCacheModel.organization = getOrganization();

		String organization = experienceDetailsCacheModel.organization;

		if ((organization != null) && (organization.length() == 0)) {
			experienceDetailsCacheModel.organization = null;
		}

		experienceDetailsCacheModel.designation = getDesignation();

		String designation = experienceDetailsCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			experienceDetailsCacheModel.designation = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			experienceDetailsCacheModel.startDate = startDate.getTime();
		}
		else {
			experienceDetailsCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			experienceDetailsCacheModel.endDate = endDate.getTime();
		}
		else {
			experienceDetailsCacheModel.endDate = Long.MIN_VALUE;
		}

		return experienceDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ExperienceDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ExperienceDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExperienceDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ExperienceDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ExperienceDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ExperienceDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExperienceDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ExperienceDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ExperienceDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ExperienceDetails.class, ModelWrapper.class);

	}

	private long _experienceId;
	private long _employeeID;
	private String _organization;
	private String _designation;
	private Date _startDate;
	private Date _endDate;

	public <T> T getColumnValue(String columnName) {
		Function<ExperienceDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ExperienceDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("experienceId", _experienceId);
		_columnOriginalValues.put("employeeID", _employeeID);
		_columnOriginalValues.put("organization", _organization);
		_columnOriginalValues.put("designation", _designation);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("experienceId", 1L);

		columnBitmasks.put("employeeID", 2L);

		columnBitmasks.put("organization", 4L);

		columnBitmasks.put("designation", 8L);

		columnBitmasks.put("startDate", 16L);

		columnBitmasks.put("endDate", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ExperienceDetails _escapedModel;

}