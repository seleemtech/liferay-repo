/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package api.master.slayer.model.impl;

import api.master.slayer.model.MasterMetaData;
import api.master.slayer.model.MasterMetaDataModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MasterMetaData service. Represents a row in the &quot;API_MasterMetaData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MasterMetaDataModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MasterMetaDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MasterMetaDataImpl
 * @generated
 */
@JSON(strict = true)
public class MasterMetaDataModelImpl
	extends BaseModelImpl<MasterMetaData> implements MasterMetaDataModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a master meta data model instance should use the <code>MasterMetaData</code> interface instead.
	 */
	public static final String TABLE_NAME = "API_MasterMetaData";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"mmdId", Types.BIGINT},
		{"masterUrlId", Types.BIGINT}, {"appSubUrl", Types.VARCHAR},
		{"httpMethod", Types.VARCHAR}, {"httpMethodName", Types.VARCHAR},
		{"userId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mmdId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("masterUrlId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appSubUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("httpMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("httpMethodName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table API_MasterMetaData (uuid_ VARCHAR(75) null,mmdId LONG not null primary key,masterUrlId LONG,appSubUrl VARCHAR(75) null,httpMethod VARCHAR(75) null,httpMethodName VARCHAR(75) null,userId LONG,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table API_MasterMetaData";

	public static final String ORDER_BY_JPQL =
		" ORDER BY masterMetaData.mmdId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY API_MasterMetaData.mmdId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MMDID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MasterMetaDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mmdId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMmdId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mmdId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MasterMetaData.class;
	}

	@Override
	public String getModelClassName() {
		return MasterMetaData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MasterMetaData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MasterMetaData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MasterMetaData, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MasterMetaData)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MasterMetaData, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MasterMetaData, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MasterMetaData)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MasterMetaData, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MasterMetaData, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<MasterMetaData, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<MasterMetaData, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<MasterMetaData, Object>>();

			attributeGetterFunctions.put("uuid", MasterMetaData::getUuid);
			attributeGetterFunctions.put("mmdId", MasterMetaData::getMmdId);
			attributeGetterFunctions.put(
				"masterUrlId", MasterMetaData::getMasterUrlId);
			attributeGetterFunctions.put(
				"appSubUrl", MasterMetaData::getAppSubUrl);
			attributeGetterFunctions.put(
				"httpMethod", MasterMetaData::getHttpMethod);
			attributeGetterFunctions.put(
				"httpMethodName", MasterMetaData::getHttpMethodName);
			attributeGetterFunctions.put("userId", MasterMetaData::getUserId);
			attributeGetterFunctions.put("groupId", MasterMetaData::getGroupId);
			attributeGetterFunctions.put(
				"companyId", MasterMetaData::getCompanyId);
			attributeGetterFunctions.put(
				"createDate", MasterMetaData::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", MasterMetaData::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<MasterMetaData, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<MasterMetaData, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<MasterMetaData, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<MasterMetaData, String>)MasterMetaData::setUuid);
			attributeSetterBiConsumers.put(
				"mmdId",
				(BiConsumer<MasterMetaData, Long>)MasterMetaData::setMmdId);
			attributeSetterBiConsumers.put(
				"masterUrlId",
				(BiConsumer<MasterMetaData, Long>)
					MasterMetaData::setMasterUrlId);
			attributeSetterBiConsumers.put(
				"appSubUrl",
				(BiConsumer<MasterMetaData, String>)
					MasterMetaData::setAppSubUrl);
			attributeSetterBiConsumers.put(
				"httpMethod",
				(BiConsumer<MasterMetaData, String>)
					MasterMetaData::setHttpMethod);
			attributeSetterBiConsumers.put(
				"httpMethodName",
				(BiConsumer<MasterMetaData, String>)
					MasterMetaData::setHttpMethodName);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<MasterMetaData, Long>)MasterMetaData::setUserId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<MasterMetaData, Long>)MasterMetaData::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<MasterMetaData, Long>)MasterMetaData::setCompanyId);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<MasterMetaData, Date>)
					MasterMetaData::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<MasterMetaData, Date>)
					MasterMetaData::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getMmdId() {
		return _mmdId;
	}

	@Override
	public void setMmdId(long mmdId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mmdId = mmdId;
	}

	@JSON
	@Override
	public long getMasterUrlId() {
		return _masterUrlId;
	}

	@Override
	public void setMasterUrlId(long masterUrlId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_masterUrlId = masterUrlId;
	}

	@JSON
	@Override
	public String getAppSubUrl() {
		if (_appSubUrl == null) {
			return "";
		}
		else {
			return _appSubUrl;
		}
	}

	@Override
	public void setAppSubUrl(String appSubUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appSubUrl = appSubUrl;
	}

	@JSON
	@Override
	public String getHttpMethod() {
		if (_httpMethod == null) {
			return "";
		}
		else {
			return _httpMethod;
		}
	}

	@Override
	public void setHttpMethod(String httpMethod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_httpMethod = httpMethod;
	}

	@JSON
	@Override
	public String getHttpMethodName() {
		if (_httpMethodName == null) {
			return "";
		}
		else {
			return _httpMethodName;
		}
	}

	@Override
	public void setHttpMethodName(String httpMethodName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_httpMethodName = httpMethodName;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(MasterMetaData.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MasterMetaData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MasterMetaData toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MasterMetaData>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MasterMetaDataImpl masterMetaDataImpl = new MasterMetaDataImpl();

		masterMetaDataImpl.setUuid(getUuid());
		masterMetaDataImpl.setMmdId(getMmdId());
		masterMetaDataImpl.setMasterUrlId(getMasterUrlId());
		masterMetaDataImpl.setAppSubUrl(getAppSubUrl());
		masterMetaDataImpl.setHttpMethod(getHttpMethod());
		masterMetaDataImpl.setHttpMethodName(getHttpMethodName());
		masterMetaDataImpl.setUserId(getUserId());
		masterMetaDataImpl.setGroupId(getGroupId());
		masterMetaDataImpl.setCompanyId(getCompanyId());
		masterMetaDataImpl.setCreateDate(getCreateDate());
		masterMetaDataImpl.setModifiedDate(getModifiedDate());

		masterMetaDataImpl.resetOriginalValues();

		return masterMetaDataImpl;
	}

	@Override
	public MasterMetaData cloneWithOriginalValues() {
		MasterMetaDataImpl masterMetaDataImpl = new MasterMetaDataImpl();

		masterMetaDataImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		masterMetaDataImpl.setMmdId(this.<Long>getColumnOriginalValue("mmdId"));
		masterMetaDataImpl.setMasterUrlId(
			this.<Long>getColumnOriginalValue("masterUrlId"));
		masterMetaDataImpl.setAppSubUrl(
			this.<String>getColumnOriginalValue("appSubUrl"));
		masterMetaDataImpl.setHttpMethod(
			this.<String>getColumnOriginalValue("httpMethod"));
		masterMetaDataImpl.setHttpMethodName(
			this.<String>getColumnOriginalValue("httpMethodName"));
		masterMetaDataImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		masterMetaDataImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		masterMetaDataImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		masterMetaDataImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		masterMetaDataImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return masterMetaDataImpl;
	}

	@Override
	public int compareTo(MasterMetaData masterMetaData) {
		long primaryKey = masterMetaData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MasterMetaData)) {
			return false;
		}

		MasterMetaData masterMetaData = (MasterMetaData)object;

		long primaryKey = masterMetaData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MasterMetaData> toCacheModel() {
		MasterMetaDataCacheModel masterMetaDataCacheModel =
			new MasterMetaDataCacheModel();

		masterMetaDataCacheModel.uuid = getUuid();

		String uuid = masterMetaDataCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			masterMetaDataCacheModel.uuid = null;
		}

		masterMetaDataCacheModel.mmdId = getMmdId();

		masterMetaDataCacheModel.masterUrlId = getMasterUrlId();

		masterMetaDataCacheModel.appSubUrl = getAppSubUrl();

		String appSubUrl = masterMetaDataCacheModel.appSubUrl;

		if ((appSubUrl != null) && (appSubUrl.length() == 0)) {
			masterMetaDataCacheModel.appSubUrl = null;
		}

		masterMetaDataCacheModel.httpMethod = getHttpMethod();

		String httpMethod = masterMetaDataCacheModel.httpMethod;

		if ((httpMethod != null) && (httpMethod.length() == 0)) {
			masterMetaDataCacheModel.httpMethod = null;
		}

		masterMetaDataCacheModel.httpMethodName = getHttpMethodName();

		String httpMethodName = masterMetaDataCacheModel.httpMethodName;

		if ((httpMethodName != null) && (httpMethodName.length() == 0)) {
			masterMetaDataCacheModel.httpMethodName = null;
		}

		masterMetaDataCacheModel.userId = getUserId();

		masterMetaDataCacheModel.groupId = getGroupId();

		masterMetaDataCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			masterMetaDataCacheModel.createDate = createDate.getTime();
		}
		else {
			masterMetaDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			masterMetaDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			masterMetaDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return masterMetaDataCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MasterMetaData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MasterMetaData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MasterMetaData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((MasterMetaData)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MasterMetaData>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MasterMetaData.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _mmdId;
	private long _masterUrlId;
	private String _appSubUrl;
	private String _httpMethod;
	private String _httpMethodName;
	private long _userId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<MasterMetaData, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MasterMetaData)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("mmdId", _mmdId);
		_columnOriginalValues.put("masterUrlId", _masterUrlId);
		_columnOriginalValues.put("appSubUrl", _appSubUrl);
		_columnOriginalValues.put("httpMethod", _httpMethod);
		_columnOriginalValues.put("httpMethodName", _httpMethodName);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("mmdId", 2L);

		columnBitmasks.put("masterUrlId", 4L);

		columnBitmasks.put("appSubUrl", 8L);

		columnBitmasks.put("httpMethod", 16L);

		columnBitmasks.put("httpMethodName", 32L);

		columnBitmasks.put("userId", 64L);

		columnBitmasks.put("groupId", 128L);

		columnBitmasks.put("companyId", 256L);

		columnBitmasks.put("createDate", 512L);

		columnBitmasks.put("modifiedDate", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MasterMetaData _escapedModel;

}