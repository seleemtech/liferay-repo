/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fitness.club.service.model.impl;

import com.fitness.club.service.model.Fitness;
import com.fitness.club.service.model.FitnessModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Fitness service. Represents a row in the &quot;FOO_Fitness&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FitnessModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FitnessImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FitnessImpl
 * @generated
 */
@JSON(strict = true)
public class FitnessModelImpl
	extends BaseModelImpl<Fitness> implements FitnessModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fitness model instance should use the <code>Fitness</code> interface instead.
	 */
	public static final String TABLE_NAME = "FOO_Fitness";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"trainerId", Types.BIGINT},
		{"trainerName", Types.VARCHAR}, {"gender", Types.VARCHAR},
		{"age", Types.BIGINT}, {"experiance", Types.BIGINT},
		{"Type", Types.VARCHAR}, {"conNumber", Types.BIGINT},
		{"image", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trainerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("age", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("experiance", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("conNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("image", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FOO_Fitness (uuid_ VARCHAR(75) null,trainerId LONG not null primary key,trainerName VARCHAR(75) null,gender VARCHAR(75) null,age LONG,experiance LONG,Type VARCHAR(75) null,conNumber LONG,image LONG)";

	public static final String TABLE_SQL_DROP = "drop table FOO_Fitness";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fitness.trainerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FOO_Fitness.trainerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRAINERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FitnessModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _trainerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTrainerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _trainerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Fitness.class;
	}

	@Override
	public String getModelClassName() {
		return Fitness.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Fitness, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Fitness, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Fitness, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Fitness)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Fitness, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Fitness, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Fitness)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Fitness, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Fitness, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Fitness, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Fitness, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Fitness, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Fitness, Object>>();
		Map<String, BiConsumer<Fitness, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Fitness, ?>>();

		attributeGetterFunctions.put("uuid", Fitness::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Fitness, String>)Fitness::setUuid);
		attributeGetterFunctions.put("trainerId", Fitness::getTrainerId);
		attributeSetterBiConsumers.put(
			"trainerId", (BiConsumer<Fitness, Long>)Fitness::setTrainerId);
		attributeGetterFunctions.put("trainerName", Fitness::getTrainerName);
		attributeSetterBiConsumers.put(
			"trainerName",
			(BiConsumer<Fitness, String>)Fitness::setTrainerName);
		attributeGetterFunctions.put("gender", Fitness::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<Fitness, String>)Fitness::setGender);
		attributeGetterFunctions.put("age", Fitness::getAge);
		attributeSetterBiConsumers.put(
			"age", (BiConsumer<Fitness, Long>)Fitness::setAge);
		attributeGetterFunctions.put("experiance", Fitness::getExperiance);
		attributeSetterBiConsumers.put(
			"experiance", (BiConsumer<Fitness, Long>)Fitness::setExperiance);
		attributeGetterFunctions.put("Type", Fitness::getType);
		attributeSetterBiConsumers.put(
			"Type", (BiConsumer<Fitness, String>)Fitness::setType);
		attributeGetterFunctions.put("conNumber", Fitness::getConNumber);
		attributeSetterBiConsumers.put(
			"conNumber", (BiConsumer<Fitness, Long>)Fitness::setConNumber);
		attributeGetterFunctions.put("image", Fitness::getImage);
		attributeSetterBiConsumers.put(
			"image", (BiConsumer<Fitness, Long>)Fitness::setImage);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getTrainerId() {
		return _trainerId;
	}

	@Override
	public void setTrainerId(long trainerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainerId = trainerId;
	}

	@JSON
	@Override
	public String getTrainerName() {
		if (_trainerName == null) {
			return "";
		}
		else {
			return _trainerName;
		}
	}

	@Override
	public void setTrainerName(String trainerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainerName = trainerName;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public long getAge() {
		return _age;
	}

	@Override
	public void setAge(long age) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_age = age;
	}

	@JSON
	@Override
	public long getExperiance() {
		return _experiance;
	}

	@Override
	public void setExperiance(long experiance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_experiance = experiance;
	}

	@JSON
	@Override
	public String getType() {
		if (_Type == null) {
			return "";
		}
		else {
			return _Type;
		}
	}

	@Override
	public void setType(String Type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Type = Type;
	}

	@JSON
	@Override
	public long getConNumber() {
		return _conNumber;
	}

	@Override
	public void setConNumber(long conNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_conNumber = conNumber;
	}

	@JSON
	@Override
	public long getImage() {
		return _image;
	}

	@Override
	public void setImage(long image) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_image = image;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Fitness.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Fitness toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Fitness>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FitnessImpl fitnessImpl = new FitnessImpl();

		fitnessImpl.setUuid(getUuid());
		fitnessImpl.setTrainerId(getTrainerId());
		fitnessImpl.setTrainerName(getTrainerName());
		fitnessImpl.setGender(getGender());
		fitnessImpl.setAge(getAge());
		fitnessImpl.setExperiance(getExperiance());
		fitnessImpl.setType(getType());
		fitnessImpl.setConNumber(getConNumber());
		fitnessImpl.setImage(getImage());

		fitnessImpl.resetOriginalValues();

		return fitnessImpl;
	}

	@Override
	public Fitness cloneWithOriginalValues() {
		FitnessImpl fitnessImpl = new FitnessImpl();

		fitnessImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		fitnessImpl.setTrainerId(
			this.<Long>getColumnOriginalValue("trainerId"));
		fitnessImpl.setTrainerName(
			this.<String>getColumnOriginalValue("trainerName"));
		fitnessImpl.setGender(this.<String>getColumnOriginalValue("gender"));
		fitnessImpl.setAge(this.<Long>getColumnOriginalValue("age"));
		fitnessImpl.setExperiance(
			this.<Long>getColumnOriginalValue("experiance"));
		fitnessImpl.setType(this.<String>getColumnOriginalValue("Type"));
		fitnessImpl.setConNumber(
			this.<Long>getColumnOriginalValue("conNumber"));
		fitnessImpl.setImage(this.<Long>getColumnOriginalValue("image"));

		return fitnessImpl;
	}

	@Override
	public int compareTo(Fitness fitness) {
		long primaryKey = fitness.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Fitness)) {
			return false;
		}

		Fitness fitness = (Fitness)object;

		long primaryKey = fitness.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Fitness> toCacheModel() {
		FitnessCacheModel fitnessCacheModel = new FitnessCacheModel();

		fitnessCacheModel.uuid = getUuid();

		String uuid = fitnessCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fitnessCacheModel.uuid = null;
		}

		fitnessCacheModel.trainerId = getTrainerId();

		fitnessCacheModel.trainerName = getTrainerName();

		String trainerName = fitnessCacheModel.trainerName;

		if ((trainerName != null) && (trainerName.length() == 0)) {
			fitnessCacheModel.trainerName = null;
		}

		fitnessCacheModel.gender = getGender();

		String gender = fitnessCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			fitnessCacheModel.gender = null;
		}

		fitnessCacheModel.age = getAge();

		fitnessCacheModel.experiance = getExperiance();

		fitnessCacheModel.Type = getType();

		String Type = fitnessCacheModel.Type;

		if ((Type != null) && (Type.length() == 0)) {
			fitnessCacheModel.Type = null;
		}

		fitnessCacheModel.conNumber = getConNumber();

		fitnessCacheModel.image = getImage();

		return fitnessCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Fitness, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Fitness, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Fitness, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Fitness)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Fitness, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Fitness, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Fitness, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Fitness)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Fitness>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Fitness.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _trainerId;
	private String _trainerName;
	private String _gender;
	private long _age;
	private long _experiance;
	private String _Type;
	private long _conNumber;
	private long _image;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Fitness, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Fitness)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("trainerId", _trainerId);
		_columnOriginalValues.put("trainerName", _trainerName);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("age", _age);
		_columnOriginalValues.put("experiance", _experiance);
		_columnOriginalValues.put("Type", _Type);
		_columnOriginalValues.put("conNumber", _conNumber);
		_columnOriginalValues.put("image", _image);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("trainerId", 2L);

		columnBitmasks.put("trainerName", 4L);

		columnBitmasks.put("gender", 8L);

		columnBitmasks.put("age", 16L);

		columnBitmasks.put("experiance", 32L);

		columnBitmasks.put("Type", 64L);

		columnBitmasks.put("conNumber", 128L);

		columnBitmasks.put("image", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Fitness _escapedModel;

}