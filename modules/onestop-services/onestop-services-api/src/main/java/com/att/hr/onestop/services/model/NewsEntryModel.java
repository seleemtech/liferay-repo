/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.att.hr.onestop.services.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the NewsEntry service. Represents a row in the &quot;HROS_NewsEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.att.hr.onestop.services.model.impl.NewsEntryModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.att.hr.onestop.services.model.impl.NewsEntryImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewsEntry
 * @generated
 */
@ProviderType
public interface NewsEntryModel
	extends BaseModel<NewsEntry>, ShardedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a news entry model instance should use the {@link NewsEntry} interface instead.
	 */

	/**
	 * Returns the primary key of this news entry.
	 *
	 * @return the primary key of this news entry
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this news entry.
	 *
	 * @param primaryKey the primary key of this news entry
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the news entry ID of this news entry.
	 *
	 * @return the news entry ID of this news entry
	 */
	public long getNewsEntryId();

	/**
	 * Sets the news entry ID of this news entry.
	 *
	 * @param newsEntryId the news entry ID of this news entry
	 */
	public void setNewsEntryId(long newsEntryId);

	/**
	 * Returns the group ID of this news entry.
	 *
	 * @return the group ID of this news entry
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this news entry.
	 *
	 * @param groupId the group ID of this news entry
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this news entry.
	 *
	 * @return the company ID of this news entry
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this news entry.
	 *
	 * @param companyId the company ID of this news entry
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this news entry.
	 *
	 * @return the user ID of this news entry
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this news entry.
	 *
	 * @param userId the user ID of this news entry
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this news entry.
	 *
	 * @return the user uuid of this news entry
	 */
	public String getUserUuid();

	/**
	 * Sets the user uuid of this news entry.
	 *
	 * @param userUuid the user uuid of this news entry
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the create date of this news entry.
	 *
	 * @return the create date of this news entry
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this news entry.
	 *
	 * @param createDate the create date of this news entry
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this news entry.
	 *
	 * @return the modified date of this news entry
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this news entry.
	 *
	 * @param modifiedDate the modified date of this news entry
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the news title of this news entry.
	 *
	 * @return the news title of this news entry
	 */
	@AutoEscape
	public String getNewsTitle();

	/**
	 * Sets the news title of this news entry.
	 *
	 * @param newsTitle the news title of this news entry
	 */
	public void setNewsTitle(String newsTitle);

	/**
	 * Returns the news summary of this news entry.
	 *
	 * @return the news summary of this news entry
	 */
	@AutoEscape
	public String getNewsSummary();

	/**
	 * Sets the news summary of this news entry.
	 *
	 * @param newsSummary the news summary of this news entry
	 */
	public void setNewsSummary(String newsSummary);

	/**
	 * Returns the news content of this news entry.
	 *
	 * @return the news content of this news entry
	 */
	@AutoEscape
	public String getNewsContent();

	/**
	 * Sets the news content of this news entry.
	 *
	 * @param newsContent the news content of this news entry
	 */
	public void setNewsContent(String newsContent);

	/**
	 * Returns the news image ID of this news entry.
	 *
	 * @return the news image ID of this news entry
	 */
	public long getNewsImageId();

	/**
	 * Sets the news image ID of this news entry.
	 *
	 * @param newsImageId the news image ID of this news entry
	 */
	public void setNewsImageId(long newsImageId);

	/**
	 * Returns the news scope ID of this news entry.
	 *
	 * @return the news scope ID of this news entry
	 */
	public long getNewsScopeId();

	/**
	 * Sets the news scope ID of this news entry.
	 *
	 * @param newsScopeId the news scope ID of this news entry
	 */
	public void setNewsScopeId(long newsScopeId);

	/**
	 * Returns the archive of this news entry.
	 *
	 * @return the archive of this news entry
	 */
	public boolean getArchive();

	/**
	 * Returns <code>true</code> if this news entry is archive.
	 *
	 * @return <code>true</code> if this news entry is archive; <code>false</code> otherwise
	 */
	public boolean isArchive();

	/**
	 * Sets whether this news entry is archive.
	 *
	 * @param archive the archive of this news entry
	 */
	public void setArchive(boolean archive);

	/**
	 * Returns the allowed in dash board of this news entry.
	 *
	 * @return the allowed in dash board of this news entry
	 */
	public boolean getAllowedInDashBoard();

	/**
	 * Returns <code>true</code> if this news entry is allowed in dash board.
	 *
	 * @return <code>true</code> if this news entry is allowed in dash board; <code>false</code> otherwise
	 */
	public boolean isAllowedInDashBoard();

	/**
	 * Sets whether this news entry is allowed in dash board.
	 *
	 * @param allowedInDashBoard the allowed in dash board of this news entry
	 */
	public void setAllowedInDashBoard(boolean allowedInDashBoard);

	/**
	 * Returns the expire date of this news entry.
	 *
	 * @return the expire date of this news entry
	 */
	public Date getExpireDate();

	/**
	 * Sets the expire date of this news entry.
	 *
	 * @param expireDate the expire date of this news entry
	 */
	public void setExpireDate(Date expireDate);

	/**
	 * Returns the to email of this news entry.
	 *
	 * @return the to email of this news entry
	 */
	@AutoEscape
	public String getToEmail();

	/**
	 * Sets the to email of this news entry.
	 *
	 * @param ToEmail the to email of this news entry
	 */
	public void setToEmail(String ToEmail);

	/**
	 * Returns the status of this news entry.
	 *
	 * @return the status of this news entry
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this news entry.
	 *
	 * @param status the status of this news entry
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this news entry.
	 *
	 * @return the status by user ID of this news entry
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this news entry.
	 *
	 * @param statusByUserId the status by user ID of this news entry
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this news entry.
	 *
	 * @return the status by user uuid of this news entry
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this news entry.
	 *
	 * @param statusByUserUuid the status by user uuid of this news entry
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this news entry.
	 *
	 * @return the status by user name of this news entry
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this news entry.
	 *
	 * @param statusByUserName the status by user name of this news entry
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this news entry.
	 *
	 * @return the status date of this news entry
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this news entry.
	 *
	 * @param statusDate the status date of this news entry
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns <code>true</code> if this news entry is approved.
	 *
	 * @return <code>true</code> if this news entry is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this news entry is denied.
	 *
	 * @return <code>true</code> if this news entry is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this news entry is a draft.
	 *
	 * @return <code>true</code> if this news entry is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this news entry is expired.
	 *
	 * @return <code>true</code> if this news entry is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this news entry is inactive.
	 *
	 * @return <code>true</code> if this news entry is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this news entry is incomplete.
	 *
	 * @return <code>true</code> if this news entry is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this news entry is pending.
	 *
	 * @return <code>true</code> if this news entry is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this news entry is scheduled.
	 *
	 * @return <code>true</code> if this news entry is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public NewsEntry cloneWithOriginalValues();

}