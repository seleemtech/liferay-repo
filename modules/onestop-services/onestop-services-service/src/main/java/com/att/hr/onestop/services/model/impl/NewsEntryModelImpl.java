/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.att.hr.onestop.services.model.impl;

import com.att.hr.onestop.services.model.NewsEntry;
import com.att.hr.onestop.services.model.NewsEntryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NewsEntry service. Represents a row in the &quot;HROS_NewsEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NewsEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewsEntryImpl
 * @generated
 */
@JSON(strict = true)
public class NewsEntryModelImpl
	extends BaseModelImpl<NewsEntry> implements NewsEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a news entry model instance should use the <code>NewsEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "HROS_NewsEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"NEWS_ENTRY_ID", Types.BIGINT}, {"GROUP_ID", Types.BIGINT},
		{"COMPANY_ID", Types.BIGINT}, {"USER_ID", Types.BIGINT},
		{"CREATE_DATE", Types.TIMESTAMP}, {"MODIFIED_DATE", Types.TIMESTAMP},
		{"NEWS_TITLE", Types.VARCHAR}, {"NEWS_SUMMARY", Types.VARCHAR},
		{"NEWS_CONTENT", Types.VARCHAR}, {"NEWS_IMAGE_ID", Types.BIGINT},
		{"NEWS_SCOPE_ID", Types.BIGINT}, {"ARCHIVE", Types.BOOLEAN},
		{"ALLOWED_IN_DASHBOARD", Types.BOOLEAN},
		{"EXPIRE_DATE", Types.TIMESTAMP}, {"TO_NEWS_EMAIL", Types.VARCHAR},
		{"STATUS", Types.INTEGER}, {"STATUS_BY_USER_ID", Types.BIGINT},
		{"STATUS_BY_USER_NAME", Types.VARCHAR}, {"STATUS_DATE", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("NEWS_ENTRY_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("GROUP_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("COMPANY_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("USER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CREATE_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MODIFIED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NEWS_TITLE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NEWS_SUMMARY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NEWS_CONTENT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NEWS_IMAGE_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NEWS_SCOPE_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ARCHIVE", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("ALLOWED_IN_DASHBOARD", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("EXPIRE_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("TO_NEWS_EMAIL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("STATUS_BY_USER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("STATUS_BY_USER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("STATUS_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table HROS_NewsEntry (NEWS_ENTRY_ID LONG not null primary key,GROUP_ID LONG,COMPANY_ID LONG,USER_ID LONG,CREATE_DATE DATE null,MODIFIED_DATE DATE null,NEWS_TITLE VARCHAR(75) null,NEWS_SUMMARY VARCHAR(75) null,NEWS_CONTENT VARCHAR(75) null,NEWS_IMAGE_ID LONG,NEWS_SCOPE_ID LONG,ARCHIVE BOOLEAN,ALLOWED_IN_DASHBOARD BOOLEAN,EXPIRE_DATE DATE null,TO_NEWS_EMAIL VARCHAR(75) null,STATUS INTEGER,STATUS_BY_USER_ID LONG,STATUS_BY_USER_NAME VARCHAR(75) null,STATUS_DATE DATE null)";

	public static final String TABLE_SQL_DROP = "drop table HROS_NewsEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY newsEntry.newsEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY HROS_NewsEntry.NEWS_ENTRY_ID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NEWSSCOPEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NEWSENTRYID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NewsEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _newsEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNewsEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _newsEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NewsEntry.class;
	}

	@Override
	public String getModelClassName() {
		return NewsEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NewsEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NewsEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewsEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((NewsEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NewsEntry, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NewsEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NewsEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NewsEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NewsEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<NewsEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<NewsEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<NewsEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<NewsEntry, Object>>();
		Map<String, BiConsumer<NewsEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<NewsEntry, ?>>();

		attributeGetterFunctions.put("newsEntryId", NewsEntry::getNewsEntryId);
		attributeSetterBiConsumers.put(
			"newsEntryId",
			(BiConsumer<NewsEntry, Long>)NewsEntry::setNewsEntryId);
		attributeGetterFunctions.put("groupId", NewsEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<NewsEntry, Long>)NewsEntry::setGroupId);
		attributeGetterFunctions.put("companyId", NewsEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<NewsEntry, Long>)NewsEntry::setCompanyId);
		attributeGetterFunctions.put("userId", NewsEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<NewsEntry, Long>)NewsEntry::setUserId);
		attributeGetterFunctions.put("createDate", NewsEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<NewsEntry, Date>)NewsEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", NewsEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<NewsEntry, Date>)NewsEntry::setModifiedDate);
		attributeGetterFunctions.put("newsTitle", NewsEntry::getNewsTitle);
		attributeSetterBiConsumers.put(
			"newsTitle",
			(BiConsumer<NewsEntry, String>)NewsEntry::setNewsTitle);
		attributeGetterFunctions.put("newsSummary", NewsEntry::getNewsSummary);
		attributeSetterBiConsumers.put(
			"newsSummary",
			(BiConsumer<NewsEntry, String>)NewsEntry::setNewsSummary);
		attributeGetterFunctions.put("newsContent", NewsEntry::getNewsContent);
		attributeSetterBiConsumers.put(
			"newsContent",
			(BiConsumer<NewsEntry, String>)NewsEntry::setNewsContent);
		attributeGetterFunctions.put("newsImageId", NewsEntry::getNewsImageId);
		attributeSetterBiConsumers.put(
			"newsImageId",
			(BiConsumer<NewsEntry, Long>)NewsEntry::setNewsImageId);
		attributeGetterFunctions.put("newsScopeId", NewsEntry::getNewsScopeId);
		attributeSetterBiConsumers.put(
			"newsScopeId",
			(BiConsumer<NewsEntry, Long>)NewsEntry::setNewsScopeId);
		attributeGetterFunctions.put("archive", NewsEntry::getArchive);
		attributeSetterBiConsumers.put(
			"archive", (BiConsumer<NewsEntry, Boolean>)NewsEntry::setArchive);
		attributeGetterFunctions.put(
			"allowedInDashBoard", NewsEntry::getAllowedInDashBoard);
		attributeSetterBiConsumers.put(
			"allowedInDashBoard",
			(BiConsumer<NewsEntry, Boolean>)NewsEntry::setAllowedInDashBoard);
		attributeGetterFunctions.put("expireDate", NewsEntry::getExpireDate);
		attributeSetterBiConsumers.put(
			"expireDate",
			(BiConsumer<NewsEntry, Date>)NewsEntry::setExpireDate);
		attributeGetterFunctions.put("ToEmail", NewsEntry::getToEmail);
		attributeSetterBiConsumers.put(
			"ToEmail", (BiConsumer<NewsEntry, String>)NewsEntry::setToEmail);
		attributeGetterFunctions.put("status", NewsEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<NewsEntry, Integer>)NewsEntry::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", NewsEntry::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<NewsEntry, Long>)NewsEntry::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", NewsEntry::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<NewsEntry, String>)NewsEntry::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", NewsEntry::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<NewsEntry, Date>)NewsEntry::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getNewsEntryId() {
		return _newsEntryId;
	}

	@Override
	public void setNewsEntryId(long newsEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newsEntryId = newsEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("GROUP_ID"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("COMPANY_ID"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNewsTitle() {
		if (_newsTitle == null) {
			return "";
		}
		else {
			return _newsTitle;
		}
	}

	@Override
	public void setNewsTitle(String newsTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newsTitle = newsTitle;
	}

	@JSON
	@Override
	public String getNewsSummary() {
		if (_newsSummary == null) {
			return "";
		}
		else {
			return _newsSummary;
		}
	}

	@Override
	public void setNewsSummary(String newsSummary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newsSummary = newsSummary;
	}

	@JSON
	@Override
	public String getNewsContent() {
		if (_newsContent == null) {
			return "";
		}
		else {
			return _newsContent;
		}
	}

	@Override
	public void setNewsContent(String newsContent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newsContent = newsContent;
	}

	@JSON
	@Override
	public long getNewsImageId() {
		return _newsImageId;
	}

	@Override
	public void setNewsImageId(long newsImageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newsImageId = newsImageId;
	}

	@JSON
	@Override
	public long getNewsScopeId() {
		return _newsScopeId;
	}

	@Override
	public void setNewsScopeId(long newsScopeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newsScopeId = newsScopeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNewsScopeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("NEWS_SCOPE_ID"));
	}

	@JSON
	@Override
	public boolean getArchive() {
		return _archive;
	}

	@JSON
	@Override
	public boolean isArchive() {
		return _archive;
	}

	@Override
	public void setArchive(boolean archive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_archive = archive;
	}

	@JSON
	@Override
	public boolean getAllowedInDashBoard() {
		return _allowedInDashBoard;
	}

	@JSON
	@Override
	public boolean isAllowedInDashBoard() {
		return _allowedInDashBoard;
	}

	@Override
	public void setAllowedInDashBoard(boolean allowedInDashBoard) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_allowedInDashBoard = allowedInDashBoard;
	}

	@JSON
	@Override
	public Date getExpireDate() {
		return _expireDate;
	}

	@Override
	public void setExpireDate(Date expireDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expireDate = expireDate;
	}

	@JSON
	@Override
	public String getToEmail() {
		if (_ToEmail == null) {
			return "";
		}
		else {
			return _ToEmail;
		}
	}

	@Override
	public void setToEmail(String ToEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ToEmail = ToEmail;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("STATUS"));
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NewsEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NewsEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NewsEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NewsEntryImpl newsEntryImpl = new NewsEntryImpl();

		newsEntryImpl.setNewsEntryId(getNewsEntryId());
		newsEntryImpl.setGroupId(getGroupId());
		newsEntryImpl.setCompanyId(getCompanyId());
		newsEntryImpl.setUserId(getUserId());
		newsEntryImpl.setCreateDate(getCreateDate());
		newsEntryImpl.setModifiedDate(getModifiedDate());
		newsEntryImpl.setNewsTitle(getNewsTitle());
		newsEntryImpl.setNewsSummary(getNewsSummary());
		newsEntryImpl.setNewsContent(getNewsContent());
		newsEntryImpl.setNewsImageId(getNewsImageId());
		newsEntryImpl.setNewsScopeId(getNewsScopeId());
		newsEntryImpl.setArchive(isArchive());
		newsEntryImpl.setAllowedInDashBoard(isAllowedInDashBoard());
		newsEntryImpl.setExpireDate(getExpireDate());
		newsEntryImpl.setToEmail(getToEmail());
		newsEntryImpl.setStatus(getStatus());
		newsEntryImpl.setStatusByUserId(getStatusByUserId());
		newsEntryImpl.setStatusByUserName(getStatusByUserName());
		newsEntryImpl.setStatusDate(getStatusDate());

		newsEntryImpl.resetOriginalValues();

		return newsEntryImpl;
	}

	@Override
	public NewsEntry cloneWithOriginalValues() {
		NewsEntryImpl newsEntryImpl = new NewsEntryImpl();

		newsEntryImpl.setNewsEntryId(
			this.<Long>getColumnOriginalValue("NEWS_ENTRY_ID"));
		newsEntryImpl.setGroupId(this.<Long>getColumnOriginalValue("GROUP_ID"));
		newsEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("COMPANY_ID"));
		newsEntryImpl.setUserId(this.<Long>getColumnOriginalValue("USER_ID"));
		newsEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("CREATE_DATE"));
		newsEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("MODIFIED_DATE"));
		newsEntryImpl.setNewsTitle(
			this.<String>getColumnOriginalValue("NEWS_TITLE"));
		newsEntryImpl.setNewsSummary(
			this.<String>getColumnOriginalValue("NEWS_SUMMARY"));
		newsEntryImpl.setNewsContent(
			this.<String>getColumnOriginalValue("NEWS_CONTENT"));
		newsEntryImpl.setNewsImageId(
			this.<Long>getColumnOriginalValue("NEWS_IMAGE_ID"));
		newsEntryImpl.setNewsScopeId(
			this.<Long>getColumnOriginalValue("NEWS_SCOPE_ID"));
		newsEntryImpl.setArchive(
			this.<Boolean>getColumnOriginalValue("ARCHIVE"));
		newsEntryImpl.setAllowedInDashBoard(
			this.<Boolean>getColumnOriginalValue("ALLOWED_IN_DASHBOARD"));
		newsEntryImpl.setExpireDate(
			this.<Date>getColumnOriginalValue("EXPIRE_DATE"));
		newsEntryImpl.setToEmail(
			this.<String>getColumnOriginalValue("TO_NEWS_EMAIL"));
		newsEntryImpl.setStatus(this.<Integer>getColumnOriginalValue("STATUS"));
		newsEntryImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("STATUS_BY_USER_ID"));
		newsEntryImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("STATUS_BY_USER_NAME"));
		newsEntryImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("STATUS_DATE"));

		return newsEntryImpl;
	}

	@Override
	public int compareTo(NewsEntry newsEntry) {
		long primaryKey = newsEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NewsEntry)) {
			return false;
		}

		NewsEntry newsEntry = (NewsEntry)object;

		long primaryKey = newsEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NewsEntry> toCacheModel() {
		NewsEntryCacheModel newsEntryCacheModel = new NewsEntryCacheModel();

		newsEntryCacheModel.newsEntryId = getNewsEntryId();

		newsEntryCacheModel.groupId = getGroupId();

		newsEntryCacheModel.companyId = getCompanyId();

		newsEntryCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			newsEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			newsEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			newsEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			newsEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		newsEntryCacheModel.newsTitle = getNewsTitle();

		String newsTitle = newsEntryCacheModel.newsTitle;

		if ((newsTitle != null) && (newsTitle.length() == 0)) {
			newsEntryCacheModel.newsTitle = null;
		}

		newsEntryCacheModel.newsSummary = getNewsSummary();

		String newsSummary = newsEntryCacheModel.newsSummary;

		if ((newsSummary != null) && (newsSummary.length() == 0)) {
			newsEntryCacheModel.newsSummary = null;
		}

		newsEntryCacheModel.newsContent = getNewsContent();

		String newsContent = newsEntryCacheModel.newsContent;

		if ((newsContent != null) && (newsContent.length() == 0)) {
			newsEntryCacheModel.newsContent = null;
		}

		newsEntryCacheModel.newsImageId = getNewsImageId();

		newsEntryCacheModel.newsScopeId = getNewsScopeId();

		newsEntryCacheModel.archive = isArchive();

		newsEntryCacheModel.allowedInDashBoard = isAllowedInDashBoard();

		Date expireDate = getExpireDate();

		if (expireDate != null) {
			newsEntryCacheModel.expireDate = expireDate.getTime();
		}
		else {
			newsEntryCacheModel.expireDate = Long.MIN_VALUE;
		}

		newsEntryCacheModel.ToEmail = getToEmail();

		String ToEmail = newsEntryCacheModel.ToEmail;

		if ((ToEmail != null) && (ToEmail.length() == 0)) {
			newsEntryCacheModel.ToEmail = null;
		}

		newsEntryCacheModel.status = getStatus();

		newsEntryCacheModel.statusByUserId = getStatusByUserId();

		newsEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = newsEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			newsEntryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			newsEntryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			newsEntryCacheModel.statusDate = Long.MIN_VALUE;
		}

		return newsEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NewsEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NewsEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewsEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((NewsEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<NewsEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<NewsEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NewsEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((NewsEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NewsEntry>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					NewsEntry.class, ModelWrapper.class);

	}

	private long _newsEntryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _newsTitle;
	private String _newsSummary;
	private String _newsContent;
	private long _newsImageId;
	private long _newsScopeId;
	private boolean _archive;
	private boolean _allowedInDashBoard;
	private Date _expireDate;
	private String _ToEmail;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<NewsEntry, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NewsEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("NEWS_ENTRY_ID", _newsEntryId);
		_columnOriginalValues.put("GROUP_ID", _groupId);
		_columnOriginalValues.put("COMPANY_ID", _companyId);
		_columnOriginalValues.put("USER_ID", _userId);
		_columnOriginalValues.put("CREATE_DATE", _createDate);
		_columnOriginalValues.put("MODIFIED_DATE", _modifiedDate);
		_columnOriginalValues.put("NEWS_TITLE", _newsTitle);
		_columnOriginalValues.put("NEWS_SUMMARY", _newsSummary);
		_columnOriginalValues.put("NEWS_CONTENT", _newsContent);
		_columnOriginalValues.put("NEWS_IMAGE_ID", _newsImageId);
		_columnOriginalValues.put("NEWS_SCOPE_ID", _newsScopeId);
		_columnOriginalValues.put("ARCHIVE", _archive);
		_columnOriginalValues.put("ALLOWED_IN_DASHBOARD", _allowedInDashBoard);
		_columnOriginalValues.put("EXPIRE_DATE", _expireDate);
		_columnOriginalValues.put("TO_NEWS_EMAIL", _ToEmail);
		_columnOriginalValues.put("STATUS", _status);
		_columnOriginalValues.put("STATUS_BY_USER_ID", _statusByUserId);
		_columnOriginalValues.put("STATUS_BY_USER_NAME", _statusByUserName);
		_columnOriginalValues.put("STATUS_DATE", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("NEWS_ENTRY_ID", "newsEntryId");
		attributeNames.put("GROUP_ID", "groupId");
		attributeNames.put("COMPANY_ID", "companyId");
		attributeNames.put("USER_ID", "userId");
		attributeNames.put("CREATE_DATE", "createDate");
		attributeNames.put("MODIFIED_DATE", "modifiedDate");
		attributeNames.put("NEWS_TITLE", "newsTitle");
		attributeNames.put("NEWS_SUMMARY", "newsSummary");
		attributeNames.put("NEWS_CONTENT", "newsContent");
		attributeNames.put("NEWS_IMAGE_ID", "newsImageId");
		attributeNames.put("NEWS_SCOPE_ID", "newsScopeId");
		attributeNames.put("ARCHIVE", "archive");
		attributeNames.put("ALLOWED_IN_DASHBOARD", "allowedInDashBoard");
		attributeNames.put("EXPIRE_DATE", "expireDate");
		attributeNames.put("TO_NEWS_EMAIL", "ToEmail");
		attributeNames.put("STATUS", "status");
		attributeNames.put("STATUS_BY_USER_ID", "statusByUserId");
		attributeNames.put("STATUS_BY_USER_NAME", "statusByUserName");
		attributeNames.put("STATUS_DATE", "statusDate");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("NEWS_ENTRY_ID", 1L);

		columnBitmasks.put("GROUP_ID", 2L);

		columnBitmasks.put("COMPANY_ID", 4L);

		columnBitmasks.put("USER_ID", 8L);

		columnBitmasks.put("CREATE_DATE", 16L);

		columnBitmasks.put("MODIFIED_DATE", 32L);

		columnBitmasks.put("NEWS_TITLE", 64L);

		columnBitmasks.put("NEWS_SUMMARY", 128L);

		columnBitmasks.put("NEWS_CONTENT", 256L);

		columnBitmasks.put("NEWS_IMAGE_ID", 512L);

		columnBitmasks.put("NEWS_SCOPE_ID", 1024L);

		columnBitmasks.put("ARCHIVE", 2048L);

		columnBitmasks.put("ALLOWED_IN_DASHBOARD", 4096L);

		columnBitmasks.put("EXPIRE_DATE", 8192L);

		columnBitmasks.put("TO_NEWS_EMAIL", 16384L);

		columnBitmasks.put("STATUS", 32768L);

		columnBitmasks.put("STATUS_BY_USER_ID", 65536L);

		columnBitmasks.put("STATUS_BY_USER_NAME", 131072L);

		columnBitmasks.put("STATUS_DATE", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NewsEntry _escapedModel;

}