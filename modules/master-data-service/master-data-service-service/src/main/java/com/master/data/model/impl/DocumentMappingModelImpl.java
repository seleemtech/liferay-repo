/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.master.data.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.master.data.model.DocumentMapping;
import com.master.data.model.DocumentMappingModel;
import com.master.data.model.DocumentMappingSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DocumentMapping service. Represents a row in the &quot;Master_DocumentMapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DocumentMappingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocumentMappingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DocumentMappingImpl
 * @generated
 */
@JSON(strict = true)
public class DocumentMappingModelImpl
	extends BaseModelImpl<DocumentMapping> implements DocumentMappingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a document mapping model instance should use the <code>DocumentMapping</code> interface instead.
	 */
	public static final String TABLE_NAME = "Master_DocumentMapping";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"recordId", Types.BIGINT},
		{"moduleName", Types.VARCHAR}, {"classPk", Types.BIGINT},
		{"documentName", Types.VARCHAR}, {"documentId", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"userId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("moduleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classPk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Master_DocumentMapping (uuid_ VARCHAR(75) null,recordId LONG not null primary key,moduleName VARCHAR(75) null,classPk LONG,documentName VARCHAR(75) null,documentId LONG,createdDate DATE null,modifiedDate DATE null,userId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table Master_DocumentMapping";

	public static final String ORDER_BY_JPQL =
		" ORDER BY documentMapping.recordId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Master_DocumentMapping.recordId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RECORDID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static DocumentMapping toModel(DocumentMappingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DocumentMapping model = new DocumentMappingImpl();

		model.setUuid(soapModel.getUuid());
		model.setRecordId(soapModel.getRecordId());
		model.setModuleName(soapModel.getModuleName());
		model.setClassPk(soapModel.getClassPk());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentId(soapModel.getDocumentId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<DocumentMapping> toModels(
		DocumentMappingSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<DocumentMapping> models = new ArrayList<DocumentMapping>(
			soapModels.length);

		for (DocumentMappingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DocumentMappingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recordId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecordId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recordId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DocumentMapping.class;
	}

	@Override
	public String getModelClassName() {
		return DocumentMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DocumentMapping, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DocumentMapping, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocumentMapping, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DocumentMapping)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DocumentMapping, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DocumentMapping, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DocumentMapping)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DocumentMapping, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DocumentMapping, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DocumentMapping>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DocumentMapping.class.getClassLoader(), DocumentMapping.class,
			ModelWrapper.class);

		try {
			Constructor<DocumentMapping> constructor =
				(Constructor<DocumentMapping>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DocumentMapping, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DocumentMapping, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DocumentMapping, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<DocumentMapping, Object>>();
		Map<String, BiConsumer<DocumentMapping, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DocumentMapping, ?>>();

		attributeGetterFunctions.put("uuid", DocumentMapping::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<DocumentMapping, String>)DocumentMapping::setUuid);
		attributeGetterFunctions.put("recordId", DocumentMapping::getRecordId);
		attributeSetterBiConsumers.put(
			"recordId",
			(BiConsumer<DocumentMapping, Long>)DocumentMapping::setRecordId);
		attributeGetterFunctions.put(
			"moduleName", DocumentMapping::getModuleName);
		attributeSetterBiConsumers.put(
			"moduleName",
			(BiConsumer<DocumentMapping, String>)
				DocumentMapping::setModuleName);
		attributeGetterFunctions.put("classPk", DocumentMapping::getClassPk);
		attributeSetterBiConsumers.put(
			"classPk",
			(BiConsumer<DocumentMapping, Long>)DocumentMapping::setClassPk);
		attributeGetterFunctions.put(
			"documentName", DocumentMapping::getDocumentName);
		attributeSetterBiConsumers.put(
			"documentName",
			(BiConsumer<DocumentMapping, String>)
				DocumentMapping::setDocumentName);
		attributeGetterFunctions.put(
			"documentId", DocumentMapping::getDocumentId);
		attributeSetterBiConsumers.put(
			"documentId",
			(BiConsumer<DocumentMapping, Long>)DocumentMapping::setDocumentId);
		attributeGetterFunctions.put(
			"createdDate", DocumentMapping::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<DocumentMapping, Date>)DocumentMapping::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", DocumentMapping::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DocumentMapping, Date>)
				DocumentMapping::setModifiedDate);
		attributeGetterFunctions.put("userId", DocumentMapping::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DocumentMapping, Long>)DocumentMapping::setUserId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRecordId() {
		return _recordId;
	}

	@Override
	public void setRecordId(long recordId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recordId = recordId;
	}

	@JSON
	@Override
	public String getModuleName() {
		if (_moduleName == null) {
			return "";
		}
		else {
			return _moduleName;
		}
	}

	@Override
	public void setModuleName(String moduleName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_moduleName = moduleName;
	}

	@JSON
	@Override
	public long getClassPk() {
		return _classPk;
	}

	@Override
	public void setClassPk(long classPk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPk = classPk;
	}

	@JSON
	@Override
	public String getDocumentName() {
		if (_documentName == null) {
			return "";
		}
		else {
			return _documentName;
		}
	}

	@Override
	public void setDocumentName(String documentName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentName = documentName;
	}

	@JSON
	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentId = documentId;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DocumentMapping.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DocumentMapping toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DocumentMapping>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocumentMappingImpl documentMappingImpl = new DocumentMappingImpl();

		documentMappingImpl.setUuid(getUuid());
		documentMappingImpl.setRecordId(getRecordId());
		documentMappingImpl.setModuleName(getModuleName());
		documentMappingImpl.setClassPk(getClassPk());
		documentMappingImpl.setDocumentName(getDocumentName());
		documentMappingImpl.setDocumentId(getDocumentId());
		documentMappingImpl.setCreatedDate(getCreatedDate());
		documentMappingImpl.setModifiedDate(getModifiedDate());
		documentMappingImpl.setUserId(getUserId());

		documentMappingImpl.resetOriginalValues();

		return documentMappingImpl;
	}

	@Override
	public DocumentMapping cloneWithOriginalValues() {
		DocumentMappingImpl documentMappingImpl = new DocumentMappingImpl();

		documentMappingImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		documentMappingImpl.setRecordId(
			this.<Long>getColumnOriginalValue("recordId"));
		documentMappingImpl.setModuleName(
			this.<String>getColumnOriginalValue("moduleName"));
		documentMappingImpl.setClassPk(
			this.<Long>getColumnOriginalValue("classPk"));
		documentMappingImpl.setDocumentName(
			this.<String>getColumnOriginalValue("documentName"));
		documentMappingImpl.setDocumentId(
			this.<Long>getColumnOriginalValue("documentId"));
		documentMappingImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		documentMappingImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		documentMappingImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));

		return documentMappingImpl;
	}

	@Override
	public int compareTo(DocumentMapping documentMapping) {
		long primaryKey = documentMapping.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DocumentMapping)) {
			return false;
		}

		DocumentMapping documentMapping = (DocumentMapping)object;

		long primaryKey = documentMapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DocumentMapping> toCacheModel() {
		DocumentMappingCacheModel documentMappingCacheModel =
			new DocumentMappingCacheModel();

		documentMappingCacheModel.uuid = getUuid();

		String uuid = documentMappingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			documentMappingCacheModel.uuid = null;
		}

		documentMappingCacheModel.recordId = getRecordId();

		documentMappingCacheModel.moduleName = getModuleName();

		String moduleName = documentMappingCacheModel.moduleName;

		if ((moduleName != null) && (moduleName.length() == 0)) {
			documentMappingCacheModel.moduleName = null;
		}

		documentMappingCacheModel.classPk = getClassPk();

		documentMappingCacheModel.documentName = getDocumentName();

		String documentName = documentMappingCacheModel.documentName;

		if ((documentName != null) && (documentName.length() == 0)) {
			documentMappingCacheModel.documentName = null;
		}

		documentMappingCacheModel.documentId = getDocumentId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			documentMappingCacheModel.createdDate = createdDate.getTime();
		}
		else {
			documentMappingCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			documentMappingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			documentMappingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		documentMappingCacheModel.userId = getUserId();

		return documentMappingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DocumentMapping, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DocumentMapping, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocumentMapping, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DocumentMapping)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DocumentMapping, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DocumentMapping, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocumentMapping, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DocumentMapping)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DocumentMapping>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _recordId;
	private String _moduleName;
	private long _classPk;
	private String _documentName;
	private long _documentId;
	private Date _createdDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _userId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DocumentMapping, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DocumentMapping)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("recordId", _recordId);
		_columnOriginalValues.put("moduleName", _moduleName);
		_columnOriginalValues.put("classPk", _classPk);
		_columnOriginalValues.put("documentName", _documentName);
		_columnOriginalValues.put("documentId", _documentId);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("userId", _userId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("recordId", 2L);

		columnBitmasks.put("moduleName", 4L);

		columnBitmasks.put("classPk", 8L);

		columnBitmasks.put("documentName", 16L);

		columnBitmasks.put("documentId", 32L);

		columnBitmasks.put("createdDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("userId", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DocumentMapping _escapedModel;

}